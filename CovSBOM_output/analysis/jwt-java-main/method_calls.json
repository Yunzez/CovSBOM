{"application/jwt-java-main/src/main/java/com/bastiaanjansen/jwt/Claims.java":[{"declaringType":"org.json.JSONObject","methodSignature":"toString()","methodName":"toString","lineNumber":["26"],"fullExpression":"new JSONObject(claims).toString()","currentLayer":0,"declarationInfo":null}],"application/jwt-java-main/src/test/java/com/bastiaanjansen/jwt/algorithms/HMACAlgorithmTest.java":[{"declaringType":"org.hamcrest.CoreMatchers","methodSignature":"is(T)","methodName":"is","lineNumber":["40","54","68","75"],"fullExpression":"is(expected)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.jupiter.api.Assertions","methodSignature":"assertDoesNotThrow(org.junit.jupiter.api.function.Executable)","methodName":"assertDoesNotThrow","lineNumber":["31","45","59"],"fullExpression":"assertDoesNotThrow(() -> algorithm.sign(\"data\".getBytes()))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.hamcrest.MatcherAssert","methodSignature":"assertThat(T, org.hamcrest.Matcher<? super T>)","methodName":"assertThat","lineNumber":["40","54","68","75"],"fullExpression":"assertThat(signedBase64URLEncoded, is(expected))","currentLayer":0,"declarationInfo":null}],"application/jwt-java-main/src/main/java/com/bastiaanjansen/jwt/Header.java":[{"declaringType":"org.json.JSONObject","methodSignature":"toMap()","methodName":"toMap","lineNumber":["21"],"fullExpression":"new JSONObject(decodedJSON).toMap()","currentLayer":0,"declarationInfo":null}],"application/jwt-java-main/src/test/java/com/bastiaanjansen/jwt/PayloadTest.java":[{"declaringType":"org.hamcrest.CoreMatchers","methodSignature":"is(T)","methodName":"is","lineNumber":["38","50","58","66","74","82","90","98","106","114","121","129","137","145","153","161","169","177","188"],"fullExpression":"is(expected)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.hamcrest.MatcherAssert","methodSignature":"assertThat(T, org.hamcrest.Matcher<? super T>)","methodName":"assertThat","lineNumber":["38","50","58","66","74","82","90","98","106","114","121","129","137","145","153","161","177","185"],"fullExpression":"assertThat(payload.getID(), is(expected))","currentLayer":0,"declarationInfo":null}],"application/jwt-java-main/src/test/java/com/bastiaanjansen/jwt/JWTTest.java":[{"declaringType":"org.hamcrest.MatcherAssert","methodSignature":"assertThat(T, org.hamcrest.Matcher<? super T>)","methodName":"assertThat","lineNumber":["46","53","61","69","77","85","93","101","109","117","125","133","141","149","157","217","225","233","241","249","257","313","321"],"fullExpression":"assertThat(jwt.getHeader().getType(), is(expected))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.hamcrest.CoreMatchers","methodSignature":"is(T)","methodName":"is","lineNumber":["46","53","61","69","77","85","93","101","109","117","125","133","141","149","157","217","225","233","241","249","257","313","321"],"fullExpression":"is(expected)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.jupiter.api.Assertions","methodSignature":"assertDoesNotThrow(org.junit.jupiter.api.function.Executable)","methodName":"assertDoesNotThrow","lineNumber":["38","209","292","297","305"],"fullExpression":"assertDoesNotThrow(() -> new JWT.Builder(algorithm).build())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.jupiter.api.Assertions","methodSignature":"assertThrows(java.lang.Class<T>, org.junit.jupiter.api.function.Executable)","methodName":"assertThrows","lineNumber":["164","171","178","185","192","199","204","264","271","278","285"],"fullExpression":"assertThrows(IllegalArgumentException.class, () -> builder.withHeader(null))","currentLayer":0,"declarationInfo":null}],"application/jwt-java-main/src/main/java/com/bastiaanjansen/jwt/Payload.java":[{"declaringType":"org.json.JSONObject","methodSignature":"toMap()","methodName":"toMap","lineNumber":["19"],"fullExpression":"new JSONObject(decodedJSON).toMap()","currentLayer":0,"declarationInfo":null}],"application/jwt-java-main/src/test/java/com/bastiaanjansen/jwt/algorithms/RSAAlgorithmTest.java":[{"declaringType":"org.hamcrest.CoreMatchers","methodSignature":"is(T)","methodName":"is","lineNumber":["62","76","90","97"],"fullExpression":"is(expected)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.jupiter.api.Assertions","methodSignature":"assertDoesNotThrow(org.junit.jupiter.api.function.Executable)","methodName":"assertDoesNotThrow","lineNumber":["28","53","67","81"],"fullExpression":"assertDoesNotThrow(() -> {\n    String publicKeyContent = \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAm5PpsWJJvL3W+N0wiLniRbbrKx5qhxob/1hEfEzCOQLwl8pbO5UiuTE7nhdvHyCmQhAexpKIL0PRpKwHEWNN/KOxAZ5xdSIZU6W44Inq/hkK5ugbCViV4ONnpz+I1XoDNAi4ITJVpIPyqu2r4C4BTAZnozca8fe7p6VYzECnP3OZT+ELota4TRy3G5W6WIFayftGuvx0dncJOgy6SUaNuUBs2t9KXFHmxfYCz78WLq3QWDz21f1siqib+qHAdH5aNlPAkpqyP2hPLoc8VHKKs+Eb0QlkpW9ZABoybrHCWnPI1C4mdLMQ4MWqEgKKWvqrjDZDBfRfk6U/VUDuneQ9ZwIDAQAB\";\n    String privateKeyContent = \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCbk+mxYkm8vdb43TCIueJFtusrHmqHGhv/WER8TMI5AvCXyls7lSK5MTueF28fIKZCEB7GkogvQ9GkrAcRY038o7EBnnF1IhlTpbjgier+GQrm6BsJWJXg42enP4jVegM0CLghMlWkg/Kq7avgLgFMBmejNxrx97unpVjMQKc/c5lP4Qui1rhNHLcblbpYgVrJ+0a6/HR2dwk6DLpJRo25QGza30pcUebF9gLPvxYurdBYPPbV/WyKqJv6ocB0flo2U8CSmrI/aE8uhzxUcoqz4RvRCWSlb1kAGjJuscJac8jULiZ0sxDgxaoSAopa+quMNkMF9F+TpT9VQO6d5D1nAgMBAAECggEATT58SiktyTtMb9WKkmgQc2KlkowQgjGxcu9FWZ3W1O2jvQmokIW0btSF8DFcZ80THzvXu+nnGeiHP0Z2X+i5QNWZPd+IH4slngVrLHjtpumSIyFcwyArkjP2M/D0pGFnE7+8hCb0pLEqnDlTHARben63mC70/uxsTIlo9EipgXPCOBDAd/QsE3dhlO4SbEmCJMQR6eV1B8an+40ZbhQCG8IO832jDiDYabS5tyOPgU2ahG5UhzqsfPFQBlgJ2ePPyXXYaQlS1Gj8OD3ISJbCSxiitejbKjSaGsjoBv+81lkd3vqOYSZQDMf02rSRwp57mFfZ3G7Yk9lS+Q8abmUsyQKBgQDUtzLp3O+1363sT8lAjO9zWEXAqWT38mNaBqjR5c3Kv18xzm9LjTd9GfEgYgFmN6fkr1I85ZI35wR6pKjjJwUVci6615N2ghhTrcw9f8/zD/IejVPmYYIUdfRQ9FTlvM/RhDRCiyd1k7xQ/uGfy+Swu4bSzypzHUYeVQ6Xv5c/YwKBgQC7PEjjkzcLjn0EJcgnW11Md+Yrvg9NBKJO2JdMXfwRhN2NDAobbshJqaZeffgrTfU8KuGLmGNPE7UFnxOGnIVdDQwvjhde4LWuL/R6n10zu3tCmqvxBx7yzSO1+Ldi5bT9VI04x/gnGPQn489p0GBNWrN3AmC+RFXOridoVItTLQKBgBu3HvgfpFADK+sdXjB97HkP6E65A4HW4CELuxVWJuEi3ClmJ1QluzQenC9G9b22xLZkLYfntYx5GjlMmQC3xc7MiNApZHpNaxQEEhd1PsgBrN9UNLlQvR0jXUjq/ODOIBnBavm8ndCRBjlbbFRgwZRRariu624CQ2+ST4twGCnXAoGBAKvajGhdgiOYWEULTKhbIsqCLoCtxSuC+lr2UACnLysBUb0ZdNlzGGEMVwjaBIPy3QmprjVL3LMDOp77QJfIaFxdEnc/q1HJXNiRaYt3ZLuL9HnQr8reJ1jiU0m+DMy4XCQ9jBW27Z0tOUS3w3Oy8AFwI9MzGoro+/1lOgR3vR3NAoGAdmP0aPZfFHM6mdtkKVmNjPM8BTYhok+pEBzntNosUGqIT2u+TPFDV8aTYEti6mIrMVTO1mHRoqi9VL0WDHRT3IqTn3JE+KR2fUlMSE/PqW8MJ+70EhelgJj+bL6iyecnPqdquES57DYoFkdvqtz0qNL2gdzK5ay55YWgYbk0szw=\";\n    KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n    PKCS8EncodedKeySpec keySpecPKCS8 = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(privateKeyContent));\n    PrivateKey privateKey = kf.generatePrivate(keySpecPKCS8);\n    X509EncodedKeySpec keySpecX509 = new X509EncodedKeySpec(Base64.getDecoder().decode(publicKeyContent));\n    RSAPublicKey publicKey = (RSAPublicKey) kf.generatePublic(keySpecX509);\n    KeyPair keyPair = new KeyPair(publicKey, privateKey);\n    algorithm = new RSAAlgorithm(\"RS512\", \"SHA512withRSA\", keyPair);\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.hamcrest.MatcherAssert","methodSignature":"assertThat(T, org.hamcrest.Matcher<? super T>)","methodName":"assertThat","lineNumber":["62","76","90","97"],"fullExpression":"assertThat(signedBase64URLEncoded, is(expected))","currentLayer":0,"declarationInfo":null}],"application/jwt-java-main/src/test/java/com/bastiaanjansen/jwt/DefaultJWTValidatorTest.java":[{"declaringType":"org.junit.jupiter.api.Assertions","methodSignature":"assertDoesNotThrow(org.junit.jupiter.api.function.Executable)","methodName":"assertDoesNotThrow","lineNumber":["36","63","71","95","111","127","143","159","167","192","210","228","244","252","268"],"fullExpression":"assertDoesNotThrow(() -> validator.validate(jwt))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.jupiter.api.Assertions","methodSignature":"assertThrows(java.lang.Class<T>, org.junit.jupiter.api.function.Executable)","methodName":"assertThrows","lineNumber":["45","54","79","87","103","119","135","151","175","183","201","219","236","260","276","281","286","291","296","301","306","311","316"],"fullExpression":"assertThrows(JWTValidationException.class, () -> validator.validate(jwt))","currentLayer":0,"declarationInfo":null}],"application/jwt-java-main/src/test/java/com/bastiaanjansen/jwt/HeaderTest.java":[{"declaringType":"org.hamcrest.CoreMatchers","methodSignature":"is(T)","methodName":"is","lineNumber":["32","44","56","64","72","80","87","95"],"fullExpression":"is(expected)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.hamcrest.MatcherAssert","methodSignature":"assertThat(T, org.hamcrest.Matcher<? super T>)","methodName":"assertThat","lineNumber":["32","44","56","64","72","80","87","95"],"fullExpression":"assertThat(header.getType(), is(expected))","currentLayer":0,"declarationInfo":null}]}