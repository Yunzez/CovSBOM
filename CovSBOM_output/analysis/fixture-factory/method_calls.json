{"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/function/DateTimeFunctionTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["25","33","40"],"fullExpression":"assertTrue(String.format(\"Generated date is not after %s\", source), value.after(toCalendar(source, format)))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","methodName":"assertNotNull","lineNumber":["24","32","39"],"fullExpression":"assertNotNull(\"Generated date can not be null\", value)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/transformer/DateTimeTransformerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","methodName":"assertNotNull","lineNumber":["31","42","53","64","75","86","97"],"fullExpression":"assertNotNull(\"LocalDateTime should not be null\", transform)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNull(java.lang.Object)","methodName":"assertNull","lineNumber":["103"],"fullExpression":"assertNull(new DateTimeTransformer().transform(null, LocalDateTime.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["32","43","54","65","76","87","98"],"fullExpression":"assertEquals(\"LocalDateTimes should be equal\", date, transform)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/main/java/br/com/six2six/fixturefactory/transformer/PrimitiveTransformer.java":[{"declaringType":"org.apache.commons.lang.ClassUtils","methodSignature":"primitiveToWrapper(java.lang.Class)","methodName":"primitiveToWrapper","lineNumber":["13"],"fullExpression":"ClassUtils.primitiveToWrapper(type)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/FixtureLambdaPlaneTest.java":[{"declaringType":"org.hamcrest.Matchers","methodSignature":"is(org.hamcrest.Matcher<T>)","methodName":"is","lineNumber":["24","25"],"fullExpression":"is(notNullValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.hamcrest.Matchers","methodSignature":"notNullValue()","methodName":"notNullValue","lineNumber":["24"],"fullExpression":"notNullValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.hamcrest.Matchers","methodSignature":"equalTo(T)","methodName":"equalTo","lineNumber":["25"],"fullExpression":"equalTo(3)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/transformer/SetTransformerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["37","60","70"],"fullExpression":"assertTrue(new SetTransformer().accepts(Arrays.asList(\"A\", \"B\"), Set.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["42","43","44","45","46","47","48","49","61","71"],"fullExpression":"assertEquals(new SetTransformer().transform(new HashSet<String>(Arrays.asList(\"A\", \"B\")), HashSet.class).size(), 2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(boolean)","methodName":"assertFalse","lineNumber":["27","32"],"fullExpression":"assertFalse(new SetTransformer().accepts(new HashMap<String, Object>(), Set.class))","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/transformer/WrapperTransformerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["35","40"],"fullExpression":"assertTrue(new WrapperTransformer().accepts(\"1\", Integer.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["14","20"],"fullExpression":"assertEquals(Long.valueOf(1), result)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(boolean)","methodName":"assertFalse","lineNumber":["25","30"],"fullExpression":"assertFalse(new WrapperTransformer().accepts(new Object(), Long.class))","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/ObjectFactoryTest.java":[{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodSignature":"thenAnswer(org.mockito.stubbing.Answer<?>)","methodName":"thenAnswer","lineNumber":["35"],"fullExpression":"when(templateHolder.getClazz()).thenAnswer(new Answer<Class<?>>() {\n\n    @Override\n    public Class<?> answer(InvocationOnMock invocation) throws Throwable {\n        return clazz;\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"when(T)","methodName":"when","lineNumber":["35"],"fullExpression":"when(templateHolder.getClazz())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"mock(java.lang.Class<T>)","methodName":"mock","lineNumber":["33"],"fullExpression":"mock(TemplateHolder.class)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/util/ReflectionUtilsTest.java":[{"declaringType":"org.hamcrest.CoreMatchers","methodSignature":"is(T)","methodName":"is","lineNumber":["17","22","27","32"],"fullExpression":"is(true)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/PropertyTest.java":[{"declaringType":"org.junit.rules.ExpectedException","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","methodName":"expect","lineNumber":["22","29"],"fullExpression":"expectedException.expect(IllegalArgumentException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["66"],"fullExpression":"assertTrue(start <= value && value <= end)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodSignature":"none()","methodName":"none","lineNumber":["18"],"fullExpression":"ExpectedException.none()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.hamcrest.CoreMatchers","methodSignature":"containsString(java.lang.String)","methodName":"containsString","lineNumber":["23","30"],"fullExpression":"containsString(\"name\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodSignature":"expectMessage(org.hamcrest.Matcher<java.lang.String>)","methodName":"expectMessage","lineNumber":["23","30"],"fullExpression":"expectedException.expectMessage(containsString(\"name\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["38","45","51","57"],"fullExpression":"assertEquals(value, property.getValue())","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/function/UniqueRandomFunctionTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["89","113","126"],"fullExpression":"assertTrue(firstResult.equals(lastResult))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["39","62","76"],"fullExpression":"assertTrue(\"Not all generated integers were unique\", integers.isEmpty())","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/transformer/TransformerChainTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["15","22","29","36"],"fullExpression":"assertEquals(\"A1\", transformerChain.transform(\"A\", String.class))","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/transformer/PrimitiveTransformerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["23","28","40"],"fullExpression":"assertTrue(new PrimitiveTransformer().accepts(\"1\", int.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["34"],"fullExpression":"assertEquals(1L, result)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(boolean)","methodName":"assertFalse","lineNumber":["13","18"],"fullExpression":"assertFalse(new PrimitiveTransformer().accepts(new Object(), long.class))","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/function/CalendarSequenceFunctionTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["24","36","48","60"],"fullExpression":"assertEquals(\"Calendars should be equal\", baseCalendar, calendar)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/function/RandomFunctionTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["127","128","145","146"],"fullExpression":"assertTrue(bigDecimal.compareTo(new BigDecimal(\"1\")) >= 0)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["26","33","40","47","54","61","109","116","117","126","135","144","153","161","169","177","185","194","201","208","215","223","224","232","233","241","267"],"fullExpression":"assertTrue(\"Generated value is not a byte\", value instanceof Byte)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","methodName":"assertNotNull","lineNumber":["25","32","39","46","53","60","108","115","125","134","143","152","160","168","176","184","193","222","231","240","260","266"],"fullExpression":"assertNotNull(\"Generated byte must not be null\", value)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"fail(java.lang.String)","methodName":"fail","lineNumber":["67","73","79","85","91","97","102"],"fullExpression":"fail(\"primitive byte could not be generated\")","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/main/java/br/com/six2six/fixturefactory/function/impl/RegexFunction.java":[{"declaringType":"br.com.six2six.bfgex.RegexGen","methodSignature":"of(java.lang.String)","methodName":"of","lineNumber":["17"],"fullExpression":"RegexGen.of(pattern)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/main/java/br/com/six2six/fixturefactory/transformer/DateTimeTransformer.java":[{"declaringType":"org.apache.commons.lang.ClassUtils","methodSignature":"isAssignable(java.lang.Class, java.lang.Class)","methodName":"isAssignable","lineNumber":["19","22","25","28","31","34","37"],"fullExpression":"ClassUtils.isAssignable(type, java.time.LocalDateTime.class)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/util/PropertySorterTest.java":[{"declaringType":"org.hamcrest.Matchers","methodSignature":"contains(E...)","methodName":"contains","lineNumber":["30"],"fullExpression":"contains(firstName, lastName, email, emailConfirm)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertThat(T, org.hamcrest.Matcher<? super T>)","methodName":"assertThat","lineNumber":["30"],"fullExpression":"assertThat(sortedProperties, contains(firstName, lastName, email, emailConfirm))","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/transformer/PlaceholderTransformerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["20","29","38"],"fullExpression":"assertEquals(\"someone@domain.com\", result)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/FixtureInvoiceTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["37","44","53"],"fullExpression":"assertTrue(\"Invoice list should not be empty\", !invoices.isEmpty())","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/FixtureImmutableTest.java":[{"declaringType":"org.hamcrest.CoreMatchers","methodSignature":"equalTo(T)","methodName":"equalTo","lineNumber":["81","81","82","82","106"],"fullExpression":"equalTo(3L)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.hamcrest.CoreMatchers","methodSignature":"is(T)","methodName":"is","lineNumber":["89","90","96","97"],"fullExpression":"is(8)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.hamcrest.CoreMatchers","methodSignature":"either(org.hamcrest.Matcher<? super LHS>)","methodName":"either","lineNumber":["81","82"],"fullExpression":"CoreMatchers.<Long>either(equalTo(3L))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.hamcrest.core.CombinableMatcher.CombinableEitherMatcher","methodSignature":"or(org.hamcrest.Matcher<? super X>)","methodName":"or","lineNumber":["81","82"],"fullExpression":"CoreMatchers.<Long>either(equalTo(3L)).or(equalTo(4L))","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/main/java/br/com/six2six/fixturefactory/ObjectFactory.java":[{"declaringType":"org.apache.commons.lang.StringUtils","methodSignature":"join(java.util.Collection, java.lang.String)","methodName":"join","lineNumber":["84"],"fullExpression":"StringUtils.join(labels, \",\")","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/FixtureStudentTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["43","50"],"fullExpression":"assertTrue(oneStudent.getId() < otherStudent.getId())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["28","29"],"fullExpression":"assertTrue(\"Tests taken should be greather than 0\", student.getTestsTaken() > 0)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/function/CpfFunctionTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["18","25"],"fullExpression":"assertTrue(\"Invalid match for CPF\", Pattern.matches(\"\\\\d{11}\", value))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","methodName":"assertNotNull","lineNumber":["17","24"],"fullExpression":"assertNotNull(\"Generated CPF can not be null\", value)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/processor/HibernateProcessorTest.java":[{"declaringType":"org.mockito.Mockito","methodSignature":"verify(T, org.mockito.verification.VerificationMode)","methodName":"verify","lineNumber":["21"],"fullExpression":"verify(session, never())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"never()","methodName":"never","lineNumber":["21"],"fullExpression":"never()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.hibernate.Session","methodSignature":"save(java.lang.Object)","methodName":"save","lineNumber":["21"],"fullExpression":"verify(session, never()).save(embeddableClass)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"mock(java.lang.Class<T>)","methodName":"mock","lineNumber":["16"],"fullExpression":"mock(Session.class)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/ObjectFactoryWithProcessorTest.java":[{"declaringType":"org.mockito.Mockito","methodSignature":"verify(T)","methodName":"verify","lineNumber":["45","52","53","60","61","62","77","84","85","86","94","95","102","103"],"fullExpression":"verify(session)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"times(int)","methodName":"times","lineNumber":["69","76","87"],"fullExpression":"times(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"verify(T, org.mockito.verification.VerificationMode)","methodName":"verify","lineNumber":["69","76","87"],"fullExpression":"verify(session, times(2))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"mock(java.lang.Class<T>)","methodName":"mock","lineNumber":["37"],"fullExpression":"mock(Session.class)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/main/java/br/com/six2six/fixturefactory/function/impl/AssociationFunctionImpl.java":[{"declaringType":"org.apache.commons.lang.StringUtils","methodSignature":"isBlank(java.lang.String)","methodName":"isBlank","lineNumber":["105","112"],"fullExpression":"StringUtils.isBlank(targetAttribute)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.lang.ClassUtils","methodSignature":"isAssignable(java.lang.Class, java.lang.Class)","methodName":"isAssignable","lineNumber":["121"],"fullExpression":"ClassUtils.isAssignable(field.getType(), fieldType)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/function/RegexFunctionTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["40"],"fullExpression":"assertTrue(String.format(\"Generated %s (%s) no match with %s\", regexName, value, pattern), value.matches(pattern))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","methodName":"assertNotNull","lineNumber":["39"],"fullExpression":"assertNotNull(String.format(\"Generated %s can not be null\", regexName), regexName)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/function/NameFunctionTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","methodName":"assertNotNull","lineNumber":["16","22","28","34","40"],"fullExpression":"assertNotNull(\"Generated full name can not be null\", value)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/function/DateAsStringFunctionTest.java":[{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodSignature":"thenReturn(T)","methodName":"thenReturn","lineNumber":["26"],"fullExpression":"when(dateFunction.generateValue()).thenReturn(date)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"when(T)","methodName":"when","lineNumber":["26"],"fullExpression":"when(dateFunction.generateValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["29"],"fullExpression":"assertEquals(dateString, dateAsStringFunction.generateValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"mock(java.lang.Class<T>)","methodName":"mock","lineNumber":["25"],"fullExpression":"mock(DateFunction.class)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/function/CnpjFunctionTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["18","25"],"fullExpression":"assertTrue(\"Invalid match for CNPJ\", Pattern.matches(\"\\\\d{14}\", value))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","methodName":"assertNotNull","lineNumber":["17","24"],"fullExpression":"assertNotNull(\"Generated CNPJ can not be null\", value)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/main/java/br/com/six2six/fixturefactory/processor/HibernateProcessor.java":[{"declaringType":"org.hibernate.Session","methodSignature":"save(java.lang.Object)","methodName":"save","lineNumber":["18"],"fullExpression":"session.save(result)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/function/NumberSequenceFunctionTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, long, long)","methodName":"assertEquals","lineNumber":["16","25"],"fullExpression":"assertEquals(\"integers should be equal\", (int) function.generateValue(), i)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, double, double, double)","methodName":"assertEquals","lineNumber":["34"],"fullExpression":"assertEquals(\"floats should be equal\", (float) function.generateValue(), (float) i + (.2F), 0.001)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/transformer/CalendarTransformerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","methodName":"assertNotNull","lineNumber":["27","37","47","57"],"fullExpression":"assertNotNull(\"java.util.Date should not be null\", transform)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNull(java.lang.Object)","methodName":"assertNull","lineNumber":["63"],"fullExpression":"assertNull(new CalendarTransformer().transform(null, java.util.Date.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["28","38","48","58"],"fullExpression":"assertEquals(\"java.util.Dates should be equal\", date, transform)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/main/java/br/com/six2six/fixturefactory/util/ReflectionUtils.java":[{"declaringType":"net.vidageek.mirror.reflect.dsl.ReflectionHandler","methodSignature":"field(java.lang.String)","methodName":"field","lineNumber":["95"],"fullExpression":"new Mirror().on(targetBeanClass).reflect().field(propertyItem)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.vidageek.mirror.reflect.dsl.AllReflectionHandler","methodSignature":"constructors()","methodName":"constructors","lineNumber":["120","222"],"fullExpression":"new Mirror().on(target).reflectAll().constructors()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.vidageek.mirror.set.dsl.FieldSetter","methodSignature":"withValue(java.lang.Object)","methodName":"withValue","lineNumber":["70"],"fullExpression":"new Mirror().on(bean).set().field(attribute).withValue(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.vidageek.mirror.invoke.dsl.ConstructorHandler","methodSignature":"withArgs(java.lang.Object...)","methodName":"withArgs","lineNumber":["110"],"fullExpression":"new Mirror().on(target).invoke().constructor().withArgs(parameters.toArray())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.vidageek.mirror.dsl.ClassController","methodSignature":"invoke()","methodName":"invoke","lineNumber":["110","112"],"fullExpression":"new Mirror().on(target).invoke()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.vidageek.mirror.dsl.ClassController","methodSignature":"reflect()","methodName":"reflect","lineNumber":["95"],"fullExpression":"new Mirror().on(targetBeanClass).reflect()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.beanutils.PropertyUtilsBean","methodSignature":"getProperty(java.lang.Object, java.lang.String)","methodName":"getProperty","lineNumber":["45"],"fullExpression":"getPropertyUtilsBean().getProperty(bean, attribute)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.thoughtworks.paranamer.Paranamer","methodSignature":"lookupParameterNames(java.lang.reflect.AccessibleObject, boolean)","methodName":"lookupParameterNames","lineNumber":["133"],"fullExpression":"paranamer.lookupParameterNames(ctor, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.vidageek.mirror.dsl.Mirror","methodSignature":"on(java.lang.Class<T>)","methodName":"on","lineNumber":["95","110","112","120","222"],"fullExpression":"new Mirror().on(targetBeanClass)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.beanutils.BeanUtilsBean","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["165"],"fullExpression":"BeanUtilsBean.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.vidageek.mirror.dsl.AccessorsController","methodSignature":"set()","methodName":"set","lineNumber":["70"],"fullExpression":"new Mirror().on(bean).set()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.vidageek.mirror.dsl.ClassController","methodSignature":"reflectAll()","methodName":"reflectAll","lineNumber":["120","222"],"fullExpression":"new Mirror().on(target).reflectAll()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.vidageek.mirror.list.dsl.MirrorList","methodSignature":"matching(net.vidageek.mirror.list.dsl.Matcher<T>)","methodName":"matching","lineNumber":["222"],"fullExpression":"new Mirror().on(clazz).reflectAll().constructors().matching(new Matcher<Constructor<T>>() {\n\n    @Override\n    public boolean accepts(Constructor<T> constructor) {\n        if (ReflectionUtils.isInnerClass(clazz)) {\n            return constructor.getParameterTypes().length == 1 && constructor.getParameterTypes()[0].equals(clazz.getEnclosingClass());\n        }\n        return Arrays.asList(constructor.getParameterTypes()).isEmpty();\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.beanutils.BeanUtilsBean","methodSignature":"getPropertyUtils()","methodName":"getPropertyUtils","lineNumber":["165"],"fullExpression":"BeanUtilsBean.getInstance().getPropertyUtils()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.vidageek.mirror.dsl.Mirror","methodSignature":"on(java.lang.Object)","methodName":"on","lineNumber":["70"],"fullExpression":"new Mirror().on(bean)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.vidageek.mirror.invoke.dsl.ConstructorHandler","methodSignature":"withoutArgs()","methodName":"withoutArgs","lineNumber":["112"],"fullExpression":"new Mirror().on(target).invoke().constructor().withoutArgs()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.lang.StringUtils","methodSignature":"defaultIfEmpty(java.lang.String, java.lang.String)","methodName":"defaultIfEmpty","lineNumber":["176"],"fullExpression":"StringUtils.defaultIfEmpty(attribute.substring(0, lastAttributeIdx), null)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.vidageek.mirror.set.dsl.SetterHandler","methodSignature":"field(java.lang.String)","methodName":"field","lineNumber":["70"],"fullExpression":"new Mirror().on(bean).set().field(attribute)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.vidageek.mirror.invoke.dsl.InvocationHandler","methodSignature":"constructor()","methodName":"constructor","lineNumber":["110","112"],"fullExpression":"new Mirror().on(target).invoke().constructor()","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/main/java/br/com/six2six/fixturefactory/function/impl/ChronicFunction.java":[{"declaringType":"com.mdimension.jchronic.utils.Span","methodSignature":"getBeginCalendar()","methodName":"getBeginCalendar","lineNumber":["31"],"fullExpression":"span.getBeginCalendar()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.mdimension.jchronic.Chronic","methodSignature":"parse(java.lang.String, com.mdimension.jchronic.Options)","methodName":"parse","lineNumber":["30"],"fullExpression":"Chronic.parse(dateText, options)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/function/ChronicFunctionTest.java":[{"declaringType":"com.mdimension.jchronic.utils.Time","methodSignature":"construct(int, int, int, int)","methodName":"construct","lineNumber":["18"],"fullExpression":"Time.construct(2011, 10, 30, 12)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.mdimension.jchronic.utils.Time","methodSignature":"construct(int, int, int, int, int, int, int)","methodName":"construct","lineNumber":["17"],"fullExpression":"Time.construct(2011, 10, 31, 14, 0, 0, 0)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["18"],"fullExpression":"Assert.assertEquals(Time.construct(2011, 10, 30, 12).getTime(), ((Calendar) chronicFunction.generateValue()).getTime())","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/test/java/br/com/six2six/fixturefactory/FixtureCircularReferenceTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["24","27","35","38"],"fullExpression":"assertTrue(\"order relationship with item should have the same reference\", item.getOrder() == order)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/main/java/br/com/six2six/fixturefactory/transformer/CalendarTransformer.java":[{"declaringType":"org.apache.commons.lang.ClassUtils","methodSignature":"isAssignable(java.lang.Class, java.lang.Class)","methodName":"isAssignable","lineNumber":["24","31","34","37"],"fullExpression":"ClassUtils.isAssignable(type, XMLGregorianCalendar.class)","currentLayer":0,"declarationInfo":null}],"Application/fixture-factory/src/main/java/br/com/six2six/fixturefactory/function/impl/NameFunction.java":[{"declaringType":"br.com.six2six.bfgex.RandomGen","methodSignature":"firstName(br.com.six2six.bfgex.Gender)","methodName":"firstName","lineNumber":["34"],"fullExpression":"RandomGen.firstName(this.gender)","currentLayer":0,"declarationInfo":null},{"declaringType":"br.com.six2six.bfgex.RandomGen","methodSignature":"firstName()","methodName":"firstName","lineNumber":["34"],"fullExpression":"RandomGen.firstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"br.com.six2six.bfgex.RandomGen","methodSignature":"lastName()","methodName":"lastName","lineNumber":["37"],"fullExpression":"RandomGen.lastName()","currentLayer":0,"declarationInfo":null},{"declaringType":"br.com.six2six.bfgex.RandomGen","methodSignature":"name()","methodName":"name","lineNumber":["43"],"fullExpression":"RandomGen.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"br.com.six2six.bfgex.RandomGen","methodSignature":"name(br.com.six2six.bfgex.Gender)","methodName":"name","lineNumber":["40"],"fullExpression":"RandomGen.name(this.gender)","currentLayer":0,"declarationInfo":null}]}