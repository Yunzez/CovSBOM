{"Application/light-4j-master/egress-router/src/main/java/com/networknt/router/RouterConfig.java":[{"declaringType":"com.networknt.router.RouterConfig","methodSignature":"convertToMethodRewriteRule(java.lang.String)","methodName":"convertToMethodRewriteRule","lineNumber":["264","268","273"],"fullExpression":"convertToMethodRewriteRule(rule)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.RouterConfig","methodSignature":"populateHeaderRewriteRules(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"populateHeaderRewriteRules","lineNumber":["385","391"],"fullExpression":"populateHeaderRewriteRules(map)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["195","223","259","328","381","428"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.RouterConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["96","115"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.RouterConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["124","126","128","130","132","134","136","138","140","142","144","146","148"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.RouterConfig","methodSignature":"populateQueryParameterRules(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"populateQueryParameterRules","lineNumber":["332","338"],"fullExpression":"populateQueryParameterRules(map)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["195","223","259","328","381","428"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["37"],"fullExpression":"LoggerFactory.getLogger(RouterConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.RouterConfig","methodSignature":"setPathPrefixMaxRequestTime()","methodName":"setPathPrefixMaxRequestTime","lineNumber":["102","121"],"fullExpression":"setPathPrefixMaxRequestTime()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.RouterConfig","methodSignature":"setHostWhitelist()","methodName":"setHostWhitelist","lineNumber":["97","116"],"fullExpression":"setHostWhitelist()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["434"],"fullExpression":"logger.error(\"IOException:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["284","290","296","334","340","387","393","445"],"fullExpression":"logger.error(error)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/rate-limit/src/main/java/com/networknt/limit/RequestLimit.java":[{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"addExchangeCompleteListener(io.undertow.server.ExchangeCompletionListener)","methodName":"addExchangeCompleteListener","lineNumber":["71","130","139"],"fullExpression":"task.exchange.addExchangeCompleteListener(COMPLETION_LISTENER)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.RequestLimit","methodSignature":"decrementRequests()","methodName":"decrementRequests","lineNumber":["81"],"fullExpression":"decrementRequests()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"dispatch(java.util.concurrent.Executor, java.lang.Runnable)","methodName":"dispatch","lineNumber":["113"],"fullExpression":"exchange.dispatch(SameThreadExecutor.INSTANCE, new Runnable() {\n\n    @Override\n    public void run() {\n        //we have to try again in the sync block\n        //we need to have already dispatched for thread safety reasons\n        synchronized (this) {\n            int oldVal, newVal;\n            do {\n                oldVal = requests;\n                if (oldVal >= max) {\n                    if (!queue.offer(new SuspendedRequest(exchange, next))) {\n                        Connectors.executeRootHandler(failureHandler, exchange);\n                    }\n                    return;\n                }\n                newVal = oldVal + 1;\n            } while (!requestsUpdater.compareAndSet(RequestLimit.this, oldVal, newVal));\n            exchange.addExchangeCompleteListener(COMPLETION_LISTENER);\n            exchange.dispatch(next);\n        }\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpHandler","methodSignature":"handleRequest(io.undertow.server.HttpServerExchange)","methodName":"handleRequest","lineNumber":["140"],"fullExpression":"next.handleRequest(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jboss.logging.BasicLogger","methodSignature":"error(java.lang.Object, java.lang.Throwable)","methodName":"error","lineNumber":["76"],"fullExpression":"UndertowLogger.ROOT_LOGGER.error(\"Suspended request was skipped\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"dispatch(io.undertow.server.HttpHandler)","methodName":"dispatch","lineNumber":["72","131","176"],"fullExpression":"task.exchange.dispatch(task.next)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ExchangeCompletionListener.NextListener","methodSignature":"proceed()","methodName":"proceed","lineNumber":["84"],"fullExpression":"nextListener.proceed()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.Connectors","methodSignature":"executeRootHandler(io.undertow.server.HttpHandler, io.undertow.server.HttpServerExchange)","methodName":"executeRootHandler","lineNumber":["124"],"fullExpression":"Connectors.executeRootHandler(failureHandler, exchange)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasConfig.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["218","248","278","309","340"],"fullExpression":"logger.trace(\"pathPrefixAuth s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["218","248","278","309","340"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["13"],"fullExpression":"LoggerFactory.getLogger(MrasConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.mras.MrasConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["87","102"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.mras.MrasConfig","methodSignature":"setConfigMap()","methodName":"setConfigMap","lineNumber":["89","104"],"fullExpression":"setConfigMap()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/cors/src/test/java/com/networknt/cors/CorsUtilTest.java":[{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setRequestMethod(io.undertow.util.HttpString)","methodName":"setRequestMethod","lineNumber":["76"],"fullExpression":"exchange.setRequestMethod(HttpString.EMPTY)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setRequestScheme(java.lang.String)","methodName":"setRequestScheme","lineNumber":["75","128","135","138"],"fullExpression":"exchange.setRequestScheme(\"http\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"clear()","methodName":"clear","lineNumber":["82","86","130","133","137"],"fullExpression":"headerMap.clear()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/utility/src/test/java/com/networknt/utility/StringUtilsTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["41"],"fullExpression":"Assert.assertEquals(expected, actual)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/balance/src/main/java/com/networknt/balance/RoundRobinLoadBalance.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["48"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.balance.RoundRobinLoadBalance","methodSignature":"getNextPositive(java.lang.String)","methodName":"getNextPositive","lineNumber":["75"],"fullExpression":"getNextPositive(key)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["48"],"fullExpression":"logger.info(\"A RoundRobinLoadBalance instance is started\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["43"],"fullExpression":"LoggerFactory.getLogger(RoundRobinLoadBalance.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/dump/src/main/java/com/networknt/dump/UrlDumper.java":[{"declaringType":"com.networknt.dump.UrlDumper","methodSignature":"putDumpInfoTo(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"putDumpInfoTo","lineNumber":["41"],"fullExpression":"this.putDumpInfoTo(result)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/com/networknt/metrics/JVMMetricsDbReporter.java":[{"declaringType":"com.networknt.metrics.JVMMetricsDbReporter","methodSignature":"format(double)","methodName":"format","lineNumber":["70","72"],"fullExpression":"format(((Float) o).doubleValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["36"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.metrics.JVMMetricsDbReporter","methodSignature":"format(long)","methodName":"format","lineNumber":["74","76","78","80"],"fullExpression":"format(((Byte) o).longValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["16"],"fullExpression":"LoggerFactory.getLogger(JVMMetricsDbReporter.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["49"],"fullExpression":"logger.error(\"Unable to report to the time series database. Discarding data.\", e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/http/Light4jHttpClientProvider.java":[{"declaringType":"org.xnio.IoFuture","methodSignature":"getException()","methodName":"getException","lineNumber":["118"],"fullExpression":"ioFuture.getException()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientCallback","methodSignature":"completed(T)","methodName":"completed","lineNumber":["144","155"],"fullExpression":"listener.completed(createHttpClientConnection(connection, options, bufferPool))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"openStreamConnection(java.net.SocketAddress, java.net.SocketAddress, org.xnio.ChannelListener<? super org.xnio.StreamConnection>, org.xnio.ChannelListener<? super org.xnio.channels.BoundChannel>, org.xnio.OptionMap)","methodName":"openStreamConnection","lineNumber":["86"],"fullExpression":"worker.openStreamConnection(bindAddress, new InetSocketAddress(uri.getHost(), uri.getPort() == -1 ? 80 : uri.getPort()), createOpenListener(listener, bufferPool, options, uri), null, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.UndertowMessages","methodSignature":"sslWasNull()","methodName":"sslWasNull","lineNumber":["73","95"],"fullExpression":"UndertowMessages.MESSAGES.sslWasNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap.Builder","methodSignature":"addAll(org.xnio.OptionMap)","methodName":"addAll","lineNumber":["76","98"],"fullExpression":"OptionMap.builder().addAll(options)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Light4jHttpClientProvider","methodSignature":"handleConnected(org.xnio.StreamConnection, io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap, java.net.URI)","methodName":"handleConnected","lineNumber":["128"],"fullExpression":"handleConnected(connection, listener, bufferPool, options, uri)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoFuture","methodSignature":"getStatus()","methodName":"getStatus","lineNumber":["117"],"fullExpression":"ioFuture.getStatus()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Light4jHttpClientProvider","methodSignature":"createHttpClientConnection(org.xnio.StreamConnection, org.xnio.OptionMap, io.undertow.connector.ByteBufferPool)","methodName":"createHttpClientConnection","lineNumber":["144","155"],"fullExpression":"createHttpClientConnection(connection, options, bufferPool)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Light4jHttpClientProvider","methodSignature":"connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.InetSocketAddress, java.net.URI, org.xnio.XnioWorker, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["61"],"fullExpression":"connect(listener, null, uri, worker, ssl, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["50"],"fullExpression":"LoggerFactory.getLogger(Light4jHttpClientProvider.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.http2.Http2ClientProvider","methodSignature":"alpnProtocol(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.URI, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"alpnProtocol","lineNumber":["138"],"fullExpression":"Http2ClientProvider.alpnProtocol(listener, uri, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientCallback","methodSignature":"failed(java.io.IOException)","methodName":"failed","lineNumber":["73","95","118","152"],"fullExpression":"listener.failed(UndertowMessages.MESSAGES.sslWasNull())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"builder()","methodName":"builder","lineNumber":["76","98"],"fullExpression":"OptionMap.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ssl.XnioSsl","methodSignature":"openSslConnection(org.xnio.XnioIoThread, java.net.InetSocketAddress, java.net.InetSocketAddress, org.xnio.ChannelListener<? super org.xnio.ssl.SslConnection>, org.xnio.OptionMap)","methodName":"openSslConnection","lineNumber":["102"],"fullExpression":"ssl.openSslConnection(ioThread, bindAddress, new InetSocketAddress(uri.getHost(), uri.getPort() == -1 ? 443 : uri.getPort()), createOpenListener(listener, bufferPool, tlsOptions, uri), tlsOptions)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ssl.XnioSsl","methodSignature":"openSslConnection(org.xnio.XnioWorker, java.net.InetSocketAddress, org.xnio.ChannelListener<? super org.xnio.ssl.SslConnection>, org.xnio.OptionMap)","methodName":"openSslConnection","lineNumber":["78"],"fullExpression":"ssl.openSslConnection(worker, new InetSocketAddress(uri.getHost(), uri.getPort() == -1 ? 443 : uri.getPort()), createOpenListener(listener, bufferPool, tlsOptions, uri), tlsOptions)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioIoThread","methodSignature":"openStreamConnection(java.net.SocketAddress, java.net.SocketAddress, org.xnio.ChannelListener<? super org.xnio.StreamConnection>, org.xnio.ChannelListener<? super org.xnio.channels.BoundChannel>, org.xnio.OptionMap)","methodName":"openStreamConnection","lineNumber":["108"],"fullExpression":"ioThread.openStreamConnection(bindAddress, new InetSocketAddress(uri.getHost(), uri.getPort() == -1 ? 80 : uri.getPort()), createOpenListener(listener, bufferPool, options, uri), null, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ssl.SslConnection","methodSignature":"startHandshake()","methodName":"startHandshake","lineNumber":["150"],"fullExpression":"((SslConnection) connection).startHandshake()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["173"],"fullExpression":"logger.error(e.getMessage(), e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ssl.XnioSsl","methodSignature":"openSslConnection(org.xnio.XnioWorker, java.net.InetSocketAddress, java.net.InetSocketAddress, org.xnio.ChannelListener<? super org.xnio.ssl.SslConnection>, org.xnio.OptionMap)","methodName":"openSslConnection","lineNumber":["80"],"fullExpression":"ssl.openSslConnection(worker, bindAddress, new InetSocketAddress(uri.getHost(), uri.getPort() == -1 ? 443 : uri.getPort()), createOpenListener(listener, bufferPool, tlsOptions, uri), tlsOptions)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Light4jHttpClientProvider","methodSignature":"createOpenListener(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap, java.net.URI)","methodName":"createOpenListener","lineNumber":["78","80","84","86","100","102","106","108"],"fullExpression":"createOpenListener(listener, bufferPool, tlsOptions, uri)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Light4jHttpClientProvider","methodSignature":"connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.InetSocketAddress, java.net.URI, org.xnio.XnioIoThread, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["66"],"fullExpression":"connect(listener, null, uri, ioThread, ssl, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioIoThread","methodSignature":"openStreamConnection(java.net.SocketAddress, org.xnio.ChannelListener<? super org.xnio.StreamConnection>, org.xnio.OptionMap)","methodName":"openStreamConnection","lineNumber":["106"],"fullExpression":"ioThread.openStreamConnection(new InetSocketAddress(uri.getHost(), uri.getPort() == -1 ? 80 : uri.getPort()), createOpenListener(listener, bufferPool, options, uri), options)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap.Builder","methodSignature":"getMap()","methodName":"getMap","lineNumber":["76","98"],"fullExpression":"OptionMap.builder().addAll(options).set(Options.SSL_STARTTLS, true).getMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"get(org.xnio.Option<java.lang.Boolean>, boolean)","methodName":"get","lineNumber":["134"],"fullExpression":"options.get(UndertowOptions.ENABLE_HTTP2, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap.Builder","methodSignature":"set(org.xnio.Option<java.lang.Boolean>, boolean)","methodName":"set","lineNumber":["76","98"],"fullExpression":"OptionMap.builder().addAll(options).set(Options.SSL_STARTTLS, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoFuture","methodSignature":"addNotifier(org.xnio.IoFuture.Notifier<? super T, A>, A)","methodName":"addNotifier","lineNumber":["78","80","84","86","100","102","106","108"],"fullExpression":"ssl.openSslConnection(worker, new InetSocketAddress(uri.getHost(), uri.getPort() == -1 ? 443 : uri.getPort()), createOpenListener(listener, bufferPool, tlsOptions, uri), tlsOptions).addNotifier(createNotifier(listener), null)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ssl.XnioSsl","methodSignature":"openSslConnection(org.xnio.XnioIoThread, java.net.InetSocketAddress, org.xnio.ChannelListener<? super org.xnio.ssl.SslConnection>, org.xnio.OptionMap)","methodName":"openSslConnection","lineNumber":["100"],"fullExpression":"ssl.openSslConnection(ioThread, new InetSocketAddress(uri.getHost(), uri.getPort() == -1 ? 443 : uri.getPort()), createOpenListener(listener, bufferPool, tlsOptions, uri), tlsOptions)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"openStreamConnection(java.net.SocketAddress, org.xnio.ChannelListener<? super org.xnio.StreamConnection>, org.xnio.OptionMap)","methodName":"openStreamConnection","lineNumber":["84"],"fullExpression":"worker.openStreamConnection(new InetSocketAddress(uri.getHost(), uri.getPort() == -1 ? 80 : uri.getPort()), createOpenListener(listener, bufferPool, options, uri), options)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Light4jHttpClientProvider","methodSignature":"createNotifier(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>)","methodName":"createNotifier","lineNumber":["78","80","84","86","100","102","106","108"],"fullExpression":"createNotifier(listener)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/header-config/src/main/java/com/networknt/header/HeaderConfig.java":[{"declaringType":"com.networknt.header.HeaderConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["46","61"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["125","152","181","214","247"],"fullExpression":"logger.trace(\"request remove s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.header.HeaderConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["45","60"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.header.HeaderConfig","methodSignature":"setConfigMap()","methodName":"setConfigMap","lineNumber":["47","62"],"fullExpression":"setConfigMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["125","152","181","214","247"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["13"],"fullExpression":"LoggerFactory.getLogger(HeaderConfig.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sanitizer/src/test/java/com/networknt/sanitizer/SanitizerHandlerWithEncodeTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["94"],"fullExpression":"Assert.assertNotNull(body)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["72"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(\"/body\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, post));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["39","54"],"fullExpression":"LOGGER.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["53"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["90"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["76","77","78"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["91"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["76","77","78"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["75"],"fullExpression":"new ClientRequest().setMethod(Methods.POST)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["85"],"fullExpression":"LOGGER.error(\"IOException: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["41"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["72"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["88"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["75"],"fullExpression":"new ClientRequest().setMethod(Methods.POST).setPath(\"/body\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["32"],"fullExpression":"LoggerFactory.getLogger(SanitizerHandlerWithEncodeTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["96","97"],"fullExpression":"Assert.assertEquals(\"<script>alert(\\\\'test\\\\')</script>\", map.get(\"key\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/simplepool/SimpleURIConnectionPool.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["48"],"fullExpression":"LoggerFactory.getLogger(SimpleURIConnectionPool.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.SimpleURIConnectionPool","methodSignature":"readAllConnectionHolders(long)","methodName":"readAllConnectionHolders","lineNumber":["104","141"],"fullExpression":"readAllConnectionHolders(now)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.SimpleURIConnectionPool.RemoveFromAllKnownConnections","methodSignature":"remove()","methodName":"remove","lineNumber":["223"],"fullExpression":"knownConnections.remove()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.SimpleURIConnectionPool","methodSignature":"findAndCloseLeakedConnections()","methodName":"findAndCloseLeakedConnections","lineNumber":["189"],"fullExpression":"findAndCloseLeakedConnections()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/ExponentiallyDecayingReservoir.java":[{"declaringType":"io.dropwizard.metrics.ExponentiallyDecayingReservoir","methodSignature":"unlockForRegularUsage()","methodName":"unlockForRegularUsage","lineNumber":["134","152"],"fullExpression":"unlockForRegularUsage()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.ExponentiallyDecayingReservoir","methodSignature":"weight(long)","methodName":"weight","lineNumber":["117"],"fullExpression":"weight(timestamp - startTime)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.ExponentiallyDecayingReservoir","methodSignature":"lockForRescale()","methodName":"lockForRescale","lineNumber":["184"],"fullExpression":"lockForRescale()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.ExponentiallyDecayingReservoir","methodSignature":"lockForRegularUsage()","methodName":"lockForRegularUsage","lineNumber":["115","148"],"fullExpression":"lockForRegularUsage()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.ExponentiallyDecayingReservoir","methodSignature":"unlockForRescale()","methodName":"unlockForRescale","lineNumber":["200"],"fullExpression":"unlockForRescale()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.ExponentiallyDecayingReservoir","methodSignature":"currentTimeInSeconds()","methodName":"currentTimeInSeconds","lineNumber":["93","104","187"],"fullExpression":"currentTimeInSeconds()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.ExponentiallyDecayingReservoir","methodSignature":"update(long, long)","methodName":"update","lineNumber":["104"],"fullExpression":"update(value, currentTimeInSeconds())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.ExponentiallyDecayingReservoir","methodSignature":"rescaleIfNeeded()","methodName":"rescaleIfNeeded","lineNumber":["114"],"fullExpression":"rescaleIfNeeded()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.ExponentiallyDecayingReservoir","methodSignature":"rescale(long, long)","methodName":"rescale","lineNumber":["142"],"fullExpression":"rescale(now, next)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/main/java/com/networknt/config/Config.java":[{"declaringType":"org.owasp.encoder.Encode","methodSignature":"forJava(java.lang.String)","methodName":"forJava","lineNumber":["486","494","499","504","511","516","518","520"],"fullExpression":"Encode.forJava(configFilename + \" in \" + absolutePath)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String)","methodName":"warn","lineNumber":["553","569"],"fullExpression":"logger.warn(\"config file cannot be found.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config","methodSignature":"isDecrypt()","methodName":"isDecrypt","lineNumber":["422","455"],"fullExpression":"isDecrypt()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["485","493","498","503","510","548","564","589"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"getJsonObjectConfig(java.lang.String, java.lang.Class, java.lang.String)","methodName":"getJsonObjectConfig","lineNumber":["246"],"fullExpression":"getJsonObjectConfig(configName, clazz, \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config","methodSignature":"getYaml()","methodName":"getYaml","lineNumber":["418","421","453"],"fullExpression":"getYaml()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"getAbsolutePath(java.lang.String, int)","methodName":"getAbsolutePath","lineNumber":["480"],"fullExpression":"getAbsolutePath(path, i)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"getDefaultJsonObjectConfig(java.lang.String, java.lang.Class, java.lang.String)","methodName":"getDefaultJsonObjectConfig","lineNumber":["269"],"fullExpression":"getDefaultJsonObjectConfig(configName, clazz, \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"loadSpecificConfigFileAsObject(java.lang.String, java.lang.String, java.lang.Class<T>, java.lang.String)","methodName":"loadSpecificConfigFileAsObject","lineNumber":["435"],"fullExpression":"loadSpecificConfigFileAsObject(configName, extension, clazz, path)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.NoneDecryptedConfigImpl","methodSignature":"initialize()","methodName":"initialize","lineNumber":["663"],"fullExpression":"initialize()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"getStringFromFile(java.lang.String, java.lang.String)","methodName":"getStringFromFile","lineNumber":["184"],"fullExpression":"getStringFromFile(filename, \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"registerModule(com.fasterxml.jackson.databind.Module)","methodName":"registerModule","lineNumber":["133","134"],"fullExpression":"mapper.registerModule(new JavaTimeModule())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"loadMapConfig(java.lang.String, java.lang.String)","methodName":"loadMapConfig","lineNumber":["307","356","629"],"fullExpression":"loadMapConfig(configName, path)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["120"],"fullExpression":"LoggerFactory.getLogger(NoneDecryptedConfigImpl.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"loadJsonMapConfigWithSpecificConfigLoader(java.lang.String, java.lang.String)","methodName":"loadJsonMapConfigWithSpecificConfigLoader","lineNumber":["286","345"],"fullExpression":"loadJsonMapConfigWithSpecificConfigLoader(configName, path)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"getDefaultJsonMapConfigNoCache(java.lang.String, java.lang.String)","methodName":"getDefaultJsonMapConfigNoCache","lineNumber":["377"],"fullExpression":"getDefaultJsonMapConfigNoCache(configName, \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config","methodSignature":"convertStreamToString(java.io.InputStream)","methodName":"convertStreamToString","lineNumber":["386"],"fullExpression":"convertStreamToString(inStream)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["486","494","499","504","511","516","518"],"fullExpression":"logger.trace(\"Unable to load config from externalized folder for \" + Encode.forJava(configFilename + \" in \" + absolutePath))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"getConfigLoaderClass()","methodName":"getConfigLoaderClass","lineNumber":["139"],"fullExpression":"getConfigLoaderClass()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"loadStringFromFile(java.lang.String, java.lang.String)","methodName":"loadStringFromFile","lineNumber":["174"],"fullExpression":"loadStringFromFile(filename, path)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"getDecryptorClass()","methodName":"getDecryptorClass","lineNumber":["697"],"fullExpression":"getDecryptorClass()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.FileConfigImpl","methodSignature":"initialize()","methodName":"initialize","lineNumber":["690"],"fullExpression":"initialize()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["389","395","426","459","585"],"fullExpression":"logger.error(\"Exception\", ioe)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"loadJsonObjectConfigWithSpecificConfigLoader(java.lang.String, java.lang.Class, java.lang.String)","methodName":"loadJsonObjectConfigWithSpecificConfigLoader","lineNumber":["207","257"],"fullExpression":"loadJsonObjectConfigWithSpecificConfigLoader(configName, clazz, path)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"getJsonMapConfigNoCache(java.lang.String, java.lang.String)","methodName":"getJsonMapConfigNoCache","lineNumber":["367"],"fullExpression":"getJsonMapConfigNoCache(configName, \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"getClassLoader()","methodName":"getClassLoader","lineNumber":["501","508"],"fullExpression":"this.getClassLoader()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"getJsonMapConfig(java.lang.String, java.lang.String)","methodName":"getJsonMapConfig","lineNumber":["323"],"fullExpression":"getJsonMapConfig(configName, \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"configure(com.fasterxml.jackson.databind.SerializationFeature, boolean)","methodName":"configure","lineNumber":["135"],"fullExpression":"mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.yaml.snakeyaml.Yaml","methodSignature":"loadAs(java.io.InputStream, java.lang.Class<? super T>)","methodName":"loadAs","lineNumber":["418"],"fullExpression":"getYaml().loadAs(inStream, clazz)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"loadObjectConfig(java.lang.String, java.lang.Class<T>, java.lang.String)","methodName":"loadObjectConfig","lineNumber":["229","651"],"fullExpression":"loadObjectConfig(configName, clazz, path)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.yaml.snakeyaml.Yaml","methodSignature":"load(java.io.InputStream)","methodName":"load","lineNumber":["421","453","582"],"fullExpression":"getYaml().load(inStream)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["549","565","590","628","650"],"fullExpression":"logger.trace(\"found decryptorClass={}\", decryptorClass)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"loadModuleConfig()","methodName":"loadModuleConfig","lineNumber":["545","561"],"fullExpression":"loadModuleConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"loadModuleConfigNoCache()","methodName":"loadModuleConfigNoCache","lineNumber":["604"],"fullExpression":"loadModuleConfigNoCache()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"loadSpecificConfigFileAsMap(java.lang.String, java.lang.String, java.lang.String)","methodName":"loadSpecificConfigFileAsMap","lineNumber":["469"],"fullExpression":"loadSpecificConfigFileAsMap(configName, extension, path)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"getConfigStream(java.lang.String, java.lang.String)","methodName":"getConfigStream","lineNumber":["189","384","414","451","580"],"fullExpression":"getConfigStream(filename, \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.Config.AbstractConfigImpl","methodSignature":"getDefaultJsonMapConfig(java.lang.String, java.lang.String)","methodName":"getDefaultJsonMapConfig","lineNumber":["333"],"fullExpression":"getDefaultJsonMapConfig(configName, \"\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/rate-limit/src/main/java/com/networknt/limit/key/AkamaiAddressKeyResolver.java":[{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"getFirst()","methodName":"getFirst","lineNumber":["20"],"fullExpression":"values.getFirst()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"get(java.lang.String)","methodName":"get","lineNumber":["19"],"fullExpression":"headerMap.get(\"True-Client-IP\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["18"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/decryptor/src/main/java/com/networknt/decrypt/AESSaltDecryptor.java":[{"declaringType":"com.networknt.decrypt.AESSaltDecryptor","methodSignature":"fromHex(java.lang.String)","methodName":"fromHex","lineNumber":["62","63"],"fullExpression":"fromHex(parts[1])","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["23"],"fullExpression":"LoggerFactory.getLogger(AESSaltDecryptor.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["43"],"fullExpression":"logger.error(\"Failed to get the Cipher instance:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["57"],"fullExpression":"logger.error(\"The secret text is not formatted correctly with CRYPT:salt:hash\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.decrypt.AESSaltDecryptor","methodSignature":"getPassword()","methodName":"getPassword","lineNumber":["67"],"fullExpression":"getPassword()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/org/apache/hc/core5/util/copied/ByteArrayBuffer.java":[{"declaringType":"org.apache.hc.core5.util.copied.ByteArrayBuffer","methodSignature":"expand(int)","methodName":"expand","lineNumber":["87","102","136","236"],"fullExpression":"expand(newlen)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.hc.core5.util.copied.ByteArrayBuffer","methodSignature":"indexOf(byte, int, int)","methodName":"indexOf","lineNumber":["342"],"fullExpression":"indexOf(b, 0, this.len)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/org/apache/hc/core5/util/copied/LangUtils.java":[{"declaringType":"org.apache.hc.core5.util.copied.LangUtils","methodSignature":"equals(java.lang.Object, java.lang.Object)","methodName":"equals","lineNumber":["89"],"fullExpression":"equals(a1[i], a2[i])","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.hc.core5.util.copied.LangUtils","methodSignature":"hashCode(int, int)","methodName":"hashCode","lineNumber":["51","55"],"fullExpression":"hashCode(seed, b ? 1 : 0)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/db-provider/src/main/java/com/networknt/db/provider/SqlDbStartupHook.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["31","44"],"fullExpression":"logger.info(\"SqlDbStartupHook begins\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["37"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["22"],"fullExpression":"LoggerFactory.getLogger(SqlDbStartupHook.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/dump/src/main/java/com/networknt/dump/DumpHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["52"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"addExchangeCompleteListener(io.undertow.server.ExchangeCompletionListener)","methodName":"addExchangeCompleteListener","lineNumber":["85"],"fullExpression":"exchange.addExchangeCompleteListener((exchange1, nextListener) -> {\n    try {\n        rootDumper.dumpResponse(result);\n        //log the result\n        DumpHelper.logResult(result, config);\n    } catch (Throwable e) {\n        logger.error(\"ExchangeListener throwable\", e);\n    } finally {\n        nextListener.proceed();\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"addResponseWrapper(io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSinkConduit>)","methodName":"addResponseWrapper","lineNumber":["82"],"fullExpression":"exchange.addResponseWrapper((factory, exchange12) -> new StoreResponseStreamSinkConduit(factory.create(), exchange12))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.ConduitFactory","methodSignature":"create()","methodName":"create","lineNumber":["82"],"fullExpression":"factory.create()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ExchangeCompletionListener.NextListener","methodSignature":"proceed()","methodName":"proceed","lineNumber":["93"],"fullExpression":"nextListener.proceed()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.dump.DumpHandler","methodSignature":"isEnabled()","methodName":"isEnabled","lineNumber":["73"],"fullExpression":"isEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isInIoThread()","methodName":"isInIoThread","lineNumber":["69"],"fullExpression":"exchange.isInIoThread()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/http/Http2ClientCompletableFutureNoRequest.java":[{"declaringType":"org.xnio.ChannelListener.Setter","methodSignature":"set(org.xnio.ChannelListener<? super T>)","methodName":"set","lineNumber":["51"],"fullExpression":"result.getRequestChannel().getWriteSetter().set(ChannelListeners.<StreamSinkChannel>flushingChannelListener(null, null))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["28"],"fullExpression":"logger.debug(\"Service call response = {}\", string)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getResponse()","methodName":"getResponse","lineNumber":["30","31"],"fullExpression":"result.getResponse()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ChannelListeners","methodSignature":"flushingChannelListener(org.xnio.ChannelListener<? super T>, org.xnio.ChannelExceptionHandler<? super T>)","methodName":"flushingChannelListener","lineNumber":["51"],"fullExpression":"ChannelListeners.<StreamSinkChannel>flushingChannelListener(null, null)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getRequestChannel()","methodName":"getRequestChannel","lineNumber":["49","50","51","52"],"fullExpression":"result.getRequestChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["36","44","55","62"],"fullExpression":"logger.error(\"IOException:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getBufferPool()","methodName":"getBufferPool","lineNumber":["23"],"fullExpression":"result.getConnection().getBufferPool()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getResponseChannel()","methodName":"getResponseChannel","lineNumber":["39"],"fullExpression":"result.getResponseChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableWriteChannel","methodSignature":"shutdownWrites()","methodName":"shutdownWrites","lineNumber":["49"],"fullExpression":"result.getRequestChannel().shutdownWrites()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["27"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"setResponseListener(io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>)","methodName":"setResponseListener","lineNumber":["20"],"fullExpression":"result.setResponseListener(new ClientCallback<ClientExchange>() {\n\n    @Override\n    public void completed(final ClientExchange result) {\n        new StringReadChannelListener(result.getConnection().getBufferPool()) {\n\n            @Override\n            protected void stringDone(String string) {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Service call response = {}\", string);\n                }\n                result.getResponse().putAttachment(com.networknt.client.Http2Client.RESPONSE_BODY, string);\n                Http2ClientCompletableFutureNoRequest.super.complete(result.getResponse());\n            }\n\n            @Override\n            protected void error(IOException e) {\n                logger.error(\"IOException:\", e);\n                completeExceptionally(e);\n            }\n        }.setup(result.getResponseChannel());\n    }\n\n    @Override\n    public void failed(IOException e) {\n        logger.error(\"IOException:\", e);\n        completeExceptionally(e);\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableWriteChannel","methodSignature":"resumeWrites()","methodName":"resumeWrites","lineNumber":["52"],"fullExpression":"result.getRequestChannel().resumeWrites()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.StreamSinkChannel","methodSignature":"getWriteSetter()","methodName":"getWriteSetter","lineNumber":["51"],"fullExpression":"result.getRequestChannel().getWriteSetter()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["16"],"fullExpression":"LoggerFactory.getLogger(Http2ClientCompletableFutureNoRequest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.StringReadChannelListener","methodSignature":"setup(org.xnio.channels.StreamSourceChannel)","methodName":"setup","lineNumber":["23"],"fullExpression":"new StringReadChannelListener(result.getConnection().getBufferPool()) {\n\n    @Override\n    protected void stringDone(String string) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Service call response = {}\", string);\n        }\n        result.getResponse().putAttachment(com.networknt.client.Http2Client.RESPONSE_BODY, string);\n        Http2ClientCompletableFutureNoRequest.super.complete(result.getResponse());\n    }\n\n    @Override\n    protected void error(IOException e) {\n        logger.error(\"IOException:\", e);\n        completeExceptionally(e);\n    }\n}.setup(result.getResponseChannel())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableWriteChannel","methodSignature":"flush()","methodName":"flush","lineNumber":["50"],"fullExpression":"result.getRequestChannel().flush()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getConnection()","methodName":"getConnection","lineNumber":["23"],"fullExpression":"result.getConnection()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server/src/main/java/com/networknt/server/DefaultConfigLoader.java":[{"declaringType":"com.networknt.server.DefaultConfigLoader","methodSignature":"getServiceConfigs(java.lang.String)","methodName":"getServiceConfigs","lineNumber":["201","247"],"fullExpression":"getServiceConfigs(configServerConfigsPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.yaml.snakeyaml.DumperOptions","methodSignature":"setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle)","methodName":"setDefaultFlowStyle","lineNumber":["210"],"fullExpression":"options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["123","135","136","137","177","178","179"],"fullExpression":"logger.debug(\"light-env is not set in the environment; defaulting to the value in the startup config: \" + lightEnv)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String)","methodName":"warn","lineNumber":["120"],"fullExpression":"logger.warn(\"light-env is not set in the environment and envTag is not set in the startup config. Use the default value: \" + DEFAULT_ENV)","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.core.joran.GenericXMLConfigurator","methodSignature":"doConfigure(java.lang.String)","methodName":"doConfigure","lineNumber":["161"],"fullExpression":"config.doConfigure(filename)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["206","546"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.LoggerContext","methodSignature":"reset()","methodName":"reset","lineNumber":["158"],"fullExpression":"lc.reset()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.DefaultConfigLoader","methodSignature":"createHttpClient()","methodName":"createHttpClient","lineNumber":["140","182"],"fullExpression":"createHttpClient()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"debug","lineNumber":["298"],"fullExpression":"logger.debug(\"Calling Config Server endpoint:host{}:path{}\", configServerUri, configServerPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["134","176","252","298","468"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getILoggerFactory()","methodName":"getILoggerFactory","lineNumber":["157"],"fullExpression":"LoggerFactory.getILoggerFactory()","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.core.spi.ContextAwareBase","methodSignature":"setContext(ch.qos.logback.core.Context)","methodName":"setContext","lineNumber":["160"],"fullExpression":"config.setContext(lc)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.DefaultConfigLoader","methodSignature":"getConfigServerQueryParameters()","methodName":"getConfigServerQueryParameters","lineNumber":["142","184"],"fullExpression":"getConfigServerQueryParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["62"],"fullExpression":"LoggerFactory.getLogger(DefaultConfigLoader.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.DefaultConfigLoader","methodSignature":"processNestedString(java.lang.String)","methodName":"processNestedString","lineNumber":["379","396","414","425","440"],"fullExpression":"processNestedString(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.DefaultConfigLoader","methodSignature":"loadBootstrapTrustStore()","methodName":"loadBootstrapTrustStore","lineNumber":["513"],"fullExpression":"loadBootstrapTrustStore()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object)","methodName":"error","lineNumber":["345"],"fullExpression":"logger.error(\"The content type {} in the response from the config server is not supported.\", contentType.get())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["203","249","350","365","482"],"fullExpression":"logger.error(\"Failed to load configs from config server. Please check the logs for more details.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String, java.lang.Object)","methodName":"info","lineNumber":["156","217"],"fullExpression":"logger.info(\"Resetting logback configuration from {}\", filename)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.DefaultConfigLoader","methodSignature":"createBootstrapContext()","methodName":"createBootstrapContext","lineNumber":["109"],"fullExpression":"createBootstrapContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.DefaultConfigLoader","methodSignature":"loadConfigs(java.lang.String)","methodName":"loadConfigs","lineNumber":["145","186"],"fullExpression":"loadConfigs(queryParameters)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["133","175","257"],"fullExpression":"logger.info(\"Loading configs from config server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["546"],"fullExpression":"logger.trace(\"headers productId = \" + productId + \" productVersion = \" + productVersion + \" apiId = \" + apiId + \" apiVersion = \" + apiVersion + \" envTag = \" + envTag)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["468"],"fullExpression":"logger.debug(\"configParameters: {}\", qs)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.DefaultConfigLoader","methodSignature":"getLeadingSpaces(java.lang.String)","methodName":"getLeadingSpaces","lineNumber":["387","394","421"],"fullExpression":"getLeadingSpaces(strArray[1])","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["164","223","287","356","369","490","503","517"],"fullExpression":"logger.error(\"Logback configuration failed\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isErrorEnabled()","methodName":"isErrorEnabled","lineNumber":["481"],"fullExpression":"logger.isErrorEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.yaml.snakeyaml.Yaml","methodSignature":"dump(java.lang.Object)","methodName":"dump","lineNumber":["221"],"fullExpression":"new Yaml(options).dump(serviceConfigs)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["550"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.DefaultConfigLoader","methodSignature":"processNestedMap(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"processNestedMap","lineNumber":["340"],"fullExpression":"processNestedMap(configs)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.DefaultConfigLoader","methodSignature":"loadFiles(java.lang.String, java.lang.String)","methodName":"loadFiles","lineNumber":["147","149"],"fullExpression":"loadFiles(queryParameters, CONFIG_SERVER_CERTS_CONTEXT_ROOT)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Object)","methodName":"warn","lineNumber":["167","188"],"fullExpression":"logger.warn(\"Warning! {} is not provided; using local configs\", CONFIG_SERVER_URI)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.DefaultConfigLoader","methodSignature":"buildTrustManagers(java.security.KeyStore)","methodName":"buildTrustManagers","lineNumber":["513"],"fullExpression":"buildTrustManagers(loadBootstrapTrustStore())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.DefaultConfigLoader","methodSignature":"getPropertyOrEnv(java.lang.String)","methodName":"getPropertyOrEnv","lineNumber":["98","115","131","173","293","473","474"],"fullExpression":"getPropertyOrEnv(VERIFY_HOST_NAME)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"error","lineNumber":["266","312","322"],"fullExpression":"logger.error(\"Exception while creating {} dir or creating files there\", targetConfigsDirectory, e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/utility/src/test/java/com/networknt/utility/NetUtilsTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["36"],"fullExpression":"Assert.assertNotNull(address)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["40"],"fullExpression":"Assert.assertEquals(InetAddress.getLocalHost(), address)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/http/HttpResponseValueTest.java":[{"declaringType":"com.networknt.client.http.HttpResponseValueTest","methodSignature":"deserialize(byte[])","methodName":"deserialize","lineNumber":["49"],"fullExpression":"deserialize(requestBody.array())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.HttpResponseValueTest","methodSignature":"deserialize(java.io.InputStream)","methodName":"deserialize","lineNumber":["118"],"fullExpression":"deserialize((InputStream) (new ByteArrayInputStream(objectData)))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.HttpResponseValueTest","methodSignature":"serialize(java.io.Serializable, java.io.OutputStream)","methodName":"serialize","lineNumber":["81"],"fullExpression":"serialize(obj, baos)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/portal-registry/src/main/java/com/networknt/portal/registry/PortalRegistry.java":[{"declaringType":"com.networknt.portal.registry.PortalRegistry","methodSignature":"getPortalToken()","methodName":"getPortalToken","lineNumber":["57","68","75","250"],"fullExpression":"getPortalToken()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["106","154"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.portal.registry.PortalRegistry","methodSignature":"lookupService(java.lang.String, java.lang.String)","methodName":"lookupService","lineNumber":["187"],"fullExpression":"lookupService(serviceId, tag)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["61"],"fullExpression":"logger.info(\"PortalRegistry init finish.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["170","186"],"fullExpression":"logger.trace(\"discover protocol = \" + protocol + \" serviceId = \" + serviceId + \" tag = \" + tag)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.portal.registry.PortalRegistry","methodSignature":"convertLisMap2UR(java.lang.String, java.lang.String, java.lang.String, java.util.List<java.util.Map<java.lang.String, java.lang.Object>>)","methodName":"convertLisMap2UR","lineNumber":["188","209"],"fullExpression":"convertLisMap2UR(serviceId, tag, protocol, services)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["170","186","229","266"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["41"],"fullExpression":"LoggerFactory.getLogger(PortalRegistry.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["143","160","232"],"fullExpression":"logger.error(\"Exception:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.portal.registry.PortalRegistry","methodSignature":"lookupServiceUpdate(java.lang.String, java.lang.String, java.lang.String)","methodName":"lookupServiceUpdate","lineNumber":["176"],"fullExpression":"lookupServiceUpdate(protocol, serviceId, tag)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.portal.registry.PortalRegistry","methodSignature":"getPortalRegistryConfig()","methodName":"getPortalRegistryConfig","lineNumber":["56","69","76","82","91"],"fullExpression":"getPortalRegistryConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String, java.lang.Object)","methodName":"info","lineNumber":["238"],"fullExpression":"logger.info(\"no response for service: {}, set urls to empty list\", key)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/decryptor/src/main/java/com/networknt/decrypt/AutoAESSaltDecryptor.java":[{"declaringType":"com.networknt.decrypt.AutoAESSaltDecryptor","methodSignature":"isJUnitTest()","methodName":"isJUnitTest","lineNumber":["39"],"fullExpression":"isJUnitTest()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler-config/src/main/java/com/networknt/handler/config/HandlerConfig.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["186","210","236","261","292","329","352","382","403"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.config.HandlerConfig","methodSignature":"setConfigMap()","methodName":"setConfigMap","lineNumber":["71","86"],"fullExpression":"setConfigMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["186","210","236","261","292","329","352","382","403"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.config.HandlerConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["70","85"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["33"],"fullExpression":"LoggerFactory.getLogger(HandlerConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.config.HandlerConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["69","84"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/MeterTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"offset(java.lang.Double)","methodName":"offset","lineNumber":["48","51","54","57","66","69","72","75"],"fullExpression":"offset(0.001)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/http/Http2ClientCompletableFutureWithRequest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["33"],"fullExpression":"logger.debug(\"Service call response = {}\", string)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getResponse()","methodName":"getResponse","lineNumber":["35","36"],"fullExpression":"result.getResponse()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["32"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"setResponseListener(io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>)","methodName":"setResponseListener","lineNumber":["26"],"fullExpression":"result.setResponseListener(new ClientCallback<ClientExchange>() {\n\n    @Override\n    public void completed(ClientExchange result) {\n        new StringReadChannelListener(com.networknt.client.Http2Client.BUFFER_POOL) {\n\n            @Override\n            protected void stringDone(String string) {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Service call response = {}\", string);\n                }\n                result.getResponse().putAttachment(com.networknt.client.Http2Client.RESPONSE_BODY, string);\n                complete(result.getResponse());\n            }\n\n            @Override\n            protected void error(IOException e) {\n                logger.error(\"IOException:\", e);\n                completeExceptionally(e);\n            }\n        }.setup(result.getResponseChannel());\n    }\n\n    @Override\n    public void failed(IOException e) {\n        logger.error(\"IOException:\", e);\n        completeExceptionally(e);\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["16"],"fullExpression":"LoggerFactory.getLogger(Http2ClientCompletableFutureWithRequest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getRequestChannel()","methodName":"getRequestChannel","lineNumber":["25"],"fullExpression":"result.getRequestChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.StringWriteChannelListener","methodSignature":"setup(org.xnio.channels.StreamSinkChannel)","methodName":"setup","lineNumber":["25"],"fullExpression":"new StringWriteChannelListener(requestBody).setup(result.getRequestChannel())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["41","49","57"],"fullExpression":"logger.error(\"IOException:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.StringReadChannelListener","methodSignature":"setup(org.xnio.channels.StreamSourceChannel)","methodName":"setup","lineNumber":["29"],"fullExpression":"new StringReadChannelListener(com.networknt.client.Http2Client.BUFFER_POOL) {\n\n    @Override\n    protected void stringDone(String string) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Service call response = {}\", string);\n        }\n        result.getResponse().putAttachment(com.networknt.client.Http2Client.RESPONSE_BODY, string);\n        complete(result.getResponse());\n    }\n\n    @Override\n    protected void error(IOException e) {\n        logger.error(\"IOException:\", e);\n        completeExceptionally(e);\n    }\n}.setup(result.getResponseChannel())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getResponseChannel()","methodName":"getResponseChannel","lineNumber":["44"],"fullExpression":"result.getResponseChannel()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/http-url/src/main/java/com/networknt/url/HttpURL.java":[{"declaringType":"com.networknt.url.HttpURL","methodSignature":"getRoot(java.lang.String)","methodName":"getRoot","lineNumber":["289","480"],"fullExpression":"getRoot(toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.HttpURL","methodSignature":"toURI()","methodName":"toURI","lineNumber":["334"],"fullExpression":"new HttpURL(url).toURI()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.HttpURL","methodSignature":"toString()","methodName":"toString","lineNumber":["272","289","300"],"fullExpression":"toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.HttpURL","methodSignature":"isPortDefault()","methodName":"isPortDefault","lineNumber":["369"],"fullExpression":"isPortDefault()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.HttpURL","methodSignature":"toURL()","methodName":"toURL","lineNumber":["320"],"fullExpression":"new HttpURL(url).toURL()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.HttpURL","methodSignature":"getProtocol()","methodName":"getProtocol","lineNumber":["214"],"fullExpression":"getProtocol()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.HttpURL","methodSignature":"encodePath(java.lang.String)","methodName":"encodePath","lineNumber":["378","385"],"fullExpression":"encodePath(path)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/ClockTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"offset(java.lang.Double)","methodName":"offset","lineNumber":["35","39","48","52"],"fullExpression":"offset(100.0)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractDoubleAssert","methodSignature":"isEqualTo(double, org.assertj.core.data.Offset<java.lang.Double>)","methodName":"isEqualTo","lineNumber":["33","37","46","50"],"fullExpression":"assertThat((double) clock.getTime()).isEqualTo(System.currentTimeMillis(), offset(100.0))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(double)","methodName":"assertThat","lineNumber":["33","37","46","50"],"fullExpression":"assertThat((double) clock.getTime())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config-reload/src/test/java/com/networknt/config/reload/handler/ConfigReloadHandlerTest.java":[{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["71"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["73"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["62","63","64"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["77","78"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["61"],"fullExpression":"new ClientRequest().setPath(\"/reloadconfig\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"writeValueAsString(java.lang.Object)","methodName":"writeValueAsString","lineNumber":["58"],"fullExpression":"mapper.writeValueAsString(input)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["62","63","64"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["61"],"fullExpression":"new ClientRequest().setPath(\"/reloadconfig\").setMethod(Methods.POST)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"readValue(java.lang.String, com.fasterxml.jackson.core.type.TypeReference<T>)","methodName":"readValue","lineNumber":["76"],"fullExpression":"mapper.readValue(body, new TypeReference<List<String>>() {\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler/src/main/java/com/networknt/handler/RequestInjectionConfig.java":[{"declaringType":"com.networknt.handler.RequestInjectionConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["30","43","57"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["90"],"fullExpression":"LOG.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["15"],"fullExpression":"LoggerFactory.getLogger(RequestInjectionConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.RequestInjectionConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["29","42","56"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.RequestInjectionConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["75","77"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/basic-auth/src/main/java/com/networknt/basicauth/BasicAuthHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["320"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["65","76","344"],"fullExpression":"logger.info(\"BasicAuthHandler is loaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["81","115","144","154","190","203","215","232","240","277","297","305"],"fullExpression":"logger.debug(\"BasicAuthHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.BasicAuthHandler","methodSignature":"handleAnonymousAuth(io.undertow.server.HttpServerExchange, java.lang.String)","methodName":"handleAnonymousAuth","lineNumber":["87"],"fullExpression":"this.handleAnonymousAuth(exchange, requestPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.BasicAuthHandler","methodSignature":"handleBearerToken(io.undertow.server.HttpServerExchange, java.lang.String, java.lang.String)","methodName":"handleBearerToken","lineNumber":["106"],"fullExpression":"this.handleBearerToken(exchange, requestPath, auth)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["141","151"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["182","198","207","220"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["141","151"],"fullExpression":"exchange.getResponseHeaders().put(Headers.WWW_AUTHENTICATE, \"Basic realm=\\\"Default Realm\\\"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["82"],"fullExpression":"exchange.getRequestHeaders().getFirst(Headers.AUTHORIZATION)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["83"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"endExchange()","methodName":"endExchange","lineNumber":["98","111","145","155","188","201","213","233","241","278","298","306"],"fullExpression":"exchange.endExchange()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.codec.binary.Base64","methodSignature":"decodeBase64(java.lang.String)","methodName":"decodeBase64","lineNumber":["175"],"fullExpression":"org.apache.commons.codec.binary.Base64.decodeBase64(credentials)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["65","76","344"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["81","115","143","153","189","202","214","231","239","276","296","304"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["198","220"],"fullExpression":"logger.trace(\"Call LdapUtil with LDAP authentication and authorization for user = {}\", username)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["49"],"fullExpression":"LoggerFactory.getLogger(BasicAuthHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["82"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object)","methodName":"error","lineNumber":["96","109","186"],"fullExpression":"logger.error(\"Invalid/Unsupported authorization header {}\", auth)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.BasicAuthHandler","methodSignature":"handleBasicAuth(io.undertow.server.HttpServerExchange, java.lang.String, java.lang.String)","methodName":"handleBasicAuth","lineNumber":["101"],"fullExpression":"this.handleBasicAuth(exchange, requestPath, auth)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["149","237","274","302"],"fullExpression":"logger.error(\"Anonymous is not allowed and authorization header is missing.\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/main/java/com/networknt/proxy/ProxyServerInfoHandler.java":[{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"get(java.lang.String)","methodName":"get","lineNumber":["49"],"fullExpression":"exchange.getRequestHeaders().get(Headers.AUTHORIZATION_STRING)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.ProxyServerInfoHandler","methodSignature":"send(io.undertow.client.ClientConnection, io.undertow.util.HttpString, java.lang.String, java.lang.String, java.lang.String)","methodName":"send","lineNumber":["89"],"fullExpression":"send(connection, Methods.GET, \"/server/info\", token, null)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"get(int)","methodName":"get","lineNumber":["50"],"fullExpression":"authVal.get(0)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["91"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["121","122","126","127"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["64"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["33"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["119"],"fullExpression":"new ClientRequest().setMethod(method).setPath(path)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["121","122","126","127"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["49"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.ProxyServerInfoHandler","methodSignature":"getServerInfo(java.lang.String, java.lang.String)","methodName":"getServerInfo","lineNumber":["55"],"fullExpression":"getServerInfo(url, token)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["119"],"fullExpression":"new ClientRequest().setMethod(method)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/http/Http2ClientConnectionPool.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["69","86","127","285"],"fullExpression":"logger.debug(\"Second try of getting connections for uri: {}\", uriString)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Http2ClientConnectionPool","methodSignature":"getAndRemoveClosedConnection(java.net.URI)","methodName":"getAndRemoveClosedConnection","lineNumber":["84"],"fullExpression":"getAndRemoveClosedConnection(uri)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Http2ClientConnectionPool","methodSignature":"getConnectionStatus(java.net.URI, com.networknt.client.http.Http2ClientConnectionPool.CachedConnection)","methodName":"getConnectionStatus","lineNumber":["85","155","172","222"],"fullExpression":"getConnectionStatus(uri, cachedConnection)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Http2ClientConnectionPool.CachedConnection","methodSignature":"isOpen()","methodName":"isOpen","lineNumber":["192"],"fullExpression":"connection.isOpen()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Http2ClientConnectionPool.CachedConnection","methodSignature":"incrementRequestCount()","methodName":"incrementRequestCount","lineNumber":["221"],"fullExpression":"connection.incrementRequestCount()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Http2ClientConnectionPool","methodSignature":"selectConnection(java.net.URI, java.util.List<com.networknt.client.http.Http2ClientConnectionPool.CachedConnection>, boolean)","methodName":"selectConnection","lineNumber":["74","105"],"fullExpression":"selectConnection(uri, result, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"isOpen()","methodName":"isOpen","lineNumber":["131","208","268"],"fullExpression":"connection.get().isOpen()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Http2ClientConnectionPool.CachedConnection","methodSignature":"isHttp2Connection()","methodName":"isHttp2Connection","lineNumber":["200","225"],"fullExpression":"connection.isHttp2Connection()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["137","289"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"debug","lineNumber":["73","75","104","121","133","143","149","164","167","223","258"],"fullExpression":"logger.debug(\"Got {} connections for uri: {}\", result != null ? result.size() : null, uriString)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Http2ClientConnectionPool","methodSignature":"hangConnection(java.net.URI, com.networknt.client.http.Http2ClientConnectionPool.CachedConnection)","methodName":"hangConnection","lineNumber":["77"],"fullExpression":"hangConnection(uri, cachedConnection)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Http2ClientConnectionPool","methodSignature":"handleParkedConnection(java.net.URI, com.networknt.client.http.Http2ClientConnectionPool.CachedConnection)","methodName":"handleParkedConnection","lineNumber":["196"],"fullExpression":"handleParkedConnection(uri, connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["69","73","75","86","104","121","127","133","143","149","164","167","223","285"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"isMultiplexingSupported()","methodName":"isMultiplexingSupported","lineNumber":["210","272"],"fullExpression":"connection.isMultiplexingSupported()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Http2ClientConnectionPool.CachedConnection","methodSignature":"isParkedConnectionExpired()","methodName":"isParkedConnectionExpired","lineNumber":["125"],"fullExpression":"iter.next().isParkedConnectionExpired()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Object)","methodName":"warn","lineNumber":["179"],"fullExpression":"logger.warn(\"None of the connection cached can be used for uri: {}\", uri)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["23"],"fullExpression":"LoggerFactory.getLogger(Http2ClientConnectionPool.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String, java.lang.Throwable)","methodName":"info","lineNumber":["137","289"],"fullExpression":"logger.info(\"Exception while handling the parked connection. Exception is :\", ignored)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Http2ClientConnectionPool.CachedConnection","methodSignature":"get()","methodName":"get","lineNumber":["43","78","131","159","186","189","226"],"fullExpression":"connection.get()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"warn","lineNumber":["177"],"fullExpression":"logger.warn(\"Connection status for uri: {} is {}\", uri, status)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["108"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["98","141"],"fullExpression":"logger.info(\"SalesforceAuthHandler is loaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["146","192","197","202"],"fullExpression":"logger.debug(\"SalesforceHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["149","154","163","295","358","366","416","418","428","430","440","442","466"],"fullExpression":"logger.trace(\"original requestPath = \" + requestPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getQueryString()","methodName":"getQueryString","lineNumber":["392"],"fullExpression":"exchange.getQueryString()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["462"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["149","154","163","174","176","179","295","358","366","416","418","428","430","440","442","466","469"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["467"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["153","391"],"fullExpression":"exchange.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["271","313","341","384"],"fullExpression":"logger.error(\"Cannot create HttpClient:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.codec.binary.Base64","methodSignature":"encodeBase64URLSafeString(byte[])","methodName":"encodeBase64URLSafeString","lineNumber":["214","229","238"],"fullExpression":"org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(header.getBytes(\"UTF-8\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["148","168","171"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["393"],"fullExpression":"exchange.getRequestHeaders().getFirst(Headers.CONTENT_TYPE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["98","141"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["146","192","197","202"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["153","391"],"fullExpression":"exchange.getRequestMethod().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.nio.ByteBuffer)","methodName":"send","lineNumber":["467"],"fullExpression":"exchange.getResponseSender().send(ByteBuffer.wrap(responseBody))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["72"],"fullExpression":"LoggerFactory.getLogger(SalesforceHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setStatusCode(int)","methodName":"setStatusCode","lineNumber":["457"],"fullExpression":"exchange.setStatusCode(response.statusCode())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"add(io.undertow.util.HttpString, java.lang.String)","methodName":"add","lineNumber":["462"],"fullExpression":"exchange.getResponseHeaders().add(new HttpString(header.getKey()), s)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["393"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["95","135","309","380","450"],"fullExpression":"logger.error(\"An instance of MetricsHandler is not configured in the handler.yml.\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/correlation/src/test/java/com/networknt/correlation/CorrelationHandlerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["152","188"],"fullExpression":"Assert.assertNotNull(body)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["56","78"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["61"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["77"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["121","149","185"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["61"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["111","112","140","172"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["86","90","94"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["123","151","187"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["111","140","172"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["110","139","171"],"fullExpression":"new ClientRequest().setPath(\"/with\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["116","144","176"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["65"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["83"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["86","90","94"],"fullExpression":"exchange.getResponseSender().send(cid)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["119","147","179"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.correlation.CorrelationHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["57"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["61"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["110","139","171"],"fullExpression":"new ClientRequest().setPath(\"/with\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["49"],"fullExpression":"LoggerFactory.getLogger(CorrelationHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["61"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["85","89","93"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["124","189"],"fullExpression":"Assert.assertEquals(\"cid\", body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["83","83","83"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/with\", exchange -> {\n    String cid = exchange.getRequestHeaders().getFirst(HttpStringConstants.CORRELATION_ID);\n    exchange.getResponseSender().send(cid);\n}).add(Methods.GET, \"/without\", exchange -> {\n    String cid = exchange.getRequestHeaders().getFirst(HttpStringConstants.CORRELATION_ID);\n    exchange.getResponseSender().send(cid);\n}).add(Methods.GET, \"/withoutNoAutogen\", exchange -> {\n    String cid = exchange.getRequestHeaders().getFirst(HttpStringConstants.CORRELATION_ID);\n    exchange.getResponseSender().send(cid == null ? \"noCID\" : \"generated cid, error\");\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/dump/src/main/java/com/networknt/dump/QueryParametersDumper.java":[{"declaringType":"com.networknt.dump.QueryParametersDumper","methodSignature":"putDumpInfoTo(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"putDumpInfoTo","lineNumber":["48"],"fullExpression":"this.putDumpInfoTo(result)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/data-source/src/test/java/com/networknt/db/CustomMysqlDataSource.java":[{"declaringType":"com.networknt.db.CustomMysqlDataSource","methodSignature":"setExtendConfigParams()","methodName":"setExtendConfigParams","lineNumber":["45","50"],"fullExpression":"setExtendConfigParams()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.db.CustomMysqlDataSource","methodSignature":"getDsName()","methodName":"getDsName","lineNumber":["54"],"fullExpression":"getDsName()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/com/networknt/metrics/MetricsHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["126"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["136"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["46","51","113"],"fullExpression":"logger.debug(\"MetricsHandler is constructed!\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["77","126"],"fullExpression":"logger.info(\"metrics is enabled and reporter is started\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"addExchangeCompleteListener(io.undertow.server.ExchangeCompletionListener)","methodName":"addExchangeCompleteListener","lineNumber":["87"],"fullExpression":"exchange.addExchangeCompleteListener((exchange1, nextListener) -> {\n    try {\n        Map<String, Object> auditInfo = exchange1.getAttachment(AttachmentConstants.AUDIT_INFO);\n        if (auditInfo != null && !auditInfo.isEmpty()) {\n            Map<String, String> tags = new HashMap<>();\n            tags.put(\"endpoint\", (String) auditInfo.get(Constants.ENDPOINT_STRING));\n            tags.put(\"clientId\", auditInfo.get(Constants.CLIENT_ID_STRING) != null ? (String) auditInfo.get(Constants.CLIENT_ID_STRING) : \"unknown\");\n            tags.put(\"scopeClientId\", auditInfo.get(Constants.SCOPE_CLIENT_ID_STRING) != null ? (String) auditInfo.get(Constants.SCOPE_CLIENT_ID_STRING) : \"unknown\");\n            tags.put(\"callerId\", auditInfo.get(Constants.CALLER_ID_STRING) != null ? (String) auditInfo.get(Constants.CALLER_ID_STRING) : \"unknown\");\n            long time = Clock.defaultClock().getTick() - startTime;\n            MetricName metricName = new MetricName(\"response_time\");\n            metricName = metricName.tagged(commonTags);\n            metricName = metricName.tagged(tags);\n            registry.getOrAdd(metricName, MetricRegistry.MetricBuilder.TIMERS).update(time, TimeUnit.NANOSECONDS);\n            incCounterForStatusCode(exchange1.getStatusCode(), commonTags, tags);\n        } else {\n            // when we reach here, it will be in light-gateway so no specification is loaded on the server and also the security verification is failed.\n            // we need to come up with the endpoint at last to ensure we have some meaningful metrics info populated.\n            logger.error(\"auditInfo is null or empty. Please move the path prefix handler to the top of the handler chain after metrics.\");\n        }\n    } catch (Throwable e) {\n        logger.error(\"ExchangeListener throwable\", e);\n    } finally {\n        nextListener.proceed();\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getStatusCode()","methodName":"getStatusCode","lineNumber":["101"],"fullExpression":"exchange1.getStatusCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["46","51","59","113"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["32"],"fullExpression":"LoggerFactory.getLogger(MetricsHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["80","108"],"fullExpression":"logger.error(\"metrics is failed to connect to the influxdb\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ExchangeCompletionListener.NextListener","methodSignature":"proceed()","methodName":"proceed","lineNumber":["110"],"fullExpression":"nextListener.proceed()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["105"],"fullExpression":"logger.error(\"auditInfo is null or empty. Please move the path prefix handler to the top of the handler chain after metrics.\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sidecar/src/main/java/com/networknt/router/middleware/SidecarServiceDictHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["26"],"fullExpression":"logger.info(\"SidecarServiceDictHandler is constructed\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["33","43"],"fullExpression":"logger.debug(\"SidecarServiceDictHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["35","38","41"],"fullExpression":"logger.trace(\"Outgoing request with header indicator\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["33","43"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["35","38","41"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["21"],"fullExpression":"LoggerFactory.getLogger(SidecarServiceDictHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestScheme()","methodName":"getRequestScheme","lineNumber":["37"],"fullExpression":"exchange.getRequestScheme()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config-reload/src/main/java/com/networknt/config/reload/model/ConfigReloadConfig.java":[{"declaringType":"com.networknt.config.reload.model.ConfigReloadConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["42","59","64"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.reload.model.ConfigReloadConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["84","85"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["30"],"fullExpression":"LoggerFactory.getLogger(ConfigReloadConfig.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/RatioGauge.java":[{"declaringType":"io.dropwizard.metrics.RatioGauge.Ratio","methodSignature":"getValue()","methodName":"getValue","lineNumber":["80"],"fullExpression":"getRatio().getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.RatioGauge","methodSignature":"getRatio()","methodName":"getRatio","lineNumber":["80"],"fullExpression":"getRatio()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/response-transformer/src/test/java/com/networknt/restrans/ResponseTransformerConfigTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["10"],"fullExpression":"Assert.assertTrue(config.getMappedConfig().size() > 0)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/mask/src/test/java/com/networknt/mask/MaskTest.java":[{"declaringType":"com.jayway.jsonpath.ReadContext","methodSignature":"read(java.lang.String, com.jayway.jsonpath.Predicate...)","methodName":"read","lineNumber":["100","101","125","126","127","128"],"fullExpression":"JsonPath.parse(output).read(\"$.contact.phone\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.Configuration","methodSignature":"setDefaults(com.jayway.jsonpath.Configuration.Defaults)","methodName":"setDefaults","lineNumber":["39"],"fullExpression":"Configuration.setDefaults(new Configuration.Defaults() {\n\n    private final JsonProvider jsonProvider = new JacksonJsonProvider();\n\n    private final MappingProvider mappingProvider = new JacksonMappingProvider();\n\n    @Override\n    public JsonProvider jsonProvider() {\n        return jsonProvider;\n    }\n\n    @Override\n    public MappingProvider mappingProvider() {\n        return mappingProvider;\n    }\n\n    @Override\n    public Set<Option> options() {\n        return EnumSet.noneOf(Option.class);\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["66","74","83","85","93","100","101","102","125","126","127","128","137","148","153","158","163","168","173"],"fullExpression":"Assert.assertEquals(\"/v1/customer?sin=masked&password=******&number=----------------\", output)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.JsonPath","methodSignature":"parse(java.lang.String)","methodName":"parse","lineNumber":["100","101","125","126","127","128"],"fullExpression":"JsonPath.parse(output)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/influxdb/data/InfluxDbPoint.java":[{"declaringType":"io.dropwizard.metrics.influxdb.data.InfluxDbPoint","methodSignature":"map2String(java.util.Map<java.lang.String, java.lang.String>)","methodName":"map2String","lineNumber":["79"],"fullExpression":"map2String(tags)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/InstrumentedScheduledExecutorServiceTest.java":[{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["161","206"],"fullExpression":"assertThat(theFuture.get()).isEqualTo(obj)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(T)","methodName":"assertThat","lineNumber":["161","206"],"fullExpression":"assertThat(theFuture.get())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/portal-registry/src/test/java/com/networknt/portal/registry/MockUtils.java":[{"declaringType":"com.networknt.portal.registry.MockUtils","methodSignature":"getMockUrl(java.lang.String, int)","methodName":"getMockUrl","lineNumber":["52"],"fullExpression":"getMockUrl(address, port)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sanitizer/src/test/java/com/networknt/sanitizer/builder/ServerBuilder.java":[{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["32"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["32"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["32"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["32"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/http-entity/src/main/java/com/networknt/http/MediaType.java":[{"declaringType":"com.networknt.http.MediaType","methodSignature":"getQualityValue()","methodName":"getQualityValue","lineNumber":["780","781"],"fullExpression":"mediaType1.getQualityValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MediaType","methodSignature":"parseMediaType(java.lang.String)","methodName":"parseMediaType","lineNumber":["594","635"],"fullExpression":"parseMediaType(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MediaType","methodSignature":"parseMediaTypes(java.lang.String)","methodName":"parseMediaTypes","lineNumber":["655","660"],"fullExpression":"parseMediaTypes(mediaTypes.get(0))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ldap-util/src/test/java/com/networknt/ldap/ApacheDirectoryServer.java":[{"declaringType":"com.networknt.ldap.ApacheDirectoryServer","methodSignature":"processLdif(org.apache.directory.api.ldap.model.schema.SchemaManager, org.apache.directory.server.core.api.CoreSession, java.lang.String, java.util.Map<java.lang.String, java.lang.String>)","methodName":"processLdif","lineNumber":["96","97","98","99"],"fullExpression":"processLdif(schemaManager, adminSession, \"partition.ldif\", mappings)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.ldap.LdapServer","methodSignature":"setDirectoryService(org.apache.directory.server.core.api.DirectoryService)","methodName":"setDirectoryService","lineNumber":["109"],"fullExpression":"ldapServer.setDirectoryService(directoryService)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.core.api.CoreSession","methodSignature":"add(org.apache.directory.api.ldap.model.entry.Entry)","methodName":"add","lineNumber":["159"],"fullExpression":"adminSession.add(new DefaultEntry(schemaManager, ldifEntry.getEntry()))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.core.factory.PartitionFactory","methodSignature":"createPartition(org.apache.directory.api.ldap.model.schema.SchemaManager, java.lang.String, java.lang.String, int, java.io.File)","methodName":"createPartition","lineNumber":["116"],"fullExpression":"pf.createPartition(schemaManager, id, suffix, 1000, workingDir.toFile())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.ldap.LdapServer","methodSignature":"start()","methodName":"start","lineNumber":["110"],"fullExpression":"ldapServer.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.api.ldap.model.ldif.LdifEntry","methodSignature":"getEntry()","methodName":"getEntry","lineNumber":["159"],"fullExpression":"ldifEntry.getEntry()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.protocol.shared.DirectoryBackedService","methodSignature":"setSearchBaseDn(java.lang.String)","methodName":"setSearchBaseDn","lineNumber":["168"],"fullExpression":"kdcServer.setSearchBaseDn(\"ou=users,dc=undertow,dc=io\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.ldap.ApacheDirectoryServer","methodSignature":"startKDC()","methodName":"startKDC","lineNumber":["76"],"fullExpression":"startKDC()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.core.api.DirectoryService","methodSignature":"getSchemaManager()","methodName":"getSchemaManager","lineNumber":["89"],"fullExpression":"directoryService.getSchemaManager()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.core.api.DirectoryService","methodSignature":"addPartition(org.apache.directory.server.core.api.partition.Partition)","methodName":"addPartition","lineNumber":["119"],"fullExpression":"directoryService.addPartition(p)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.ldap.LdapServer","methodSignature":"setKeystoreFile(java.lang.String)","methodName":"setKeystoreFile","lineNumber":["106"],"fullExpression":"ldapServer.setKeystoreFile(ApacheDirectoryServer.class.getResource(\"/config/server.keystore\").getFile())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.kerberos.KerberosConfig","methodSignature":"setPrimaryRealm(java.lang.String)","methodName":"setPrimaryRealm","lineNumber":["171"],"fullExpression":"config.setPrimaryRealm(\"UNDERTOW.IO\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.kerberos.KerberosConfig","methodSignature":"setPaEncTimestampRequired(boolean)","methodName":"setPaEncTimestampRequired","lineNumber":["173"],"fullExpression":"config.setPaEncTimestampRequired(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.core.factory.DirectoryServiceFactory","methodSignature":"getPartitionFactory()","methodName":"getPartitionFactory","lineNumber":["115"],"fullExpression":"dsf.getPartitionFactory()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.ldap.ApacheDirectoryServer","methodSignature":"setupEnvironment()","methodName":"setupEnvironment","lineNumber":["74"],"fullExpression":"setupEnvironment()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.protocol.shared.transport.Transport","methodSignature":"enableSSL(boolean)","methodName":"enableSSL","lineNumber":["104"],"fullExpression":"ldap.enableSSL(true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.protocol.shared.AbstractProtocolService","methodSignature":"setServiceName(java.lang.String)","methodName":"setServiceName","lineNumber":["102","167"],"fullExpression":"ldapServer.setServiceName(\"DefaultLDAP\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.core.api.DirectoryService","methodSignature":"getChangeLog()","methodName":"getChangeLog","lineNumber":["88"],"fullExpression":"directoryService.getChangeLog()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.ldap.ApacheDirectoryServer","methodSignature":"startLdapServer()","methodName":"startLdapServer","lineNumber":["75"],"fullExpression":"startLdapServer()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.protocol.shared.AbstractProtocolService","methodSignature":"addTransports(org.apache.directory.server.protocol.shared.transport.Transport...)","methodName":"addTransports","lineNumber":["105","176"],"fullExpression":"ldapServer.addTransports(ldap)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.ldap.ApacheDirectoryServer","methodSignature":"createWorkingDir()","methodName":"createWorkingDir","lineNumber":["83"],"fullExpression":"createWorkingDir()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.ldap.ApacheDirectoryServer","methodSignature":"createPartition(org.apache.directory.server.core.factory.DirectoryServiceFactory, org.apache.directory.api.ldap.model.schema.SchemaManager, java.lang.String, java.lang.String)","methodName":"createPartition","lineNumber":["91"],"fullExpression":"createPartition(dsf, schemaManager, \"users\", \"ou=users,dc=undertow,dc=io\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.ldap.LdapServer","methodSignature":"loadKeyStore()","methodName":"loadKeyStore","lineNumber":["108"],"fullExpression":"ldapServer.loadKeyStore()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.core.factory.DirectoryServiceFactory","methodSignature":"getDirectoryService()","methodName":"getDirectoryService","lineNumber":["86"],"fullExpression":"dsf.getDirectoryService()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.core.api.changelog.ChangeLog","methodSignature":"setEnabled(boolean)","methodName":"setEnabled","lineNumber":["88"],"fullExpression":"directoryService.getChangeLog().setEnabled(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.core.api.partition.Partition","methodSignature":"initialize()","methodName":"initialize","lineNumber":["118"],"fullExpression":"p.initialize()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.kerberos.KerberosConfig","methodSignature":"setServicePrincipal(java.lang.String)","methodName":"setServicePrincipal","lineNumber":["170"],"fullExpression":"config.setServicePrincipal(\"krbtgt/UNDERTOW.IO@UNDERTOW.IO\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.ldap.LdapServer","methodSignature":"setCertificatePassword(java.lang.String)","methodName":"setCertificatePassword","lineNumber":["107"],"fullExpression":"ldapServer.setCertificatePassword(\"password\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.core.api.DirectoryService","methodSignature":"getAdminSession()","methodName":"getAdminSession","lineNumber":["93"],"fullExpression":"directoryService.getAdminSession()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.kerberos.kdc.KdcServer","methodSignature":"start()","methodName":"start","lineNumber":["179"],"fullExpression":"kdcServer.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.kerberos.kdc.KdcServer","methodSignature":"getConfig()","methodName":"getConfig","lineNumber":["169"],"fullExpression":"kdcServer.getConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.core.api.DirectoryService","methodSignature":"addLast(org.apache.directory.server.core.api.interceptor.Interceptor)","methodName":"addLast","lineNumber":["87"],"fullExpression":"directoryService.addLast(new KeyDerivationInterceptor())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.api.ldap.model.ldif.LdifReader","methodSignature":"close()","methodName":"close","lineNumber":["161"],"fullExpression":"ldifReader.close()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.core.factory.DirectoryServiceFactory","methodSignature":"init(java.lang.String)","methodName":"init","lineNumber":["85"],"fullExpression":"dsf.init(DIRECTORY_NAME)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.protocol.shared.DirectoryBackedService","methodSignature":"setDirectoryService(org.apache.directory.server.core.api.DirectoryService)","methodName":"setDirectoryService","lineNumber":["178"],"fullExpression":"kdcServer.setDirectoryService(directoryService)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.directory.server.core.factory.PartitionFactory","methodSignature":"addIndex(org.apache.directory.server.core.api.partition.Partition, java.lang.String, int)","methodName":"addIndex","lineNumber":["117"],"fullExpression":"pf.addIndex(p, \"krb5PrincipalName\", 10)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/DefaultObjectNameFactoryTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["34","41"],"fullExpression":"assertThat(on.getDomain())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["34","41"],"fullExpression":"assertThat(on.getDomain()).isEqualTo(\"com.domain\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/body/src/main/java/com/networknt/body/BodyConverter.java":[{"declaringType":"io.undertow.server.handlers.form.FormData.FormValue","methodSignature":"getFileItem()","methodName":"getFileItem","lineNumber":["41","51"],"fullExpression":"data.getFirst(key).getFileItem()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.form.FormData.FormValue","methodSignature":"getFileName()","methodName":"getFileName","lineNumber":["37","48"],"fullExpression":"data.getFirst(key).getFileName()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.form.FormData.FormValue","methodSignature":"getValue()","methodName":"getValue","lineNumber":["38","49"],"fullExpression":"data.getFirst(key).getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.form.FormData","methodSignature":"get(java.lang.String)","methodName":"get","lineNumber":["35","44","46"],"fullExpression":"data.get(key)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.form.FormData","methodSignature":"getFirst(java.lang.String)","methodName":"getFirst","lineNumber":["37","38","41"],"fullExpression":"data.getFirst(key)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/security/src/test/java/com/networknt/security/JwtVerifierJwkBase.java":[{"declaringType":"com.networknt.security.JwtVerifierJwkBase","methodSignature":"getJwt(org.jose4j.jwt.JwtClaims, java.lang.String)","methodName":"getJwt","lineNumber":["180"],"fullExpression":"getJwt(claims, kid)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKey(java.security.Key)","methodName":"setKey","lineNumber":["144"],"fullExpression":"jws.setKey(privateKey)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKeyIdHeaderValue(java.lang.String)","methodName":"setKeyIdHeaderValue","lineNumber":["145"],"fullExpression":"jws.setKeyIdHeaderValue(kid)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setDisableRequireSignature()","methodName":"setDisableRequireSignature","lineNumber":["92"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setIssuedAtToNow()","methodName":"setIssuedAtToNow","lineNumber":["189"],"fullExpression":"claims.setIssuedAtToNow()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifierJwkBase","methodSignature":"getTestClaims()","methodName":"getTestClaims","lineNumber":["178"],"fullExpression":"getTestClaims()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtContext","methodSignature":"getJwtClaims()","methodName":"getJwtClaims","lineNumber":["99"],"fullExpression":"jwtContext.getJwtClaims()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["53"],"fullExpression":"IoUtils.safeClose(stream)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipAllValidators()","methodName":"setSkipAllValidators","lineNumber":["92"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setStringListClaim(java.lang.String, java.util.List<java.lang.String>)","methodName":"setStringListClaim","lineNumber":["197"],"fullExpression":"claims.setStringListClaim(\"scope\", scope)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"fromMilliseconds(long)","methodName":"fromMilliseconds","lineNumber":["179"],"fullExpression":"NumericDate.fromMilliseconds(System.currentTimeMillis() + expiredInSeconds * 1000)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"now()","methodName":"now","lineNumber":["102"],"fullExpression":"NumericDate.now()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setExpirationTime(org.jose4j.jwt.NumericDate)","methodName":"setExpirationTime","lineNumber":["179"],"fullExpression":"claims.setExpirationTime(NumericDate.fromMilliseconds(System.currentTimeMillis() + expiredInSeconds * 1000))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["31"],"fullExpression":"LoggerFactory.getLogger(JwtVerifierJwkBase.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["92"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification().build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["171"],"fullExpression":"logger.error(\"Failed to retrieve private key from keystore\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"getExpirationTime()","methodName":"getExpirationTime","lineNumber":["102"],"fullExpression":"jwtClaims.getExpirationTime()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setNotBeforeMinutesInThePast(float)","methodName":"setNotBeforeMinutesInThePast","lineNumber":["190"],"fullExpression":"claims.setNotBeforeMinutesInThePast(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"getValue()","methodName":"getValue","lineNumber":["102","102"],"fullExpression":"NumericDate.now().getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["106","167"],"fullExpression":"logger.error(\"MalformedClaimException:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setIssuer(java.lang.String)","methodName":"setIssuer","lineNumber":["185"],"fullExpression":"claims.setIssuer(\"urn:com:networknt:oauth2:v1\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipSignatureVerification()","methodName":"setSkipSignatureVerification","lineNumber":["92"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setAudience(java.lang.String)","methodName":"setAudience","lineNumber":["186"],"fullExpression":"claims.setAudience(\"urn:com.networknt\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"toJson()","methodName":"toJson","lineNumber":["141"],"fullExpression":"claims.toJson()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"setPayload(java.lang.String)","methodName":"setPayload","lineNumber":["141"],"fullExpression":"jws.setPayload(claims.toJson())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setExpirationTimeMinutesInTheFuture(float)","methodName":"setExpirationTimeMinutesInTheFuture","lineNumber":["187"],"fullExpression":"claims.setExpirationTimeMinutesInTheFuture(10)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setGeneratedJwtId()","methodName":"setGeneratedJwtId","lineNumber":["188"],"fullExpression":"claims.setGeneratedJwtId()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"getCompactSerialization()","methodName":"getCompactSerialization","lineNumber":["152"],"fullExpression":"jws.getCompactSerialization()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setClaim(java.lang.String, java.lang.Object)","methodName":"setClaim","lineNumber":["191","193","194","195"],"fullExpression":"claims.setClaim(\"version\", \"1.0\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifierJwkBase","methodSignature":"getJwtFromAuthorization(java.lang.String)","methodName":"getJwtFromAuthorization","lineNumber":["89"],"fullExpression":"getJwtFromAuthorization(authorization)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumer","methodSignature":"process(java.lang.String)","methodName":"process","lineNumber":["98"],"fullExpression":"consumer.process(jwt)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifierJwkBase","methodSignature":"createClient(org.xnio.OptionMap)","methodName":"createClient","lineNumber":["202"],"fullExpression":"createClient(OptionMap.EMPTY)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setAlgorithmHeaderValue(java.lang.String)","methodName":"setAlgorithmHeaderValue","lineNumber":["148"],"fullExpression":"jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/cache-explorer/src/main/java/com/networknt/cache/CacheExplorerHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["22"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["22"],"fullExpression":"logger.info(\"CacheExplorerHandler constructed\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["27"],"fullExpression":"logger.trace(\"CacheExplorerHandler handleRequest\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["27"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["20"],"fullExpression":"LoggerFactory.getLogger(CacheExplorerHandler.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler/src/test/java/com/networknt/handler/HandlerTest.java":[{"declaringType":"com.networknt.handler.HandlerTest","methodSignature":"mkPathChain(java.lang.String, java.lang.String, java.lang.String, java.lang.String...)","methodName":"mkPathChain","lineNumber":["88","89","90","109","110","111"],"fullExpression":"mkPathChain(null, \"/my-api/first\", \"post\", \"third\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["98","100"],"fullExpression":"Assert.assertNotNull(getFirst)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["120","121","122"],"fullExpression":"Assert.assertTrue(e.getMessage().contains(\"Conflicting source\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.PathTemplateMatcher","methodSignature":"match(java.lang.String)","methodName":"match","lineNumber":["97","99","101"],"fullExpression":"getMatcher.match(\"/my-api/first\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNull(java.lang.Object)","methodName":"assertNull","lineNumber":["102"],"fullExpression":"Assert.assertNull(getThird)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["60","61"],"fullExpression":"Assert.assertEquals(1, handlers.get(\"third\").size())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"fail(java.lang.String)","methodName":"fail","lineNumber":["118"],"fullExpression":"Assert.fail(\"Expected an exception to be thrown\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/JmxReporterTest.java":[{"declaringType":"org.mockito.Mockito","methodSignature":"verify(T)","methodName":"verify","lineNumber":["293"],"fullExpression":"verify(mockedMBeanServer)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"failBecauseExceptionWasNotThrown(java.lang.Class<? extends java.lang.Throwable>)","methodName":"failBecauseExceptionWasNotThrown","lineNumber":["266"],"fullExpression":"failBecauseExceptionWasNotThrown(InstanceNotFoundException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodSignature":"thenReturn(T)","methodName":"thenReturn","lineNumber":["277"],"fullExpression":"when(mockedMBeanServer.registerMBean(any(Object.class), any(ObjectName.class))).thenReturn(new ObjectInstance(\"DOMAIN:key=value\", \"className\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.ArgumentMatchers","methodSignature":"any(java.lang.Class<T>)","methodName":"any","lineNumber":["134","134","145","277","277"],"fullExpression":"any(String.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"entry(K, V)","methodName":"entry","lineNumber":["160","168","187","188","189","190","191","192","193","194","195","196","197","211","212","213","214","215","216","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257"],"fullExpression":"entry(\"Value\", 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.MapAssert","methodSignature":"contains(java.util.Map.Entry<? extends KEY, ? extends VALUE>...)","methodName":"contains","lineNumber":["159","167","186","186","186","186","186","186","186","186","186","186","186","210","210","210","210","210","210","240","240","240","240","240","240","240","240","240","240","240","240","240","240","240","240","240"],"fullExpression":"assertThat(values(attributes)).contains(entry(\"Value\", 1))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"when(T)","methodName":"when","lineNumber":["277"],"fullExpression":"when(mockedMBeanServer.registerMBean(any(Object.class), any(ObjectName.class)))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.JmxReporterTest","methodSignature":"getAttributes(java.lang.String, java.lang.String...)","methodName":"getAttributes","lineNumber":["157","165","173","202","221","265"],"fullExpression":"getAttributes(\"gauge\", \"Value\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.ArgumentMatchers","methodSignature":"eq(T)","methodName":"eq","lineNumber":["145"],"fullExpression":"eq(\"gauges\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.JmxReporterTest","methodSignature":"values(javax.management.AttributeList)","methodName":"values","lineNumber":["159","167","186","210","240"],"fullExpression":"values(attributes)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"mock(java.lang.Class<T>)","methodName":"mock","lineNumber":["274"],"fullExpression":"mock(MBeanServer.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.Map<K, V>)","methodName":"assertThat","lineNumber":["159","167","186","210","240"],"fullExpression":"assertThat(values(attributes))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/Slf4jReporter.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.String)","methodName":"getLogger","lineNumber":["63"],"fullExpression":"LoggerFactory.getLogger(\"metrics\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled(org.slf4j.Marker)","methodName":"isInfoEnabled","lineNumber":["361"],"fullExpression":"logger.isInfoEnabled(marker)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Slf4jReporter.LoggerProxy","methodSignature":"isEnabled(org.slf4j.Marker)","methodName":"isEnabled","lineNumber":["201"],"fullExpression":"loggerProxy.isEnabled(marker)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(org.slf4j.Marker, java.lang.String, java.lang.Object...)","methodName":"error","lineNumber":["390"],"fullExpression":"logger.error(marker, format, arguments)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(org.slf4j.Marker, java.lang.String, java.lang.Object...)","methodName":"warn","lineNumber":["373"],"fullExpression":"logger.warn(marker, format, arguments)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(org.slf4j.Marker, java.lang.String, java.lang.Object...)","methodName":"trace","lineNumber":["339"],"fullExpression":"logger.trace(marker, format, arguments)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled(org.slf4j.Marker)","methodName":"isDebugEnabled","lineNumber":["327"],"fullExpression":"logger.isDebugEnabled(marker)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(org.slf4j.Marker, java.lang.String, java.lang.Object...)","methodName":"info","lineNumber":["356"],"fullExpression":"logger.info(marker, format, arguments)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isErrorEnabled(org.slf4j.Marker)","methodName":"isErrorEnabled","lineNumber":["395"],"fullExpression":"logger.isErrorEnabled(marker)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(org.slf4j.Marker, java.lang.String, java.lang.Object...)","methodName":"debug","lineNumber":["322"],"fullExpression":"logger.debug(marker, format, arguments)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isWarnEnabled(org.slf4j.Marker)","methodName":"isWarnEnabled","lineNumber":["378"],"fullExpression":"logger.isWarnEnabled(marker)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Slf4jReporter","methodSignature":"getRateUnit()","methodName":"getRateUnit","lineNumber":["247","261"],"fullExpression":"getRateUnit()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled(org.slf4j.Marker)","methodName":"isTraceEnabled","lineNumber":["344"],"fullExpression":"logger.isTraceEnabled(marker)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/logger-config/src/main/java/com/networknt/logging/model/LoggerConfig.java":[{"declaringType":"com.networknt.logging.model.LoggerConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["50","63"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.logging.model.LoggerConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["68","70","72","74","76"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/main/java/com/networknt/router/middleware/PathServiceConfig.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["80"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.PathServiceConfig","methodSignature":"setMap()","methodName":"setMap","lineNumber":["41","55"],"fullExpression":"setMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.PathServiceConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["105"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["80"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["19"],"fullExpression":"LoggerFactory.getLogger(PathServiceConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["86"],"fullExpression":"logger.error(\"IOException:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.PathServiceConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["42","56"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["99"],"fullExpression":"logger.error(\"mapping is the wrong type. Only JSON string and YAML map are supported.\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/dump/src/main/java/com/networknt/dump/BodyDumper.java":[{"declaringType":"com.networknt.dump.BodyDumper","methodSignature":"dumpInputStream()","methodName":"dumpInputStream","lineNumber":["72"],"fullExpression":"dumpInputStream()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.dump.BodyDumper","methodSignature":"putDumpInfoTo(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"putDumpInfoTo","lineNumber":["77","90"],"fullExpression":"this.putDumpInfoTo(result)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.dump.BodyDumper","methodSignature":"dumpBodyAttachment(java.lang.Object)","methodName":"dumpBodyAttachment","lineNumber":["69"],"fullExpression":"dumpBodyAttachment(requestBodyAttachment)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["39"],"fullExpression":"LoggerFactory.getLogger(BodyDumper.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["107","111"],"fullExpression":"logger.error(e.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String, java.lang.Object)","methodName":"info","lineNumber":["75"],"fullExpression":"logger.info(\"unsupported contentType: {}\", contentType)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/db-provider/src/main/java/com/networknt/db/provider/DbProvider.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String)","methodName":"warn","lineNumber":["27"],"fullExpression":"logger.warn(\"No config server provider configured in service.yml; defaulting to DbProviderImpl\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["15"],"fullExpression":"LoggerFactory.getLogger(DbProvider.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/status/src/test/java/com/networknt/status/SeparateClassloaderTestRunner.java":[{"declaringType":"com.networknt.status.SeparateClassloaderTestRunner","methodSignature":"getFromTestClassloader(java.lang.Class<?>)","methodName":"getFromTestClassloader","lineNumber":["31"],"fullExpression":"getFromTestClassloader(clazz)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.SeparateClassloaderTestRunner.TestClassLoader","methodSignature":"getSystemURLs()","methodName":"getSystemURLs","lineNumber":["45"],"fullExpression":"getSystemURLs()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/body/src/main/java/com/networknt/body/ResponseBodyInterceptor.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["38"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["26","58"],"fullExpression":"LOG.info(\"ResponseBodyInterceptor is loaded\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["70","98"],"fullExpression":"LOG.debug(\"ResponseBodyInterceptor.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["79"],"fullExpression":"LOG.trace(\"Attach response body requirement is met and the byte buffer pool exists.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.body.ResponseBodyInterceptor","methodSignature":"attachXmlBody(io.undertow.server.HttpServerExchange, java.lang.String)","methodName":"attachXmlBody","lineNumber":["106"],"fullExpression":"this.attachXmlBody(ex, body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["72","82"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.body.ResponseBodyInterceptor","methodSignature":"cacheResponseBody(io.undertow.server.HttpServerExchange, java.lang.String)","methodName":"cacheResponseBody","lineNumber":["126","130","134","143","148"],"fullExpression":"this.cacheResponseBody(ex, str)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["78","84"],"fullExpression":"LOG.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isErrorEnabled()","methodName":"isErrorEnabled","lineNumber":["92"],"fullExpression":"LOG.isErrorEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["82"],"fullExpression":"exchange.getResponseHeaders().getFirst(Headers.CONTENT_TYPE)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.body.ResponseBodyInterceptor","methodSignature":"attachJsonBody(io.undertow.server.HttpServerExchange, java.lang.String)","methodName":"attachJsonBody","lineNumber":["103"],"fullExpression":"this.attachJsonBody(ex, body)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["25","57"],"fullExpression":"LOG.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.body.ResponseBodyInterceptor","methodSignature":"attachFormDataBody(io.undertow.server.HttpServerExchange, java.lang.String)","methodName":"attachFormDataBody","lineNumber":["109"],"fullExpression":"this.attachFormDataBody(ex, body)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["69","97"],"fullExpression":"LOG.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["20"],"fullExpression":"LoggerFactory.getLogger(ResponseBodyInterceptor.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["93"],"fullExpression":"LOG.error(\"Failed to attach the request body to the exchange!\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/security-config/src/main/java/com/networknt/security/JwtConfig.java":[{"declaringType":"com.networknt.security.JwtConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["105","106","108","110","119","121"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["50","62"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["30"],"fullExpression":"LoggerFactory.getLogger(JwtConfig.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/security/src/main/java/com/networknt/security/JwtVerifier.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["424","507","548"],"fullExpression":"logger.debug(\"Got Json web key set from local cache\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setDisableRequireSignature()","methodName":"setDisableRequireSignature","lineNumber":["183"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifier","methodSignature":"isJwtAudienceValid(org.jose4j.jwt.JwtClaims, java.lang.String)","methodName":"isJwtAudienceValid","lineNumber":["252","280","316"],"fullExpression":"isJwtAudienceValid(claims, configuredAudience)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtContext","methodSignature":"getJoseObjects()","methodName":"getJoseObjects","lineNumber":["196"],"fullExpression":"jwtContext.getJoseObjects()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setRequireExpirationTime()","methodName":"setRequireExpirationTime","lineNumber":["207"],"fullExpression":"new JwtConsumerBuilder().setRequireExpirationTime()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifier","methodSignature":"isJwtAudienceValid(org.jose4j.jwt.JwtClaims, java.util.List<java.lang.String>)","methodName":"isJwtAudienceValid","lineNumber":["262"],"fullExpression":"isJwtAudienceValid(claims, jwkServiceIds)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["98","119","135","363","437","440","497","538","587","636"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifier","methodSignature":"verifyJwt(java.lang.String, boolean, boolean, java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.util.function.BiFunction<java.lang.String, java.lang.Object, org.jose4j.keys.resolvers.VerificationKeyResolver>)","methodName":"verifyJwt","lineNumber":["120","136"],"fullExpression":"verifyJwt(jwt, ignoreExpiry, isToken, pathPrefix, requestPath, jwkServiceIds, this::getKeyResolver)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifier","methodSignature":"validateAudience(org.jose4j.jwt.JwtClaims, java.lang.String, java.util.List<java.lang.String>, org.jose4j.jwt.consumer.JwtContext)","methodName":"validateAudience","lineNumber":["205"],"fullExpression":"validateAudience(claims, requestPath, jwkServiceIds, jwtContext)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifier","methodSignature":"cacheJwkList(java.util.List<org.jose4j.jwk.JsonWebKey>, java.lang.String)","methodName":"cacheJwkList","lineNumber":["412","416","420"],"fullExpression":"cacheJwkList(jwkList, null)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setRelaxVerificationKeyValidation()","methodName":"setRelaxVerificationKeyValidation","lineNumber":["189","214"],"fullExpression":"pKeyBuilder.setRelaxVerificationKeyValidation()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifier","methodSignature":"getJsonWebKeyMap()","methodName":"getJsonWebKeyMap","lineNumber":["100"],"fullExpression":"getJsonWebKeyMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtContext","methodSignature":"getJwtClaims()","methodName":"getJwtClaims","lineNumber":["195","221"],"fullExpression":"jwtContext.getJwtClaims()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipAllValidators()","methodName":"setSkipAllValidators","lineNumber":["183"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object...)","methodName":"trace","lineNumber":["437"],"fullExpression":"logger.trace(\"cache the jwkList with serviceId {} kid {} and key {}\", serviceId, jwk.getKeyId(), serviceId + \":\" + jwk.getKeyId())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"now()","methodName":"now","lineNumber":["339"],"fullExpression":"NumericDate.now()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["503","506","516","542","547","558","642","647"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwk.JsonWebKeySet","methodSignature":"getJsonWebKeys()","methodName":"getJsonWebKeys","lineNumber":["508","550","650"],"fullExpression":"new JsonWebKeySet(key).getJsonWebKeys()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["66"],"fullExpression":"LoggerFactory.getLogger(JwtVerifier.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["192","217"],"fullExpression":"pKeyBuilder.build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"getKeyIdHeaderValue()","methodName":"getKeyIdHeaderValue","lineNumber":["198"],"fullExpression":"structure.getKeyIdHeaderValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["427","511","533"],"fullExpression":"logger.error(\"Both X509Certificate and JWK are not configured.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"warn","lineNumber":["678"],"fullExpression":"logger.warn(\"<Deprecated: use JsonWebKeySet instead> Got raw certificate {} for kid: {}\", key, kid)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"getExpirationTime()","methodName":"getExpirationTime","lineNumber":["339"],"fullExpression":"claim.getExpirationTime()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipDefaultAudienceValidation()","methodName":"setSkipDefaultAudienceValidation","lineNumber":["207"],"fullExpression":"new JwtConsumerBuilder().setRequireExpirationTime().setAllowedClockSkewInSeconds(// use seconds of 10 years to skip expiration validation as we need skip it in some cases.\n315360000).setSkipDefaultAudienceValidation()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["98","119","135","363","588"],"fullExpression":"logger.trace(\"keyResolver = \" + keyResolver + \" bootstrapFromKeyService = \" + bootstrapFromKeyService)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"getAudience()","methodName":"getAudience","lineNumber":["294","297","298","300"],"fullExpression":"claims.getAudience()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["340"],"fullExpression":"logger.info(\"Cached jwt token is expired!\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["559"],"fullExpression":"logger.debug(\"Successfully cached JWK for kid {}\", jwk.getKeyId())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isWarnEnabled()","methodName":"isWarnEnabled","lineNumber":["672","677"],"fullExpression":"logger.isWarnEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwk.JsonWebKey","methodSignature":"getKeyId()","methodName":"getKeyId","lineNumber":["437","437","438","440","441","515","517","517","556","559"],"fullExpression":"jwk.getKeyId()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifier","methodSignature":"checkExpiry(boolean, org.jose4j.jwt.JwtClaims, int, org.jose4j.jwt.consumer.JwtContext)","methodName":"checkExpiry","lineNumber":["175","202"],"fullExpression":"checkExpiry(ignoreExpiry, claims, secondsOfAllowedClockSkew, null)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"getValue()","methodName":"getValue","lineNumber":["339","339"],"fullExpression":"NumericDate.now().getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object...)","methodName":"debug","lineNumber":["517"],"fullExpression":"logger.debug(\"Successfully cached JWK for serviceId {} kid {} with key {}\", serviceId, jwk.getKeyId(), serviceId + \":\" + jwk.getKeyId())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"trace","lineNumber":["497"],"fullExpression":"logger.trace(\"audience {} is mapped to serviceId {}\", audience, serviceId)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifier","methodSignature":"retrieveJwk(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)","methodName":"retrieveJwk","lineNumber":["615","621","628"],"fullExpression":"retrieveJwk(kid, config)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.keys.resolvers.X509VerificationKeyResolver","methodSignature":"setTryAllOnNoThumbHeader(boolean)","methodName":"setTryAllOnNoThumbHeader","lineNumber":["370"],"fullExpression":"x509VerificationKeyResolver.setTryAllOnNoThumbHeader(true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["172","288","345"],"fullExpression":"logger.error(\"MalformedClaimException:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isErrorEnabled()","methodName":"isErrorEnabled","lineNumber":["510","522","527","564","569","652","655","684","689","705","710"],"fullExpression":"logger.isErrorEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipSignatureVerification()","methodName":"setSkipSignatureVerification","lineNumber":["183"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"toJson()","methodName":"toJson","lineNumber":["224","226"],"fullExpression":"claims.toJson()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifier","methodSignature":"getJsonWebKeySetForToken(java.lang.String, java.lang.Object)","methodName":"getJsonWebKeySetForToken","lineNumber":["406"],"fullExpression":"getJsonWebKeySetForToken(kid, requestPathOrJwkServiceIds)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"parse(java.lang.String)","methodName":"parse","lineNumber":["170"],"fullExpression":"JwtClaims.parse(jwtJson)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["440","538"],"fullExpression":"logger.trace(\"cache the jwkList with kid and only kid as key\", jwk.getKeyId())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"error","lineNumber":["685","706"],"fullExpression":"logger.error(\"Failed to generate certificate: {}\", ce.getMessage(), ce)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumer","methodSignature":"process(java.lang.String)","methodName":"process","lineNumber":["194","220"],"fullExpression":"consumer.process(jwt)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setAllowedClockSkewInSeconds(int)","methodName":"setAllowedClockSkewInSeconds","lineNumber":["207"],"fullExpression":"new JwtConsumerBuilder().setRequireExpirationTime().setAllowedClockSkewInSeconds(// use seconds of 10 years to skip expiration validation as we need skip it in some cases.\n315360000)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler/src/main/java/com/networknt/handler/LightHttpHandler.java":[{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["116"],"fullExpression":"ex.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["125"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["144"],"fullExpression":"ex.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["45"],"fullExpression":"LoggerFactory.getLogger(LightHttpHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isErrorEnabled()","methodName":"isErrorEnabled","lineNumber":["121"],"fullExpression":"logger.isErrorEnabled()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/Http2ClientMultiAuthTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["79","131"],"fullExpression":"Assert.assertTrue(hasScopeToken)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["69","121"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors()).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(API_PETSTORE, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"Petstore OK!\"))));\n}).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}))).setWorkerThreads(20).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["174","187"],"fullExpression":"server1.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientMultiAuthTest","methodSignature":"callMarketApiAsync()","methodName":"callMarketApiAsync","lineNumber":["249"],"fullExpression":"callMarketApiAsync()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["83","98","135","150"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["84","99","136","151"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientMultiAuthTest","methodSignature":"callPetstoreApiAsync()","methodName":"callPetstoreApiAsync","lineNumber":["222"],"fullExpression":"callPetstoreApiAsync()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["67","69","69","69","119","121","121","121"],"fullExpression":"builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["201","228"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["83","98","135","150"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpsListener(int, java.lang.String, javax.net.ssl.SSLContext)","methodName":"addHttpsListener","lineNumber":["66","118"],"fullExpression":"builder.addHttpsListener(7771, \"localhost\", sslContext)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.PathHandler","methodSignature":"addExactPath(java.lang.String, io.undertow.server.HttpHandler)","methodName":"addExactPath","lineNumber":["76","76","128","128"],"fullExpression":"new PathHandler().addExactPath(API_PETSTORE, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"Petstore OK!\"))));\n}).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["109","161"],"fullExpression":"server1.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setIoThreads(int)","methodName":"setIoThreads","lineNumber":["69","121"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["69","121"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors()).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(API_PETSTORE, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"Petstore OK!\"))));\n}).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["205","232"],"fullExpression":"new ClientRequest().setPath(API_PETSTORE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(boolean)","methodName":"assertFalse","lineNumber":["82","134"],"fullExpression":"Assert.assertFalse(expired)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"shutdown()","methodName":"shutdown","lineNumber":["168"],"fullExpression":"worker.shutdown()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["205","232"],"fullExpression":"new ClientRequest().setPath(API_PETSTORE).setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Xnio","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["56"],"fullExpression":"Xnio.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setWorkerThreads(int)","methodName":"setWorkerThreads","lineNumber":["69","121"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors()).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(API_PETSTORE, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"Petstore OK!\"))));\n}).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}))).setWorkerThreads(20)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setBufferSize(int)","methodName":"setBufferSize","lineNumber":["69","121"],"fullExpression":"builder.setBufferSize(1024 * 16)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setSocketOption(org.xnio.Option<T>, T)","methodName":"setSocketOption","lineNumber":["69","121"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors()).setSocketOption(Options.BACKLOG, 10000)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["62","114"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["78","80","130","132"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestReceiver()","methodName":"getRequestReceiver","lineNumber":["89","141"],"fullExpression":"exchange.getRequestReceiver()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Receiver","methodSignature":"receiveFullString(io.undertow.io.Receiver.FullStringCallback)","methodName":"receiveFullString","lineNumber":["89","141"],"fullExpression":"exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/consul/src/integration/java/com/networknt/consul/ConsulTestIT.java":[{"declaringType":"com.networknt.consul.ConsulTestIT","methodSignature":"getMockUrl(java.lang.String, java.lang.String, int, java.lang.String)","methodName":"getMockUrl","lineNumber":["39"],"fullExpression":"getMockUrl(\"http\", \"192.168.1.119\", 8083, \"MockService\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/response-transformer/src/test/java/com/networknt/restrans/ResponseTransformerInterceptorTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["99","142"],"fullExpression":"Assert.assertNotNull(body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["42"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["60"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["42"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["67","68"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["95","138"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["85","123","124","125"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["46"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["66"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["67","68"],"fullExpression":"exchange.getResponseSender().send(\"{\\\"data\\\":null,\\\"notifications\\\":[{\\\"code\\\":\\\"ERR00610000\\\",\\\"message\\\":\\\"Exception in getting service:Unable to create user info\\\",\\\"timestamp\\\":1655739885937,\\\"metadata\\\":null,\\\"description\\\":\\\"Internal Server Error\\\"}]}\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["92","135"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.restrans.ResponseTransformerInterceptorTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["38"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["42"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["84","122"],"fullExpression":"new ClientRequest().setPath(\"/v1/pets\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["30"],"fullExpression":"LoggerFactory.getLogger(ResponseTransformerInterceptorTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["66","66"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/v1/pets\", exchange -> exchange.getResponseSender().send(\"{\\\"data\\\":null,\\\"notifications\\\":[{\\\"code\\\":\\\"ERR00610000\\\",\\\"message\\\":\\\"Exception in getting service:Unable to create user info\\\",\\\"timestamp\\\":1655739885937,\\\"metadata\\\":null,\\\"description\\\":\\\"Internal Server Error\\\"}]}\")).add(Methods.POST, \"/post\", exchange -> exchange.getResponseSender().send(\"post\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["119"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(\"/post\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, post));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["37","61"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["94","137"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["85","123","124","125"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["84","122"],"fullExpression":"new ClientRequest().setPath(\"/v1/pets\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["89","132"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["119"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["42"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["100","143"],"fullExpression":"Assert.assertEquals(\"[{\\\"com.networknt.handler.ResponseInterceptorHandler\\\":[\\\"com.networknt.restrans.ResponseTransformerHandler\\\"]}]\", body)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/test/java/com/networknt/config/ConfigClassPathTest.java":[{"declaringType":"junit.framework.TestCase","methodSignature":"setUp()","methodName":"setUp","lineNumber":["39"],"fullExpression":"super.setUp()","currentLayer":0,"declarationInfo":null},{"declaringType":"junit.framework.TestCase","methodSignature":"tearDown()","methodName":"tearDown","lineNumber":["55"],"fullExpression":"super.tearDown()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["64"],"fullExpression":"Assert.assertEquals(\"classpath\", configMap.get(\"value\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sidecar/src/main/java/com/networknt/router/SidecarRouterHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["115"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["96"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["59","63","77","81","84"],"fullExpression":"logger.debug(\"SidecarRouterHandler is constructed\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["70"],"fullExpression":"logger.trace(\"SidecarRouterHandler.handleRequest ends with calling RouterHandler\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["115"],"fullExpression":"logger.info(\"SidecarRouterHandler is reloaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["59","63","77","81","84"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["68","70"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"trace","lineNumber":["68"],"fullExpression":"logger.trace(\"SidecarRouterHandler.handleRequest serviceId {} and serviceUrl {}.\", serviceId, serviceUrl)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["47"],"fullExpression":"LoggerFactory.getLogger(SidecarRouterHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"peekFirst()","methodName":"peekFirst","lineNumber":["66"],"fullExpression":"serviceIdHeader.peekFirst()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["65","67","74"],"fullExpression":"httpServerExchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestScheme()","methodName":"getRequestScheme","lineNumber":["80"],"fullExpression":"httpServerExchange.getRequestScheme()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/rest/Pet.java":[{"declaringType":"com.networknt.client.rest.Pet","methodSignature":"toIndentedString(java.lang.Object)","methodName":"toIndentedString","lineNumber":["97","98","99"],"fullExpression":"toIndentedString(name)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/resource/src/main/java/com/networknt/resource/PathResourceHandler.java":[{"declaringType":"io.undertow.server.handlers.PathHandler","methodSignature":"handleRequest(io.undertow.server.HttpServerExchange)","methodName":"handleRequest","lineNumber":["54"],"fullExpression":"pathHandler.handleRequest(httpServerExchange)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler/src/main/java/com/networknt/handler/ResponseInjectionConfig.java":[{"declaringType":"com.networknt.handler.ResponseInjectionConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["76"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ResponseInjectionConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["32","45","59"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["89"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["18"],"fullExpression":"LoggerFactory.getLogger(ResponseInjectionConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ResponseInjectionConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["33","46","60"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/Snapshot.java":[{"declaringType":"io.dropwizard.metrics.Snapshot","methodSignature":"getValue(double)","methodName":"getValue","lineNumber":["54","63","72","81","90","99"],"fullExpression":"getValue(0.5)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/com/networknt/metrics/MetricsConfig.java":[{"declaringType":"com.networknt.metrics.MetricsConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["80","93"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.metrics.MetricsConfig","methodSignature":"setServerProtocol(java.lang.String)","methodName":"setServerProtocol","lineNumber":["224"],"fullExpression":"setServerProtocol((String) object)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.metrics.MetricsConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["219","221","229","231","233","235","237","239","241","243","245","247"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/ScheduledReporterTest.java":[{"declaringType":"org.mockito.Mockito","methodSignature":"times(int)","methodName":"times","lineNumber":["83"],"fullExpression":"times(2)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/logger-handler/src/main/java/com/networknt/logging/handler/LoggerPostHandler.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.String)","methodName":"getLogger","lineNumber":["105"],"fullExpression":"LoggerFactory.getLogger(name)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["171","211"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Logger","methodSignature":"getLevel()","methodName":"getLevel","lineNumber":["106"],"fullExpression":"logger.getLevel()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.logging.handler.LoggerPostHandler","methodSignature":"postSpringBootLogger(java.lang.String, java.lang.String)","methodName":"postSpringBootLogger","lineNumber":["134"],"fullExpression":"postSpringBootLogger(name, level)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["86","108"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Level","methodSignature":"valueOf(java.lang.String)","methodName":"valueOf","lineNumber":["104"],"fullExpression":"Level.valueOf(map.get(\"level\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["168","206","207","208"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["87","110"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["159","197"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["168","206","207","208"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["167","205"],"fullExpression":"new ClientRequest().setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"getFirst()","methodName":"getFirst","lineNumber":["81"],"fullExpression":"passThroughObject.getFirst()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.logging.handler.LoggerPostHandler","methodSignature":"getFrameworkLoggers(java.lang.String)","methodName":"getFrameworkLoggers","lineNumber":["180"],"fullExpression":"getFrameworkLoggers(body)","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Logger","methodSignature":"setLevel(ch.qos.logback.classic.Level)","methodName":"setLevel","lineNumber":["106"],"fullExpression":"logger.setLevel(level)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["167","205"],"fullExpression":"new ClientRequest().setMethod(Methods.GET).setPath(requestPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.logging.handler.LoggerPostHandler","methodSignature":"postBackendLogger(java.util.List)","methodName":"postBackendLogger","lineNumber":["84"],"fullExpression":"postBackendLogger(loggers)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["79"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/Clock.java":[{"declaringType":"io.dropwizard.metrics.Clock","methodSignature":"getTime()","methodName":"getTime","lineNumber":["44"],"fullExpression":"this.getTime()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/status/src/test/java/com/networknt/status/StatusDefaultTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["97"],"fullExpression":"Assert.assertNotNull(meta.get(\"metaKey\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"readValue(java.lang.String, com.fasterxml.jackson.core.type.TypeReference<T>)","methodName":"readValue","lineNumber":["90"],"fullExpression":"mapper.readValue(expected, new TypeReference<HashMap<String, Object>>() {\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["92","93","94","95","99"],"fullExpression":"Assert.assertEquals(deSerialized.get(\"statusCode\"), 400)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/logger-handler/src/main/java/com/networknt/logging/handler/LoggerGetNameHandler.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.String)","methodName":"getLogger","lineNumber":["55"],"fullExpression":"LoggerFactory.getLogger(loggerName)","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Level","methodSignature":"toString()","methodName":"toString","lineNumber":["58"],"fullExpression":"logger.getLevel().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Logger","methodSignature":"getLevel()","methodName":"getLevel","lineNumber":["58"],"fullExpression":"logger.getLevel()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["60"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Logger","methodSignature":"getName()","methodName":"getName","lineNumber":["57"],"fullExpression":"logger.getName()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["61"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getQueryParameters()","methodName":"getQueryParameters","lineNumber":["50"],"fullExpression":"exchange.getQueryParameters()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/UniformSnapshotTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"offset(java.lang.Double)","methodName":"offset","lineNumber":["36","42","62","67","72","77","82","87","141"],"fullExpression":"offset(0.1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["116"],"fullExpression":"assertThat(output.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["116"],"fullExpression":"assertThat(output.toString()).isEqualTo(String.format(\"1%n2%n3%n4%n5%n\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/simplepool/undertow/SimpleClientConnection.java":[{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["56"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getLocalAddress()","methodName":"getLocalAddress","lineNumber":["50"],"fullExpression":"connection.getLocalAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"isMultiplexingSupported()","methodName":"isMultiplexingSupported","lineNumber":["45"],"fullExpression":"connection.isMultiplexingSupported()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"isOpen()","methodName":"isOpen","lineNumber":["35","55"],"fullExpression":"connection.isOpen()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sanitizer/src/test/java/com/networknt/sanitizer/SanitizerHandlerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["102","143"],"fullExpression":"Assert.assertTrue(body.contains(\"<script>alert(\\\\'header test\\\\')</script>\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["142","183"],"fullExpression":"Assert.assertNotNull(body)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["119","161"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(\"/header\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n        request.getRequestHeaders().put(new HttpString(\"param\"), \"<script>alert('header test')</script>\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, post));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["57","72"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.owasp.encoder.Encode","methodSignature":"forJavaScriptBlock(java.lang.String)","methodName":"forJavaScriptBlock","lineNumber":["224"],"fullExpression":"Encode.forJavaScriptBlock(s3)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["71"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["99","138","179"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["89","90","123","124","125","126","165","166","167"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["101","139","180"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNotEquals(java.lang.Object, java.lang.Object)","methodName":"assertNotEquals","lineNumber":["228"],"fullExpression":"Assert.assertNotEquals(e3, s3)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["89","90","123","124","125","126","165","166","167"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["88","122","164"],"fullExpression":"new ClientRequest().setPath(\"/header\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["94","133","174"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.owasp.encoder.Encode","methodSignature":"forJavaScript(java.lang.String)","methodName":"forJavaScript","lineNumber":["226"],"fullExpression":"Encode.forJavaScript(e3)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["59"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["119","161"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["97","136","177"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["88","122","164"],"fullExpression":"new ClientRequest().setPath(\"/header\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.owasp.encoder.Encode","methodSignature":"forJavaScriptSource(java.lang.String)","methodName":"forJavaScriptSource","lineNumber":["216","217","220","231"],"fullExpression":"Encode.forJavaScriptSource(s1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["50"],"fullExpression":"LoggerFactory.getLogger(SanitizerHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["185","195","198","201","205","209","216","217"],"fullExpression":"Assert.assertEquals(\"<script>alert(\\\\'test\\\\')</script>\", map.get(\"key\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.owasp.encoder.Encode","methodSignature":"forJavaScriptAttribute(java.lang.String)","methodName":"forJavaScriptAttribute","lineNumber":["222"],"fullExpression":"Encode.forJavaScriptAttribute(s3)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/main/java/com/networknt/router/middleware/SAMLTokenHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["130"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["97"],"fullExpression":"logger.debug(exchange.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"remove(java.lang.String)","methodName":"remove","lineNumber":["104","105"],"fullExpression":"exchange.getRequestHeaders().remove(SAMLAssertionHeader)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["120"],"fullExpression":"logger.trace(stackTrace)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["156"],"fullExpression":"logger.debug(\"SAMLBearer Grant Type jwt: \", jwt)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"toString()","methodName":"toString","lineNumber":["97"],"fullExpression":"exchange.toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["111"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["112"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["115"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["111"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.SAMLTokenHandler","methodSignature":"getSAMLBearerToken(java.lang.String, java.lang.String)","methodName":"getSAMLBearerToken","lineNumber":["98"],"fullExpression":"getSAMLBearerToken(exchange.getRequestHeaders().getFirst(SAMLAssertionHeader), exchange.getRequestHeaders().getFirst(JWTAssertionHeader))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["59"],"fullExpression":"LoggerFactory.getLogger(SAMLTokenHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(java.lang.String)","methodName":"getFirst","lineNumber":["98","98"],"fullExpression":"exchange.getRequestHeaders().getFirst(SAMLAssertionHeader)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["98","98","103","104","105"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/audit/src/test/java/com/networknt/audit/AuditHandlerTest.java":[{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["68","111"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["68","111"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(\"/pet\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(HttpStringConstants.TRACEABILITY_ID, \"tid\");\n        request.getRequestHeaders().put(Headers.AUTHORIZATION, \"Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5MDAzNTcwOSwianRpIjoiSTJnSmdBSHN6NzJEV2JWdUFMdUU2QSIsImlhdCI6MTQ3NDY3NTcwOSwibmJmIjoxNDc0Njc1NTg5LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.mue6eh70kGS3Nt2BCYz7ViqwO7lh_4JSFwcHYdJMY6VfgKTHhsIGKq2uEDt3zwT56JFAePwAxENMGUTGvgceVneQzyfQsJeVGbqw55E9IfM_uSM-YcHwTfR7eSLExN4pbqzVDI353sSOvXxA98ZtJlUZKgXNE1Ngun3XFORCRIB_eH8B0FY_nT_D1Dq2WJrR-re-fbR6_va95vwoUdCofLRa4IpDfXXx19ZlAtfiVO44nw6CS8O87eGfAm7rCMZIzkWlCOFWjNHnCeRsh7CVdEH34LF-B48beiG5lM7h4N12-EME8_VDefgMjZ8eqs1ICvJMxdIut58oYbdnkwTjkA\");\n        request.getRequestHeaders().put(HttpStringConstants.SCOPE_TOKEN, \"Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5MDAzNTcwOSwianRpIjoiSTJnSmdBSHN6NzJEV2JWdUFMdUU2QSIsImlhdCI6MTQ3NDY3NTcwOSwibmJmIjoxNDc0Njc1NTg5LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.mue6eh70kGS3Nt2BCYz7ViqwO7lh_4JSFwcHYdJMY6VfgKTHhsIGKq2uEDt3zwT56JFAePwAxENMGUTGvgceVneQzyfQsJeVGbqw55E9IfM_uSM-YcHwTfR7eSLExN4pbqzVDI353sSOvXxA98ZtJlUZKgXNE1Ngun3XFORCRIB_eH8B0FY_nT_D1Dq2WJrR-re-fbR6_va95vwoUdCofLRa4IpDfXXx19ZlAtfiVO44nw6CS8O87eGfAm7rCMZIzkWlCOFWjNHnCeRsh7CVdEH34LF-B48beiG5lM7h4N12-EME8_VDefgMjZ8eqs1ICvJMxdIut58oYbdnkwTjkA\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, post));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["86","128"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["72","73","74","75","76","115","116","117","118"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["71","114"],"fullExpression":"new ClientRequest().setMethod(Methods.POST).setPath(\"/pet\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["47"],"fullExpression":"LoggerFactory.getLogger(AuditHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["72","74","76","115","116","118"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["71","114"],"fullExpression":"new ClientRequest().setMethod(Methods.POST)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["83","125"],"fullExpression":"logger.error(\"IOException: \", e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/health-config/src/main/java/com/networknt/health/HealthConfig.java":[{"declaringType":"com.networknt.health.HealthConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["51","67","72"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.health.HealthConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["132","133","135","137","139","141","143"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/Http2ClientPoolTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["156"],"fullExpression":"Assert.assertTrue(hasScopeToken)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodSignature":"none()","methodName":"none","lineNumber":["112"],"fullExpression":"ExpectedException.none()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["227"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setDisableRequireSignature()","methodName":"setDisableRequireSignature","lineNumber":["437"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["133"],"fullExpression":"builder.addHttpListener(7777, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["106","160","189","254","277","311"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_LENGTH, message.length() + \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setIssuedAtToNow()","methodName":"setIssuedAtToNow","lineNumber":["472"],"fullExpression":"claims.setIssuedAtToNow()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolTest","methodSignature":"getJwtFromAuthorization(java.lang.String)","methodName":"getJwtFromAuthorization","lineNumber":["434"],"fullExpression":"getJwtFromAuthorization(authorization)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"isOpen()","methodName":"isOpen","lineNumber":["261","291","318"],"fullExpression":"connection.isOpen()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["393"],"fullExpression":"IoUtils.safeClose(stream)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipAllValidators()","methodName":"setSkipAllValidators","lineNumber":["437"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setStringListClaim(java.lang.String, java.util.List<java.lang.String>)","methodName":"setStringListClaim","lineNumber":["480"],"fullExpression":"claims.setStringListClaim(\"scope\", scope)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setIoThreads(int)","methodName":"setIoThreads","lineNumber":["138"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolTest","methodSignature":"getJwt(int)","methodName":"getJwt","lineNumber":["185"],"fullExpression":"getJwt(5)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"now()","methodName":"now","lineNumber":["447"],"fullExpression":"NumericDate.now()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolTest","methodSignature":"isTokenExpired(java.lang.String)","methodName":"isTokenExpired","lineNumber":["158"],"fullExpression":"isTokenExpired(scopeToken)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setExpirationTime(org.jose4j.jwt.NumericDate)","methodName":"setExpirationTime","lineNumber":["462"],"fullExpression":"claims.setExpirationTime(NumericDate.fromMilliseconds(System.currentTimeMillis() + expiredInSeconds * 1000))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["253","276","310"],"fullExpression":"new ClientRequest().setPath(MESSAGE)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setStatusCode(int)","methodName":"setStatusCode","lineNumber":["105"],"fullExpression":"exchange.setStatusCode(StatusCodes.OK)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["543"],"fullExpression":"logger.error(\"Failed to retrieve private key from keystore\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(boolean)","methodName":"assertFalse","lineNumber":["159"],"fullExpression":"Assert.assertFalse(expired)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"getExpirationTime()","methodName":"getExpirationTime","lineNumber":["447"],"fullExpression":"jwtClaims.getExpirationTime()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolTest","methodSignature":"getJwt(org.jose4j.jwt.JwtClaims)","methodName":"getJwt","lineNumber":["463"],"fullExpression":"getJwt(claims)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["253","276","310"],"fullExpression":"new ClientRequest().setPath(MESSAGE).setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["451","539"],"fullExpression":"logger.error(\"MalformedClaimException:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setWorkerThreads(int)","methodName":"setWorkerThreads","lineNumber":["138"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(MESSAGE, exchange -> {\n    sendMessage(exchange);\n}).addExactPath(SLOW_MESSAGE, exchange -> {\n    Thread.sleep(20);\n    sendMessage(exchange);\n}).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(SLOW, exchange -> exchange.getRequestReceiver().receiveFullString((exchange2, message) -> {\n    try {\n        if (slowCount < 2) {\n            Thread.sleep(4000);\n        }\n    } catch (InterruptedException e) {\n    }\n    exchange2.getResponseSender().send(message);\n}))).setWorkerThreads(200)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setAudience(java.lang.String)","methodName":"setAudience","lineNumber":["469"],"fullExpression":"claims.setAudience(\"urn:com.networknt\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setBufferSize(int)","methodName":"setBufferSize","lineNumber":["138"],"fullExpression":"builder.setBufferSize(1024 * 16)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"setPayload(java.lang.String)","methodName":"setPayload","lineNumber":["512"],"fullExpression":"jws.setPayload(claims.toJson())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"add(io.undertow.util.HttpString, java.lang.String)","methodName":"add","lineNumber":["256","279","313"],"fullExpression":"request.getRequestHeaders().add(Headers.CONNECTION, Headers.CLOSE.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setClaim(java.lang.String, java.lang.Object)","methodName":"setClaim","lineNumber":["474","476","477","478"],"fullExpression":"claims.setClaim(\"version\", \"1.0\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["155","157"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["261","291","318"],"fullExpression":"Assert.assertEquals(false, connection.isOpen())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumer","methodSignature":"process(java.lang.String)","methodName":"process","lineNumber":["443"],"fullExpression":"consumer.process(jwt)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolTest","methodSignature":"getPrivateKey(java.lang.String, java.lang.String, java.lang.String)","methodName":"getPrivateKey","lineNumber":["503"],"fullExpression":"getPrivateKey(\"/config/primary.jks\", \"password\", \"selfsigned\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["138"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(MESSAGE, exchange -> {\n    sendMessage(exchange);\n}).addExactPath(SLOW_MESSAGE, exchange -> {\n    Thread.sleep(20);\n    sendMessage(exchange);\n}).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(SLOW, exchange -> exchange.getRequestReceiver().receiveFullString((exchange2, message) -> {\n    try {\n        if (slowCount < 2) {\n            Thread.sleep(4000);\n        }\n    } catch (InterruptedException e) {\n    }\n    exchange2.getResponseSender().send(message);\n}))).setWorkerThreads(200).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKey(java.security.Key)","methodName":"setKey","lineNumber":["515"],"fullExpression":"jws.setKey(privateKey)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKeyIdHeaderValue(java.lang.String)","methodName":"setKeyIdHeaderValue","lineNumber":["516"],"fullExpression":"jws.setKeyIdHeaderValue(\"100\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["106","160","189"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["107","161","169","190","200","210"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["135","138","138","138"],"fullExpression":"builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpsListener(int, java.lang.String, javax.net.ssl.SSLContext)","methodName":"addHttpsListener","lineNumber":["132"],"fullExpression":"builder.addHttpsListener(7778, \"localhost\", sslContext)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.PathHandler","methodSignature":"addExactPath(java.lang.String, io.undertow.server.HttpHandler)","methodName":"addExactPath","lineNumber":["145","145","145","145","145","145","145","145"],"fullExpression":"new PathHandler().addExactPath(MESSAGE, exchange -> {\n    sendMessage(exchange);\n}).addExactPath(SLOW_MESSAGE, exchange -> {\n    Thread.sleep(20);\n    sendMessage(exchange);\n}).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(SLOW, exchange -> exchange.getRequestReceiver().receiveFullString((exchange2, message) -> {\n    try {\n        if (slowCount < 2) {\n            Thread.sleep(4000);\n        }\n    } catch (InterruptedException e) {\n    }\n    exchange2.getResponseSender().send(message);\n}))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["215"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolTest","methodSignature":"callApiAsyncMultiThread(int)","methodName":"callApiAsyncMultiThread","lineNumber":["328","340","352"],"fullExpression":"callApiAsyncMultiThread(4)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["108","169","200","210"],"fullExpression":"sender.send(message)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtContext","methodSignature":"getJwtClaims()","methodName":"getJwtClaims","lineNumber":["444"],"fullExpression":"jwtContext.getJwtClaims()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"fromMilliseconds(long)","methodName":"fromMilliseconds","lineNumber":["462"],"fullExpression":"NumericDate.fromMilliseconds(System.currentTimeMillis() + expiredInSeconds * 1000)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolTest","methodSignature":"createSSLContext(java.security.KeyStore, java.security.KeyStore, boolean)","methodName":"createSSLContext","lineNumber":["131"],"fullExpression":"createSSLContext(loadKeyStore(SERVER_KEY_STORE), loadKeyStore(SERVER_TRUST_STORE), false)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["138"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(MESSAGE, exchange -> {\n    sendMessage(exchange);\n}).addExactPath(SLOW_MESSAGE, exchange -> {\n    Thread.sleep(20);\n    sendMessage(exchange);\n}).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(SLOW, exchange -> exchange.getRequestReceiver().receiveFullString((exchange2, message) -> {\n    try {\n        if (slowCount < 2) {\n            Thread.sleep(4000);\n        }\n    } catch (InterruptedException e) {\n    }\n    exchange2.getResponseSender().send(message);\n})))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["256","279","313"],"fullExpression":"Headers.CLOSE.toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["437"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification().build()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolTest","methodSignature":"sendMessage(io.undertow.server.HttpServerExchange)","methodName":"sendMessage","lineNumber":["147","151","153"],"fullExpression":"sendMessage(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolTest","methodSignature":"randInt(int, int)","methodName":"randInt","lineNumber":["176","356"],"fullExpression":"randInt(1, 3)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["329","341","354"],"fullExpression":"logger.info(\"called times: \" + i)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setNotBeforeMinutesInThePast(float)","methodName":"setNotBeforeMinutesInThePast","lineNumber":["473"],"fullExpression":"claims.setNotBeforeMinutesInThePast(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["254","256","277","279","311","313"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolTest","methodSignature":"loadKeyStore(java.lang.String)","methodName":"loadKeyStore","lineNumber":["131","131"],"fullExpression":"loadKeyStore(SERVER_KEY_STORE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"getValue()","methodName":"getValue","lineNumber":["447","447"],"fullExpression":"NumericDate.now().getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"shutdown()","methodName":"shutdown","lineNumber":["221"],"fullExpression":"worker.shutdown()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Xnio","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["123"],"fullExpression":"Xnio.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setIssuer(java.lang.String)","methodName":"setIssuer","lineNumber":["468"],"fullExpression":"claims.setIssuer(\"urn:com:networknt:oauth2:v1\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolTest","methodSignature":"createClient()","methodName":"createClient","lineNumber":["248","271","305"],"fullExpression":"createClient()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipSignatureVerification()","methodName":"setSkipSignatureVerification","lineNumber":["437"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"toJson()","methodName":"toJson","lineNumber":["512"],"fullExpression":"claims.toJson()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolTest","methodSignature":"createClient(org.xnio.OptionMap)","methodName":"createClient","lineNumber":["238"],"fullExpression":"createClient(OptionMap.EMPTY)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setExpirationTimeMinutesInTheFuture(float)","methodName":"setExpirationTimeMinutesInTheFuture","lineNumber":["470"],"fullExpression":"claims.setExpirationTimeMinutesInTheFuture(10)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setGeneratedJwtId()","methodName":"setGeneratedJwtId","lineNumber":["471"],"fullExpression":"claims.setGeneratedJwtId()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolTest","methodSignature":"callApiAsync()","methodName":"callApiAsync","lineNumber":["301"],"fullExpression":"callApiAsync()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setSocketOption(org.xnio.Option<T>, T)","methodName":"setSocketOption","lineNumber":["138"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"getCompactSerialization()","methodName":"getCompactSerialization","lineNumber":["524"],"fullExpression":"jws.getCompactSerialization()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["129"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestReceiver()","methodName":"getRequestReceiver","lineNumber":["166","172","197","203"],"fullExpression":"exchange.getRequestReceiver()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolTest","methodSignature":"getTestClaims()","methodName":"getTestClaims","lineNumber":["461"],"fullExpression":"getTestClaims()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Receiver","methodSignature":"receiveFullString(io.undertow.io.Receiver.FullStringCallback)","methodName":"receiveFullString","lineNumber":["166","172","197","203"],"fullExpression":"exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setAlgorithmHeaderValue(java.lang.String)","methodName":"setAlgorithmHeaderValue","lineNumber":["519"],"fullExpression":"jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/SharedMetricRegistries.java":[{"declaringType":"io.dropwizard.metrics.SharedMetricRegistries","methodSignature":"getOrCreate(java.lang.String)","methodName":"getOrCreate","lineNumber":["64","79"],"fullExpression":"getOrCreate(name)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/Http2ClientTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["145","505","575","603","733","783"],"fullExpression":"Assert.assertTrue(hasScopeToken)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","methodName":"expect","lineNumber":["256"],"fullExpression":"expectedException.expect(IllegalStateException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodSignature":"none()","methodName":"none","lineNumber":["101"],"fullExpression":"ExpectedException.none()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["216"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["122"],"fullExpression":"builder.addHttpListener(7777, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["317","380","456"],"fullExpression":"Assert.assertEquals(200, clientResponse.getResponseCode())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"getXnio()","methodName":"getXnio","lineNumber":["328","402","729","746","758","770"],"fullExpression":"worker.getXnio()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["95","149","178","248","249","263","264","287","288","313","314","336","337","410","411","412","474","497","539","561","591"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_LENGTH, message.length() + \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"isOpen()","methodName":"isOpen","lineNumber":["481","510","546","733","783"],"fullExpression":"connection.isOpen()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["385","461","483","512","548","735","785"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setIoThreads(int)","methodName":"setIoThreads","lineNumber":["127"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNull(java.lang.Object)","methodName":"assertNull","lineNumber":["231"],"fullExpression":"Assert.assertNull(request.getRequestHeaders().getFirst(Headers.AUTHORIZATION))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"setResponseListener(io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>)","methodName":"setResponseListener","lineNumber":["342","417"],"fullExpression":"result.setResponseListener(new ClientCallback<ClientExchange>() {\n\n    @Override\n    public void completed(ClientExchange result) {\n        new StringReadChannelListener(Http2Client.BUFFER_POOL) {\n\n            @Override\n            protected void stringDone(String string) {\n                responses.add(string);\n                latch.countDown();\n            }\n\n            @Override\n            protected void error(IOException e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n        }.setup(result.getResponseChannel());\n    }\n\n    @Override\n    public void failed(IOException e) {\n        e.printStackTrace();\n        latch.countDown();\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["229","237","247","262","286","312","335","409","473","496","538","560","590"],"fullExpression":"new ClientRequest().setMethod(Methods.POST).setPath(POST)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setStatusCode(int)","methodName":"setStatusCode","lineNumber":["94"],"fullExpression":"exchange.setStatusCode(StatusCodes.OK)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientTest","methodSignature":"randInt(int, int)","methodName":"randInt","lineNumber":["165","640"],"fullExpression":"randInt(1, 3)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(boolean)","methodName":"assertFalse","lineNumber":["148"],"fullExpression":"Assert.assertFalse(expired)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientTest","methodSignature":"callApiAsync()","methodName":"callApiAsync","lineNumber":["520"],"fullExpression":"callApiAsync()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["229","237","247","262","286","312","335","409","473","496","538","560","590"],"fullExpression":"new ClientRequest().setMethod(Methods.POST)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setWorkerThreads(int)","methodName":"setWorkerThreads","lineNumber":["127"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(MESSAGE, exchange -> {\n    sendMessage(exchange);\n}).addExactPath(SLOW_MESSAGE, exchange -> {\n    Thread.sleep(20);\n    sendMessage(exchange);\n}).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(SLOW, exchange -> exchange.getRequestReceiver().receiveFullString((exchange2, message) -> {\n    try {\n        if (slowCount < 2) {\n            Thread.sleep(4000);\n        }\n    } catch (InterruptedException e) {\n    }\n    exchange2.getResponseSender().send(message);\n}))).setWorkerThreads(200)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setBufferSize(int)","methodName":"setBufferSize","lineNumber":["127"],"fullExpression":"builder.setBufferSize(1024 * 16)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"add(io.undertow.util.HttpString, java.lang.String)","methodName":"add","lineNumber":["476","499","541"],"fullExpression":"request.getRequestHeaders().add(Headers.CONNECTION, Headers.CLOSE.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["144","146"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["239","382","458","481","510","529","546"],"fullExpression":"Assert.assertEquals(\"Bearer token\", request.getRequestHeaders().getFirst(Headers.AUTHORIZATION))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["127"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(MESSAGE, exchange -> {\n    sendMessage(exchange);\n}).addExactPath(SLOW_MESSAGE, exchange -> {\n    Thread.sleep(20);\n    sendMessage(exchange);\n}).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(SLOW, exchange -> exchange.getRequestReceiver().receiveFullString((exchange2, message) -> {\n    try {\n        if (slowCount < 2) {\n            Thread.sleep(4000);\n        }\n    } catch (InterruptedException e) {\n    }\n    exchange2.getResponseSender().send(message);\n}))).setWorkerThreads(200).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["95","149","178"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["96","150","158","179","189","199"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["124","127","127","127"],"fullExpression":"builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["330","404","731","748","760","772","781","794"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"sendRequest(io.undertow.client.ClientRequest, io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>)","methodName":"sendRequest","lineNumber":["338","413"],"fullExpression":"connection.sendRequest(request, new ClientCallback<ClientExchange>() {\n\n    @Override\n    public void completed(ClientExchange result) {\n        new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());\n        result.setResponseListener(new ClientCallback<ClientExchange>() {\n\n            @Override\n            public void completed(ClientExchange result) {\n                new StringReadChannelListener(Http2Client.BUFFER_POOL) {\n\n                    @Override\n                    protected void stringDone(String string) {\n                        responses.add(string);\n                        latch.countDown();\n                    }\n\n                    @Override\n                    protected void error(IOException e) {\n                        e.printStackTrace();\n                        latch.countDown();\n                    }\n                }.setup(result.getResponseChannel());\n            }\n\n            @Override\n            public void failed(IOException e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n        });\n    }\n\n    @Override\n    public void failed(IOException e) {\n        e.printStackTrace();\n        latch.countDown();\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpsListener(int, java.lang.String, javax.net.ssl.SSLContext)","methodName":"addHttpsListener","lineNumber":["121"],"fullExpression":"builder.addHttpsListener(7778, \"localhost\", sslContext)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.PathHandler","methodSignature":"addExactPath(java.lang.String, io.undertow.server.HttpHandler)","methodName":"addExactPath","lineNumber":["134","134","134","134","134","134","134","134"],"fullExpression":"new PathHandler().addExactPath(MESSAGE, exchange -> {\n    sendMessage(exchange);\n}).addExactPath(SLOW_MESSAGE, exchange -> {\n    Thread.sleep(20);\n    sendMessage(exchange);\n}).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(SLOW, exchange -> exchange.getRequestReceiver().receiveFullString((exchange2, message) -> {\n    try {\n        if (slowCount < 2) {\n            Thread.sleep(4000);\n        }\n    } catch (InterruptedException e) {\n    }\n    exchange2.getResponseSender().send(message);\n}))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["204"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["97","158","189","199"],"fullExpression":"sender.send(message)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodSignature":"expectMessage(java.lang.String)","methodName":"expectMessage","lineNumber":["257"],"fullExpression":"expectedException.expectMessage(\"circuit is opened.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientTest","methodSignature":"sendMessage(io.undertow.server.HttpServerExchange)","methodName":"sendMessage","lineNumber":["136","140","142"],"fullExpression":"sendMessage(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["127"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(MESSAGE, exchange -> {\n    sendMessage(exchange);\n}).addExactPath(SLOW_MESSAGE, exchange -> {\n    Thread.sleep(20);\n    sendMessage(exchange);\n}).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(SLOW, exchange -> exchange.getRequestReceiver().receiveFullString((exchange2, message) -> {\n    try {\n        if (slowCount < 2) {\n            Thread.sleep(4000);\n        }\n    } catch (InterruptedException e) {\n    }\n    exchange2.getResponseSender().send(message);\n})))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["476","499","541"],"fullExpression":"Headers.CLOSE.toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["57"],"fullExpression":"LoggerFactory.getLogger(Http2ClientTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["332","406"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(POST);\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        connection.sendRequest(request, new ClientCallback<ClientExchange>() {\n\n            @Override\n            public void completed(ClientExchange result) {\n                new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());\n                result.setResponseListener(new ClientCallback<ClientExchange>() {\n\n                    @Override\n                    public void completed(ClientExchange result) {\n                        new StringReadChannelListener(Http2Client.BUFFER_POOL) {\n\n                            @Override\n                            protected void stringDone(String string) {\n                                responses.add(string);\n                                latch.countDown();\n                            }\n\n                            @Override\n                            protected void error(IOException e) {\n                                e.printStackTrace();\n                                latch.countDown();\n                            }\n                        }.setup(result.getResponseChannel());\n                    }\n\n                    @Override\n                    public void failed(IOException e) {\n                        e.printStackTrace();\n                        latch.countDown();\n                    }\n                });\n            }\n\n            @Override\n            public void failed(IOException e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n        });\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["613","625","638"],"fullExpression":"logger.info(\"called times: \" + i)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["317"],"fullExpression":"clientResponse.getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["231","239","248","249","263","264","287","288","313","314","336","337","410","411","412","474","476","497","499","539","541","561","591"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"shutdown()","methodName":"shutdown","lineNumber":["210"],"fullExpression":"worker.shutdown()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"fail()","methodName":"fail","lineNumber":["269","273","293","298","751","763","775"],"fullExpression":"fail()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getRequestChannel()","methodName":"getRequestChannel","lineNumber":["341","416"],"fullExpression":"result.getRequestChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.StringWriteChannelListener","methodSignature":"setup(org.xnio.channels.StreamSinkChannel)","methodName":"setup","lineNumber":["341","416"],"fullExpression":"new StringWriteChannelListener(postMessage).setup(result.getRequestChannel())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["231","239"],"fullExpression":"request.getRequestHeaders().getFirst(Headers.AUTHORIZATION)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Xnio","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["112"],"fullExpression":"Xnio.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getResponseChannel()","methodName":"getResponseChannel","lineNumber":["358","434"],"fullExpression":"result.getResponseChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["332","406"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientTest","methodSignature":"callApiAsyncMultiThread(int)","methodName":"callApiAsyncMultiThread","lineNumber":["612","624","636"],"fullExpression":"callApiAsyncMultiThread(4)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setSocketOption(org.xnio.Option<T>, T)","methodName":"setSocketOption","lineNumber":["127"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["118"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestReceiver()","methodName":"getRequestReceiver","lineNumber":["155","161","186","192"],"fullExpression":"exchange.getRequestReceiver()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Receiver","methodSignature":"receiveFullString(io.undertow.io.Receiver.FullStringCallback)","methodName":"receiveFullString","lineNumber":["155","161","186","192"],"fullExpression":"exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.StringReadChannelListener","methodSignature":"setup(org.xnio.channels.StreamSourceChannel)","methodName":"setup","lineNumber":["345","420"],"fullExpression":"new StringReadChannelListener(Http2Client.BUFFER_POOL) {\n\n    @Override\n    protected void stringDone(String string) {\n        responses.add(string);\n        latch.countDown();\n    }\n\n    @Override\n    protected void error(IOException e) {\n        e.printStackTrace();\n        latch.countDown();\n    }\n}.setup(result.getResponseChannel())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/status/src/main/java/com/networknt/status/Status.java":[{"declaringType":"com.networknt.status.Status","methodSignature":"getMetadata()","methodName":"getMetadata","lineNumber":["289","291"],"fullExpression":"getMetadata()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.Status","methodSignature":"getStatusCode()","methodName":"getStatusCode","lineNumber":["281","293"],"fullExpression":"getStatusCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.Status","methodSignature":"getMessage()","methodName":"getMessage","lineNumber":["284"],"fullExpression":"getMessage()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.Status","methodSignature":"shouldShowMetadata()","methodName":"shouldShowMetadata","lineNumber":["274"],"fullExpression":"shouldShowMetadata()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.Status","methodSignature":"toStringConditionally(boolean, boolean, boolean)","methodName":"toStringConditionally","lineNumber":["263","274"],"fullExpression":"toStringConditionally(true, true, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.Status","methodSignature":"getSeverity()","methodName":"getSeverity","lineNumber":["295","297"],"fullExpression":"getSeverity()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.Status","methodSignature":"getCode()","methodName":"getCode","lineNumber":["282"],"fullExpression":"getCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.Status","methodSignature":"getDescription()","methodName":"getDescription","lineNumber":["287"],"fullExpression":"getDescription()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["42"],"fullExpression":"LoggerFactory.getLogger(Status.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.Status","methodSignature":"shouldShowMessage()","methodName":"shouldShowMessage","lineNumber":["274"],"fullExpression":"shouldShowMessage()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["293"],"fullExpression":"logger.error(\"cannot parse metadata for status:\" + getStatusCode(), e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.Status","methodSignature":"shouldShowDescription()","methodName":"shouldShowDescription","lineNumber":["274"],"fullExpression":"shouldShowDescription()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ldap-util/src/test/java/com/networknt/ldap/LdapUtilTest.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["9"],"fullExpression":"LoggerFactory.getLogger(LdapUtilTest.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/audit/src/main/java/com/networknt/audit/AuditHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["353"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["119","187"],"fullExpression":"logger.debug(\"AuditHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["280"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["194"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditHandler","methodSignature":"auditQueryParameters(io.undertow.server.HttpServerExchange, java.util.Map<java.lang.String, java.lang.Object>)","methodName":"auditQueryParameters","lineNumber":["227"],"fullExpression":"auditQueryParameters(exchange, auditMap)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditHandler","methodSignature":"auditServiceId(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"auditServiceId","lineNumber":["138"],"fullExpression":"auditServiceId(auditMap)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ExchangeCompletionListener.NextListener","methodSignature":"proceed()","methodName":"proceed","lineNumber":["181"],"fullExpression":"nextListener.proceed()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditHandler","methodSignature":"auditPathParameters(io.undertow.server.HttpServerExchange, java.util.Map<java.lang.String, java.lang.Object>)","methodName":"auditPathParameters","lineNumber":["230"],"fullExpression":"auditPathParameters(exchange, auditMap)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["119","187"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"requestCookies()","methodName":"requestCookies","lineNumber":["326"],"fullExpression":"exchange.requestCookies()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditHandler","methodSignature":"auditRequestCookies(io.undertow.server.HttpServerExchange, java.util.Map<java.lang.String, java.lang.Object>)","methodName":"auditRequestCookies","lineNumber":["224"],"fullExpression":"auditRequestCookies(exchange, auditMap)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["77"],"fullExpression":"LoggerFactory.getLogger(AuditHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(java.lang.String)","methodName":"getFirst","lineNumber":["193"],"fullExpression":"exchange.getRequestHeaders().getFirst(name)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["257","287"],"fullExpression":"logger.error(\"Incorrect request content type \" + contentType)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditHandler","methodSignature":"auditFields(java.util.Map<java.lang.String, java.lang.Object>, java.util.Map<java.lang.String, java.lang.Object>)","methodName":"auditFields","lineNumber":["130"],"fullExpression":"auditFields(auditInfo, auditMap)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.Cookie","methodSignature":"getName()","methodName":"getName","lineNumber":["331"],"fullExpression":"cookie.getName()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.Cookie","methodSignature":"getValue()","methodName":"getValue","lineNumber":["332"],"fullExpression":"cookie.getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["99","372"],"fullExpression":"logger.info(\"AuditHandler is loaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["194"],"fullExpression":"logger.trace(\"header name = \" + name + \" header value = \" + value)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditHandler","methodSignature":"next(io.undertow.server.HttpServerExchange)","methodName":"next","lineNumber":["188"],"fullExpression":"next(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["179"],"fullExpression":"logger.error(\"ExchangeListener Throwable\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditHandler","methodSignature":"auditHeader(io.undertow.server.HttpServerExchange, java.util.Map<java.lang.String, java.lang.Object>)","methodName":"auditHeader","lineNumber":["213"],"fullExpression":"auditHeader(exchange, auditMap)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["250","280"],"fullExpression":"exchange.getRequestHeaders().getFirst(Headers.CONTENT_TYPE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["99","372"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditHandler","methodSignature":"auditRequestBody(io.undertow.server.HttpServerExchange, java.util.Map<java.lang.String, java.lang.Object>)","methodName":"auditRequestBody","lineNumber":["221"],"fullExpression":"auditRequestBody(exchange, auditMap)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"addExchangeCompleteListener(io.undertow.server.ExchangeCompletionListener)","methodName":"addExchangeCompleteListener","lineNumber":["142"],"fullExpression":"exchange.addExchangeCompleteListener((exchange1, nextListener) -> {\n    // response status code and response time.\n    try {\n        if (config.isStatusCode()) {\n            auditMap.put(STATUS_CODE, exchange1.getStatusCode());\n        }\n        if (config.isResponseTime()) {\n            auditMap.put(RESPONSE_TIME, System.currentTimeMillis() - start);\n        }\n        // add additional fields accumulated during the microservice execution\n        // according to the config\n        Map<String, Object> auditInfo1 = exchange.getAttachment(AttachmentConstants.AUDIT_INFO);\n        if (auditInfo1 != null && config.getAuditList() != null) {\n            for (String name : config.getAuditList()) {\n                Object object = auditInfo1.get(name);\n                if (object != null) {\n                    auditMap.put(name, object);\n                }\n            }\n        }\n        // audit the response body.\n        if (config.getAuditList() != null && config.getAuditList().contains(RESPONSE_BODY_KEY)) {\n            auditResponseBody(exchange, auditMap);\n        }\n        try {\n            // audit entries only is it is an error, if auditOnError flag is set\n            if (config.isAuditOnError()) {\n                if (exchange1.getStatusCode() >= 400)\n                    config.getAuditFunc().accept(Config.getInstance().getMapper().writeValueAsString(auditMap));\n            } else {\n                config.getAuditFunc().accept(Config.getInstance().getMapper().writeValueAsString(auditMap));\n            }\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    } catch (Throwable e) {\n        logger.error(\"ExchangeListener Throwable\", e);\n    } finally {\n        nextListener.proceed();\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getStatusCode()","methodName":"getStatusCode","lineNumber":["146","170"],"fullExpression":"exchange1.getStatusCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getPathParameters()","methodName":"getPathParameters","lineNumber":["313"],"fullExpression":"exchange.getPathParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditHandler","methodSignature":"auditResponseBody(io.undertow.server.HttpServerExchange, java.util.Map<java.lang.String, java.lang.Object>)","methodName":"auditResponseBody","lineNumber":["164"],"fullExpression":"auditResponseBody(exchange, auditMap)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getQueryParameters()","methodName":"getQueryParameters","lineNumber":["300"],"fullExpression":"exchange.getQueryParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["193","250"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/main/java/com/networknt/router/OAuthServerGetHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["43"],"fullExpression":"logger.info(\"OAuthServerGetHandler is loaded and it is not secure!!!\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["113"],"fullExpression":"logger.trace(\"matched credential, sending response.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["53"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["113"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["114"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["49"],"fullExpression":"exchange.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["53"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["71"],"fullExpression":"exchange.getRequestHeaders().getFirst(Headers.AUTHORIZATION)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.codec.binary.Base64","methodSignature":"decodeBase64(java.lang.String)","methodName":"decodeBase64","lineNumber":["77"],"fullExpression":"org.apache.commons.codec.binary.Base64.decodeBase64(credentials)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["43"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestURI()","methodName":"getRequestURI","lineNumber":["49"],"fullExpression":"exchange.getRequestURI()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["49"],"fullExpression":"exchange.getRequestMethod().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getQueryParameters()","methodName":"getQueryParameters","lineNumber":["55"],"fullExpression":"exchange.getQueryParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["32"],"fullExpression":"LoggerFactory.getLogger(OAuthServerGetHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["71"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["80","86","116","120"],"fullExpression":"logger.error(\"Invalid authorization header \" + auth.substring(0, 10))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sanitizer/src/main/java/org/owasp/encoder/EncoderWrapper.java":[{"declaringType":"org.owasp.encoder.EncoderWrapper","methodSignature":"encodeList(java.util.List)","methodName":"encodeList","lineNumber":["42","54"],"fullExpression":"encodeList((List) value)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.owasp.encoder.Encode","methodSignature":"encode(org.owasp.encoder.Encoder, java.lang.String)","methodName":"encode","lineNumber":["60"],"fullExpression":"Encode.encode(encoder, value)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.owasp.encoder.EncoderWrapper","methodSignature":"encodeNode(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"encodeNode","lineNumber":["40","52"],"fullExpression":"encodeNode((Map) value)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.owasp.encoder.EncoderWrapper","methodSignature":"applyEncoding(java.lang.String)","methodName":"applyEncoding","lineNumber":["38","50"],"fullExpression":"applyEncoding((String) value)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/dump/src/main/java/com/networknt/dump/StatusCodeDumper.java":[{"declaringType":"com.networknt.dump.StatusCodeDumper","methodSignature":"putDumpInfoTo(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"putDumpInfoTo","lineNumber":["41"],"fullExpression":"this.putDumpInfoTo(result)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/dump/src/main/java/com/networknt/dump/CookiesDumper.java":[{"declaringType":"com.networknt.dump.CookiesDumper","methodSignature":"dumpCookies(java.lang.Iterable<io.undertow.server.handlers.Cookie>, java.lang.String)","methodName":"dumpCookies","lineNumber":["41","53"],"fullExpression":"dumpCookies(iterable, \"requestCookies\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.Cookie","methodSignature":"getPath()","methodName":"getPath","lineNumber":["71"],"fullExpression":"cookie.getPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.Cookie","methodSignature":"getDomain()","methodName":"getDomain","lineNumber":["70"],"fullExpression":"cookie.getDomain()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.dump.CookiesDumper","methodSignature":"putDumpInfoTo(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"putDumpInfoTo","lineNumber":["42","54"],"fullExpression":"this.putDumpInfoTo(result)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.Cookie","methodSignature":"getName()","methodName":"getName","lineNumber":["65","68","73"],"fullExpression":"cookie.getName()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.Cookie","methodSignature":"getValue()","methodName":"getValue","lineNumber":["68","68"],"fullExpression":"cookie.getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.Cookie","methodSignature":"getExpires()","methodName":"getExpires","lineNumber":["72","72"],"fullExpression":"cookie.getExpires()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/utility/src/test/java/com/networknt/utility/NioUtilsTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["55","63"],"fullExpression":"Assert.assertEquals(s, n)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server/src/test/java/com/networknt/server/TestServer.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["26"],"fullExpression":"LoggerFactory.getLogger(TestServer.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/cors/src/test/java/com/networknt/cors/CorsHttpHandlerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["166"],"fullExpression":"Assert.assertNotNull(header)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["67"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["83"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["67"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["91","94"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["128","164"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["105","141"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["112","113","114","115","148","149","150","151"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["71"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["89"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["91","94"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.cors.CorsHttpHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["63"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["122","158"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNull(java.lang.Object)","methodName":"assertNull","lineNumber":["130"],"fullExpression":"Assert.assertNull(header)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["67"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["111","147"],"fullExpression":"new ClientRequest().setPath(\"/\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["55"],"fullExpression":"LoggerFactory.getLogger(CorsHttpHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(java.lang.String)","methodName":"getFirst","lineNumber":["127","163"],"fullExpression":"headerMap.getFirst(\"Access-Control-Allow-Origin\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["89","89"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/\", exchange -> {\n    exchange.getResponseSender().send(\"OK\");\n}).add(Methods.POST, \"/\", exchange -> {\n    exchange.getResponseSender().send(\"OK\");\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["62","84"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["124","160"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["112","113","114","115","148","149","150","151"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["126","162"],"fullExpression":"reference.get().getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["111","147"],"fullExpression":"new ClientRequest().setPath(\"/\").setMethod(Methods.OPTIONS)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["119","155"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["67"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/consul/src/main/java/com/networknt/consul/client/ConsulClientImpl.java":[{"declaringType":"com.networknt.consul.client.ConsulClientImpl","methodSignature":"isHttp2()","methodName":"isHttp2","lineNumber":["74"],"fullExpression":"isHttp2()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["75","77","79","201","212","215","221"],"fullExpression":"logger.debug(\"consulUrl = {}\", consulUrl)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["96","116","135","154","214"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["307","308","313"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["309"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["74"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"trace","lineNumber":["309"],"fullExpression":"logger.trace(\"The request sent to Consul URI {} - request header: {}, request body is empty\", uri.toString(), request.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["240","241","242"],"fullExpression":"reference.get().getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["307","313"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["83","102","121","140","159","247","255","263"],"fullExpression":"logger.error(\"Invalid URI \" + consulUrl, e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.consul.client.ConsulClientImpl","methodSignature":"convertToConsulService(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"convertToConsulService","lineNumber":["229"],"fullExpression":"convertToConsulService((Map<String, Object>) service.get(\"Service\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["306"],"fullExpression":"new ClientRequest().setMethod(method)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"isOpen()","methodName":"isOpen","lineNumber":["250","258","266","330"],"fullExpression":"connection.isOpen()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"toString()","methodName":"toString","lineNumber":["309"],"fullExpression":"request.toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["250","258","266","330"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"debug","lineNumber":["205","325"],"fullExpression":"logger.debug(\"CONSUL CONNECTION ESTABLISHED: {} from pool and send request to {}\", connection, path)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["75","77","79","201","205","212","215"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["90","110","197"],"fullExpression":"logger.trace(\"checkPass serviceId = {}\", serviceId)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["306"],"fullExpression":"new ClientRequest().setMethod(method).setPath(path)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["57"],"fullExpression":"LoggerFactory.getLogger(ConsulClientImpl.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(java.lang.String)","methodName":"getFirst","lineNumber":["240","241","242"],"fullExpression":"reference.get().getResponseHeaders().getFirst(\"X-Consul-Index\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["249","257","265"],"fullExpression":"logger.error(\"No response from Consul - Terminating connection to Consul\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.consul.client.ConsulClientImpl","methodSignature":"send(io.undertow.client.ClientConnection, io.undertow.util.HttpString, java.lang.String, java.lang.String, java.lang.String)","methodName":"send","lineNumber":["95","115","134","153","206"],"fullExpression":"send(connection, Methods.PUT, path, token, null)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/portal-registry/src/test/java/com/networknt/portal/registry/PortalRegistryHeartbeatManagerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["88","90"],"fullExpression":"assertTrue(heartbeatTimes > lastHeartbeatTimes)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.portal.registry.PortalRegistryHeartbeatManagerTest","methodSignature":"setHeartbeatSwitcher(boolean)","methodName":"setHeartbeatSwitcher","lineNumber":["69","73"],"fullExpression":"setHeartbeatSwitcher(true)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/rate-limit/src/test/java/com/networknt/limit/LimitHandleTemplateTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["43","66"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["48"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["65"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["99","128"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["48"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["90","119"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["73"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["101"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.LimitHandleTemplateTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["44"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["48"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["83"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["90","119"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["89","118"],"fullExpression":"new ClientRequest().setPath(\"/\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["94","123"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["53"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["71"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["73"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["97","126"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["48"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["89","118"],"fullExpression":"new ClientRequest().setPath(\"/\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["48"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["103"],"fullExpression":"Assert.assertEquals(\"OK\", body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["71"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/\", exchange -> {\n    exchange.getResponseSender().send(\"OK\");\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/body/src/test/java/com/networknt/body/BodyStringNoCachingTest.java":[{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["89"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(\"/post\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, post));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["37","59"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["42"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["58"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["42"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["93","94","95"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["68","70"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["93","94","95"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["92"],"fullExpression":"new ClientRequest().setMethod(Methods.POST)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["102"],"fullExpression":"logger.error(\"IOException: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["46"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["64"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["89"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["68","70"],"fullExpression":"exchange.getResponseSender().send(\"nobody\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["105"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["42"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["92"],"fullExpression":"new ClientRequest().setMethod(Methods.POST).setPath(\"/post\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["42"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.body.BodyStringNoCachingTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["38"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["64"],"fullExpression":"Handlers.routing().add(Methods.POST, \"/post\", exchange -> {\n    String bodyString = (String) exchange.getAttachment(AttachmentConstants.REQUEST_BODY_STRING);\n    if (bodyString == null) {\n        exchange.getResponseSender().send(\"nobody\");\n    } else {\n        exchange.getResponseSender().send(bodyString);\n    }\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/consul/src/main/java/com/networknt/consul/ConsulRegistry.java":[{"declaringType":"com.networknt.consul.ConsulRegistry","methodSignature":"lookupConsulService(java.lang.String, java.lang.Long)","methodName":"lookupConsulService","lineNumber":["240"],"fullExpression":"lookupConsulService(serviceName, lastConsulIndexId)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["74"],"fullExpression":"logger.info(\"ConsulRegistry init finish.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["146"],"fullExpression":"logger.trace(\"protocol = \" + protocol + \" serviceName = \" + serviceName + \" tag = \" + tag)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["373","378","466"],"fullExpression":"logger.debug(\"light service notify-service: \" + serviceName)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["404","428"],"fullExpression":"logger.debug(\"Consul ServiceLookupThread Thread - WAKE UP: Woke up from sleep for service {}\", serviceName)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["146","242","283","360"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["436"],"fullExpression":"logger.error(\"ServiceLookupThread fail!\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.consul.ConsulRegistry","methodSignature":"getConsulToken()","methodName":"getConsulToken","lineNumber":["64","85","92","329"],"fullExpression":"getConsulToken()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"debug","lineNumber":["237","306","396","402"],"fullExpression":"logger.debug(\"serviceName = {} lastConsulIndexId = {}\", serviceName, lastConsulIndexId)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["237","253","264","293","298","306","373","378","396","402","404","428","430","466"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.consul.ConsulRegistry","methodSignature":"getConsulConfig()","methodName":"getConsulConfig","lineNumber":["63","68","69","70","86","93","99","108","476"],"fullExpression":"getConsulConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["37"],"fullExpression":"LoggerFactory.getLogger(ConsulRegistry.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.consul.ConsulRegistry","methodSignature":"lookupServiceUpdate(java.lang.String, java.lang.String)","methodName":"lookupServiceUpdate","lineNumber":["405","422"],"fullExpression":"lookupServiceUpdate(protocol, serviceName)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object)","methodName":"error","lineNumber":["312"],"fullExpression":"logger.error(\"Local service cache may be out of date for {} - Consul connection failed\", serviceName)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.consul.ConsulRegistry","methodSignature":"lookupServiceUpdate(java.lang.String, java.lang.String, boolean)","methodName":"lookupServiceUpdate","lineNumber":["152","198"],"fullExpression":"lookupServiceUpdate(protocol, serviceName, false)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ip-whitelist/src/test/java/com/networknt/whitelist/WhitelistHandlerDefaultAllowFalseTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["123","161","199","236"],"fullExpression":"Assert.assertTrue(body.contains(\"ERR10049\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["45","69"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["52"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["68"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["119","157","195","232"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["52"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["110","148","186","223"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["76","79","82","85"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["121","159","197","234"],"fullExpression":"Assert.assertEquals(403, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["103","141","179","216"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["110","148","186","223"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["109","147","185","222"],"fullExpression":"new ClientRequest().setPath(\"/health/com.networknt.petstore-1.0.0\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["114","152","190","227"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["56"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["74"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistHandlerDefaultAllowFalseTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["46"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["76","79","82","85"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["117","155","193","230"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["52"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["109","147","185","222"],"fullExpression":"new ClientRequest().setPath(\"/health/com.networknt.petstore-1.0.0\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["38"],"fullExpression":"LoggerFactory.getLogger(WhitelistHandlerDefaultAllowFalseTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["52"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["74","74","74","74"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/data\", exchange -> {\n    exchange.getResponseSender().send(\"OK\");\n}).add(Methods.GET, \"/default\", exchange -> {\n    exchange.getResponseSender().send(\"OK\");\n}).add(Methods.GET, \"/data/extra\", exchange -> {\n    exchange.getResponseSender().send(\"OK\");\n}).add(Methods.GET, \"/health/com.networknt.petstore-1.0.0\", exchange -> {\n    exchange.getResponseSender().send(\"OK\");\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/info/src/test/java/com/networknt/info/ServerInfoDisabledTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["75","94"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["77"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["93"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["129"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["77"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["120"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["131"],"fullExpression":"Assert.assertEquals(404, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.info.ServerInfoDisabledTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["76"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["120"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["119"],"fullExpression":"new ClientRequest().setPath(\"/v1/server/info\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["124"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["81"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["104"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["127"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["77"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["119"],"fullExpression":"new ClientRequest().setPath(\"/v1/server/info\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["77"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/cluster/src/main/java/com/networknt/cluster/LightCluster.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["49"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["49"],"fullExpression":"logger.info(\"A LightCluster instance is started\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["63","87","98"],"fullExpression":"logger.debug(\"The serviceId cannot be blank\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["72"],"fullExpression":"logger.debug(\"The service: {} cannot be found from service discovery.\", serviceId)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["98","103","108"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["44"],"fullExpression":"LoggerFactory.getLogger(LightCluster.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["117"],"fullExpression":"logger.error(\"URISyntaxExcpetion\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.cluster.LightCluster","methodSignature":"discovery(java.lang.String, java.lang.String, java.lang.String)","methodName":"discovery","lineNumber":["66","92"],"fullExpression":"discovery(protocol, serviceId, tag)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/portal-registry/src/integration/java/com/networknt/portal/registry/PortalRegistryTestIT.java":[{"declaringType":"com.networknt.portal.registry.PortalRegistryTestIT","methodSignature":"getMockUrl(java.lang.String, java.lang.String, int, java.lang.String)","methodName":"getMockUrl","lineNumber":["39"],"fullExpression":"getMockUrl(\"http\", \"192.168.1.119\", 8083, \"MockService\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client-config/src/test/java/com/networknt/client/ClientConfigTest.java":[{"declaringType":"junit.framework.TestCase","methodSignature":"assertEquals(int, int)","methodName":"assertEquals","lineNumber":["86"],"fullExpression":"assertEquals(2, serviceIdAuthServers.size())","currentLayer":0,"declarationInfo":null},{"declaringType":"junit.framework.TestCase","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["57"],"fullExpression":"assertTrue(clientConfig.getTokenConfig() instanceof HashMap)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/MetricName.java":[{"declaringType":"io.dropwizard.metrics.MetricName","methodSignature":"buildName(java.lang.String...)","methodName":"buildName","lineNumber":["179"],"fullExpression":"buildName(parts)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.MetricName","methodSignature":"tagged(java.util.Map<java.lang.String, java.lang.String>)","methodName":"tagged","lineNumber":["130"],"fullExpression":"tagged(add)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.MetricName","methodSignature":"uniqueSortedKeys(java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>)","methodName":"uniqueSortedKeys","lineNumber":["280"],"fullExpression":"uniqueSortedKeys(left, right)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.MetricName","methodSignature":"compareName(java.lang.String, java.lang.String)","methodName":"compareName","lineNumber":["249"],"fullExpression":"compareName(key, o.getKey())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.MetricName","methodSignature":"checkTags(java.util.Map<java.lang.String, java.lang.String>)","methodName":"checkTags","lineNumber":["50"],"fullExpression":"checkTags(tags)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.MetricName","methodSignature":"getKey()","methodName":"getKey","lineNumber":["147","249"],"fullExpression":"part.getKey()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.MetricName","methodSignature":"compareTags(java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>)","methodName":"compareTags","lineNumber":["254"],"fullExpression":"compareTags(tags, o.getTags())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.MetricName","methodSignature":"getTags()","methodName":"getTags","lineNumber":["159","160","254"],"fullExpression":"part.getTags()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config-reload/src/test/java/com/networknt/config/reload/handler/BaseTest.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["55"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["25","50"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["31"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["48"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["31"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["31"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["31"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.reload.handler.BaseTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["27"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["35"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/service/src/main/java/com/networknt/service/ServiceUtil.java":[{"declaringType":"com.networknt.service.ServiceUtil","methodSignature":"constructByNamedParams(java.lang.Class, java.util.Map)","methodName":"constructByNamedParams","lineNumber":["50"],"fullExpression":"constructByNamedParams(Class.forName(entry.getKey()), (Map) entry.getValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.service.ServiceUtil","methodSignature":"constructByParameterizedConstructor(java.lang.Class, java.util.List)","methodName":"constructByParameterizedConstructor","lineNumber":["52"],"fullExpression":"constructByParameterizedConstructor(Class.forName(entry.getKey()), (List) entry.getValue())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/rest/RestClientTemplate.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["35"],"fullExpression":"LoggerFactory.getLogger(RestClientTemplate.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["163","177"],"fullExpression":"logger.error(errorStr + e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/basic-auth/src/test/java/com/networknt/basicauth/JsonUserConfigTest.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["11"],"fullExpression":"LoggerFactory.getLogger(JsonUserConfigTest.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/security/src/test/java/com/networknt/security/JwtIssuerTest.java":[{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setExpirationTimeMinutesInTheFuture(float)","methodName":"setExpirationTimeMinutesInTheFuture","lineNumber":["36","44","53","61","69","77","88","99","107","115","123","131","139","147","155","163","171","179","188","196","208","220","232","244","256","268","281","293","305","317","329","341","353","365","377","389","401","413"],"fullExpression":"claims.setExpirationTimeMinutesInTheFuture(5256000)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server/src/test/java/com/networknt/server/Test1MiddlewareHandler.java":[{"declaringType":"io.undertow.util.AttachmentKey","methodSignature":"create(java.lang.Class<? super T>)","methodName":"create","lineNumber":["28","29"],"fullExpression":"AttachmentKey.create(String.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/security/src/test/java/com/networknt/security/JwtVerifierSingleJwkTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["90","126"],"fullExpression":"Assert.assertTrue(hasScopeToken)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["353","360","377","384","401","408"],"fullExpression":"Assert.assertNotNull(jwt)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["79","116","153","197"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors()).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(API_PETSTORE, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    String requestPath = exchange.getRequestPath();\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0).substring(7);\n    // verify the jwt token with JWK.\n    JwtVerifier jwtVerifier = new JwtVerifier(securityConfig);\n    JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, null, requestPath, null);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"Petstore OK!\"))));\n})).setWorkerThreads(20).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifierSingleJwkTest","methodSignature":"callPetstoreApiAsync()","methodName":"callPetstoreApiAsync","lineNumber":["315"],"fullExpression":"callPetstoreApiAsync()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifierSingleJwkTest","methodSignature":"callMarketApiAsync()","methodName":"callMarketApiAsync","lineNumber":["345"],"fullExpression":"callMarketApiAsync()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["242","255","268","281"],"fullExpression":"server1.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["95","132","162","174","206","218"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["96","133","163","175","207","219"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["77","79","79","79","114","116","116","116","151","153","153","153","195","197","197","197"],"fullExpression":"builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["295","322"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["95","132","162","174","206","218"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpsListener(int, java.lang.String, javax.net.ssl.SSLContext)","methodName":"addHttpsListener","lineNumber":["76","113","150","194"],"fullExpression":"builder.addHttpsListener(7771, \"localhost\", sslContext)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.PathHandler","methodSignature":"addExactPath(java.lang.String, io.undertow.server.HttpHandler)","methodName":"addExactPath","lineNumber":["86","123","160","160","204","204"],"fullExpression":"new PathHandler().addExactPath(API_PETSTORE, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    String requestPath = exchange.getRequestPath();\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0).substring(7);\n    // verify the jwt token with JWK.\n    JwtVerifier jwtVerifier = new JwtVerifier(securityConfig);\n    JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, null, requestPath, null);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"Petstore OK!\"))));\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["89","127"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["104","141","185","229"],"fullExpression":"server1.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setIoThreads(int)","methodName":"setIoThreads","lineNumber":["79","116","153","197"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["79","116","153","197"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors()).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(API_PETSTORE, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    String requestPath = exchange.getRequestPath();\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0).substring(7);\n    // verify the jwt token with JWK.\n    JwtVerifier jwtVerifier = new JwtVerifier(securityConfig);\n    JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, null, requestPath, null);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"Petstore OK!\"))));\n}))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["299","326"],"fullExpression":"new ClientRequest().setPath(API_PETSTORE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["319"],"fullExpression":"logger.trace(\"callMarketApiAsync is called\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["332"],"fullExpression":"response.getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"shutdown()","methodName":"shutdown","lineNumber":["236"],"fullExpression":"worker.shutdown()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["299","326"],"fullExpression":"new ClientRequest().setPath(API_PETSTORE).setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Xnio","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["66"],"fullExpression":"Xnio.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setWorkerThreads(int)","methodName":"setWorkerThreads","lineNumber":["79","116","153","197"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors()).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(API_PETSTORE, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    String requestPath = exchange.getRequestPath();\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0).substring(7);\n    // verify the jwt token with JWK.\n    JwtVerifier jwtVerifier = new JwtVerifier(securityConfig);\n    JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, null, requestPath, null);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"Petstore OK!\"))));\n})).setWorkerThreads(20)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setBufferSize(int)","methodName":"setBufferSize","lineNumber":["79","116","153","197"],"fullExpression":"builder.setBufferSize(1024 * 16)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setSocketOption(org.xnio.Option<T>, T)","methodName":"setSocketOption","lineNumber":["79","116","153","197"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors()).setSocketOption(Options.BACKLOG, 10000)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["72","109","146","190"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["88","91","125","128"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestReceiver()","methodName":"getRequestReceiver","lineNumber":["165","209"],"fullExpression":"exchange.getRequestReceiver()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["335"],"fullExpression":"Assert.assertEquals(\"{\\\"message\\\":\\\"Market OK!\\\"}\", body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Receiver","methodSignature":"receiveFullString(io.undertow.io.Receiver.FullStringCallback)","methodName":"receiveFullString","lineNumber":["165","209"],"fullExpression":"exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5, \"7pGHLozGRXqv2g47T1HQag\");\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/monad-result/src/main/java/com/networknt/monad/Result.java":[{"declaringType":"com.networknt.monad.Result","methodSignature":"map(java.util.function.Function<? super T, ? extends R>)","methodName":"map","lineNumber":["73"],"fullExpression":"other.map(second -> function.apply(first, second))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.monad.Result","methodSignature":"flatMap(java.util.function.Function<? super T, com.networknt.monad.Result<R>>)","methodName":"flatMap","lineNumber":["73"],"fullExpression":"flatMap(first -> other.map(second -> function.apply(first, second)))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.monad.Result","methodSignature":"getResult()","methodName":"getResult","lineNumber":["42","52","63","78"],"fullExpression":"getResult()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.monad.Result","methodSignature":"isFailure()","methodName":"isFailure","lineNumber":["84"],"fullExpression":"isFailure()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.monad.Result","methodSignature":"isSuccess()","methodName":"isSuccess","lineNumber":["29","41","51","62","77"],"fullExpression":"isSuccess()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config-reload/src/test/java/com/networknt/config/reload/handler/ModuleRegistryGetHandlerTest.java":[{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["72"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["74"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["64","65"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["78","79"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["63"],"fullExpression":"new ClientRequest().setPath(\"/getmodules\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["64"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["63"],"fullExpression":"new ClientRequest().setPath(\"/getmodules\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"readValue(java.lang.String, com.fasterxml.jackson.core.type.TypeReference<T>)","methodName":"readValue","lineNumber":["77"],"fullExpression":"mapper.readValue(body, new TypeReference<List<String>>() {\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/utility/src/test/java/com/networknt/utility/HashUtilTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["29"],"fullExpression":"Assert.assertEquals(md5, \"417bed6d9644f12d8bc709059c225c27\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler/src/main/java/com/networknt/handler/HandlerUtils.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["27","30","45","47"],"fullExpression":"logger.debug(\"findServiceEntry for \" + searchKey)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.HandlerUtils","methodSignature":"normalisePath(java.lang.String)","methodName":"normalisePath","lineNumber":["71"],"fullExpression":"HandlerUtils.normalisePath(path)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["27","30","45","47"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object...)","methodName":"debug","lineNumber":["86"],"fullExpression":"logger.debug(\"AuditInfo already contains the field '{}'! Replacing the value '{}' with '{}'.\", fieldName, auditInfo.get(fieldName), fieldValue)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Object)","methodName":"warn","lineNumber":["66"],"fullExpression":"logger.warn(\"Invalid key {}\", key)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"trace","lineNumber":["78","83"],"fullExpression":"logger.trace(\"AuditInfo is null, creating a new one and inserting the key-value pair '{}:{}'\", fieldName, fieldValue)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["13"],"fullExpression":"LoggerFactory.getLogger(HandlerUtils.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.HandlerUtils","methodSignature":"toInternalKey(java.lang.String, java.lang.String)","methodName":"toInternalKey","lineNumber":["63"],"fullExpression":"toInternalKey(tokens[1], tokens[0])","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/request-transformer/src/test/java/com/networknt/reqtrans/RequestTransformerConfigTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["10"],"fullExpression":"Assert.assertTrue(config.getMappedConfig().size() > 0)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/exception/src/main/java/com/networknt/exception/ExceptionHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["129"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["65","76"],"fullExpression":"logger.debug(\"ExceptionHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["148"],"fullExpression":"logger.info(\"ExceptionHandler is reloaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["87","97","106"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["88","98","107"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["87","97","106"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["79"],"fullExpression":"logger.error(\"Exception:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["148"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.MDC","methodSignature":"clear()","methodName":"clear","lineNumber":["118"],"fullExpression":"MDC.clear()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["65","76"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["49"],"fullExpression":"LoggerFactory.getLogger(ExceptionHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isResponseChannelAvailable()","methodName":"isResponseChannelAvailable","lineNumber":["80"],"fullExpression":"exchange.isResponseChannelAvailable()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isInIoThread()","methodName":"isInIoThread","lineNumber":["70"],"fullExpression":"exchange.isInIoThread()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/WeightedSnapshot.java":[{"declaringType":"io.dropwizard.metrics.WeightedSnapshot","methodSignature":"getMean()","methodName":"getMean","lineNumber":["194"],"fullExpression":"getMean()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/basic-auth/src/test/java/com/networknt/basicauth/LdapAuthTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["133"],"fullExpression":"Assert.assertNotNull(responseBody)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["58","80"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["79"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["129","161","190","222","254","286"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["63"],"fullExpression":"Undertow.builder().addHttpListener(17352, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["119","120","151","152","181","212","213","244","245","276","277"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.codec.binary.Base64","methodSignature":"encodeBase64(byte[])","methodName":"encodeBase64","lineNumber":["96"],"fullExpression":"Base64.encodeBase64(cred.getBytes(UTF_8))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["85"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["131","162","191","223","255","287"],"fullExpression":"Assert.assertEquals(403, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["119","120","151","152","181","212","213","244","245","276","277"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["118","150","180","211","243","275"],"fullExpression":"new ClientRequest().setPath(\"/v1/address\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["124","156","185","217","249","281"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.LdapAuthTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["59"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["67"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.LdapAuthTest","methodSignature":"encodeCredentialsFullFormat(java.lang.String, java.lang.String, java.lang.String)","methodName":"encodeCredentialsFullFormat","lineNumber":["102","213"],"fullExpression":"encodeCredentialsFullFormat(username, password, \":\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["85"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["85"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["127","159","188","220","252","284"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["118","150","180","211","243","275"],"fullExpression":"new ClientRequest().setPath(\"/v1/address\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["51"],"fullExpression":"LoggerFactory.getLogger(LdapAuthTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["63"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.LdapAuthTest","methodSignature":"encodeCredentials(java.lang.String, java.lang.String)","methodName":"encodeCredentials","lineNumber":["120","152","245","277"],"fullExpression":"encodeCredentials(\"ldapUser\", \"password\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["85"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/v2/pet\", exchange -> exchange.getResponseSender().send(\"OK\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/main/java/com/networknt/proxy/MultiPartBodyPublisher.java":[{"declaringType":"com.networknt.proxy.MultiPartBodyPublisher","methodSignature":"addFinalBoundaryPart()","methodName":"addFinalBoundaryPart","lineNumber":["25"],"fullExpression":"addFinalBoundaryPart()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.MultiPartBodyPublisher.PartsIterator","methodSignature":"computeNext()","methodName":"computeNext","lineNumber":["102"],"fullExpression":"computeNext()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.MultiPartBodyPublisher.PartsIterator","methodSignature":"hasNext()","methodName":"hasNext","lineNumber":["115"],"fullExpression":"hasNext()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/content/src/main/java/com/networknt/content/ContentHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["53"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"get(io.undertow.util.HttpString)","methodName":"get","lineNumber":["75"],"fullExpression":"exchange.getRequestHeaders().get(Headers.CONTENT_TYPE)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"contains(io.undertow.util.HttpString)","methodName":"contains","lineNumber":["72"],"fullExpression":"exchange.getRequestHeaders().contains(Headers.CONTENT_TYPE)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["73","77"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["73"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, exchange.getRequestHeaders().get(Headers.CONTENT_TYPE).element())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["72","75"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"element()","methodName":"element","lineNumber":["75"],"fullExpression":"exchange.getRequestHeaders().get(Headers.CONTENT_TYPE).element()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/consul/src/main/java/com/networknt/consul/ConsulConfig.java":[{"declaringType":"com.networknt.consul.ConsulConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["74","90","95"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["27"],"fullExpression":"LoggerFactory.getLogger(ConsulConfig.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/encode-decode/src/main/java/com/networknt/encode/ResponseEncodeConfig.java":[{"declaringType":"com.networknt.encode.ResponseEncodeConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["98","99"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["111"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.encode.ResponseEncodeConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["47","64","70"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.encode.ResponseEncodeConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["46","63","69"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["111"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["32"],"fullExpression":"LoggerFactory.getLogger(ResponseEncodeConfig.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/utility/src/main/java/com/networknt/utility/CodeVerifierUtil.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["39"],"fullExpression":"LoggerFactory.getLogger(CodeVerifierUtil.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["140"],"fullExpression":"logger.error(\"ISO-8859-1 encoding not supported on this device!\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Throwable)","methodName":"warn","lineNumber":["137"],"fullExpression":"logger.warn(\"SHA-256 is not supported on this device! Using plain challenge\", e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/rate-limit/src/main/java/com/networknt/limit/key/RemoteAddressKeyResolver.java":[{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getSourceAddress()","methodName":"getSourceAddress","lineNumber":["17"],"fullExpression":"exchange.getSourceAddress()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/UniformReservoir.java":[{"declaringType":"io.dropwizard.metrics.UniformReservoir","methodSignature":"size()","methodName":"size","lineNumber":["97"],"fullExpression":"size()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.UniformReservoir","methodSignature":"nextLong(long)","methodName":"nextLong","lineNumber":["71"],"fullExpression":"nextLong(c)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/registry/src/main/java/com/networknt/registry/URLImpl.java":[{"declaringType":"com.networknt.registry.URLImpl","methodSignature":"getProtocol()","methodName":"getProtocol","lineNumber":["428","428"],"fullExpression":"url.getProtocol()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.URLImpl","methodSignature":"getMethodParameter(java.lang.String, java.lang.String, java.lang.String)","methodName":"getMethodParameter","lineNumber":["237","284","313"],"fullExpression":"getMethodParameter(methodName, paramDesc, name)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.URLImpl","methodSignature":"getPort()","methodName":"getPort","lineNumber":["427"],"fullExpression":"url.getPort()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.URLImpl","methodSignature":"getParameter(java.lang.String)","methodName":"getParameter","lineNumber":["219","230","274","405"],"fullExpression":"getParameter(name)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.URLImpl","methodSignature":"toSimpleString()","methodName":"toSimpleString","lineNumber":["394"],"fullExpression":"toSimpleString()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.URLImpl","methodSignature":"getHost()","methodName":"getHost","lineNumber":["429","429"],"fullExpression":"url.getHost()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.URLImpl","methodSignature":"getGroup()","methodName":"getGroup","lineNumber":["400"],"fullExpression":"getGroup()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.URLImpl","methodSignature":"getPath()","methodName":"getPath","lineNumber":["337","349","430","430"],"fullExpression":"getPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.URLImpl","methodSignature":"buildHostPortStr(java.lang.String, int)","methodName":"buildHostPortStr","lineNumber":["416"],"fullExpression":"buildHostPortStr(host, port)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.URLImpl","methodSignature":"getParameters()","methodName":"getParameters","lineNumber":["431","431","432","432"],"fullExpression":"url.getParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.URLImpl","methodSignature":"hasParameter(java.lang.String)","methodName":"hasParameter","lineNumber":["266"],"fullExpression":"hasParameter(name)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["33"],"fullExpression":"LoggerFactory.getLogger(URLImpl.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["119"],"fullExpression":"logger.error(\"Unknown protocol \" + protocol)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.URLImpl","methodSignature":"getNumbers()","methodName":"getNumbers","lineNumber":["293","302","309","318"],"fullExpression":"getNumbers()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.URLImpl","methodSignature":"getUri()","methodName":"getUri","lineNumber":["380","400"],"fullExpression":"getUri()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/body-config/src/main/java/com/networknt/body/BodyConfig.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["29"],"fullExpression":"LoggerFactory.getLogger(BodyConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.body.BodyConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["58","71"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/JmxReporter.java":[{"declaringType":"io.dropwizard.metrics.JmxReporter.JmxListener","methodSignature":"registerMBean(java.lang.Object, javax.management.ObjectName)","methodName":"registerMBean","lineNumber":["545","571","597","623","649"],"fullExpression":"registerMBean(new JmxGauge(gauge, objectName), objectName)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.JmxReporter.JmxListener","methodSignature":"unregisterMBean(javax.management.ObjectName)","methodName":"unregisterMBean","lineNumber":["558","584","610","636","662","677"],"fullExpression":"unregisterMBean(objectName)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.JmxReporter.JmxListener","methodSignature":"unregisterAll()","methodName":"unregisterAll","lineNumber":["738"],"fullExpression":"listener.unregisterAll()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.JmxReporter","methodSignature":"stop()","methodName":"stop","lineNumber":["746"],"fullExpression":"stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Throwable)","methodName":"debug","lineNumber":["548","560","574","586","600","612","626","638","652","664","679"],"fullExpression":"LOGGER.debug(\"Unable to register gauge\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["164"],"fullExpression":"LoggerFactory.getLogger(JmxReporter.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.JmxReporter.JmxMeter","methodSignature":"calculateRateUnit(java.util.concurrent.TimeUnit)","methodName":"calculateRateUnit","lineNumber":["359"],"fullExpression":"calculateRateUnit(rateUnit)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Throwable)","methodName":"warn","lineNumber":["550","562","576","588","602","614","628","640","654","666","681"],"fullExpression":"LOGGER.warn(\"Unable to register gauge\", e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/resource/src/main/java/com/networknt/resource/VirtualHostHandler.java":[{"declaringType":"io.undertow.server.handlers.NameVirtualHostHandler","methodSignature":"handleRequest(io.undertow.server.HttpServerExchange)","methodName":"handleRequest","lineNumber":["48"],"fullExpression":"virtualHostHandler.handleRequest(httpServerExchange)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config-reload/src/main/java/com/networknt/config/reload/handler/ModuleRegistryGetHandler.java":[{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["42"],"fullExpression":"exchange.getResponseSender().send(mapper.writeValueAsString(modulePlugins))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["40"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["42"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"add(io.undertow.util.HttpString, java.lang.String)","methodName":"add","lineNumber":["40"],"fullExpression":"exchange.getResponseHeaders().add(new HttpString(\"Content-Type\"), \"application/json\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"writeValueAsString(java.lang.Object)","methodName":"writeValueAsString","lineNumber":["42"],"fullExpression":"mapper.writeValueAsString(modulePlugins)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/common/src/test/java/com/networknt/common/DecryptUtilTest.java":[{"declaringType":"com.networknt.common.DecryptUtilTest","methodSignature":"decrypt(java.lang.String)","methodName":"decrypt","lineNumber":["73"],"fullExpression":"decrypt(encryptedString)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.common.DecryptUtilTest","methodSignature":"encrypt(java.lang.String)","methodName":"encrypt","lineNumber":["72"],"fullExpression":"encrypt(originalString)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["43"],"fullExpression":"Assert.assertEquals(\"password\", secretMap.get(\"serverKeystorePass\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/registry/src/main/java/com/networknt/registry/support/DirectRegistry.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["63","160"],"fullExpression":"logger.trace(\"entry key = \" + entry.getKey() + \" entry value = \" + entry.getValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["62","160"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["44"],"fullExpression":"LoggerFactory.getLogger(DirectRegistry.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["90"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.support.DirectRegistry","methodSignature":"buildUrl(java.lang.String, java.lang.String)","methodName":"buildUrl","lineNumber":["67","82"],"fullExpression":"buildUrl(directUrl, entry.getKey())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/InstrumentedExecutorsTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["233","246","257","270"],"fullExpression":"assertThat(delegate.getClass().getCanonicalName())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["233","246","257","270"],"fullExpression":"assertThat(delegate.getClass().getCanonicalName()).isEqualTo(\"java.util.concurrent.Executors.DefaultThreadFactory\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(T)","methodName":"assertThat","lineNumber":["74","90","146","163","206","221"],"fullExpression":"assertThat(delegate.getThreadFactory())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isSameAs(java.lang.Object)","methodName":"isSameAs","lineNumber":["74","90","146","163","206","221"],"fullExpression":"assertThat(delegate.getThreadFactory()).isSameAs(defaultThreadFactory)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isEqualTo(int)","methodName":"isEqualTo","lineNumber":["58","59","72","73","88","89","130","131","144","145","161","162","193","205","220"],"fullExpression":"assertThat(delegate.getCorePoolSize()).isEqualTo(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["58","59","72","73","88","89","130","131","144","145","161","162","193","205","220"],"fullExpression":"assertThat(delegate.getCorePoolSize())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/content/src/main/java/com/networknt/content/ContentConfig.java":[{"declaringType":"com.networknt.content.ContentConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["88","89","91"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.content.ContentConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["39","55","60"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/common/src/main/java/com/networknt/common/ContentType.java":[{"declaringType":"com.networknt.common.ContentType","methodSignature":"values()","methodName":"values","lineNumber":["54"],"fullExpression":"values()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.common.ContentType","methodSignature":"value()","methodName":"value","lineNumber":["55"],"fullExpression":"v.value()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/simplepool/TestConnectionMaker.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["39"],"fullExpression":"LoggerFactory.getLogger(TestConnectionMaker.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/Histogram.java":[{"declaringType":"io.dropwizard.metrics.Histogram","methodSignature":"update(long)","methodName":"update","lineNumber":["51"],"fullExpression":"update((long) value)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Histogram","methodSignature":"getSnapshot()","methodName":"getSnapshot","lineNumber":["82"],"fullExpression":"this.getSnapshot()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/security/src/main/java/com/networknt/security/JwtIssuer.java":[{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setNotBeforeMinutesInThePast(float)","methodName":"setNotBeforeMinutesInThePast","lineNumber":["87","106"],"fullExpression":"claims.setNotBeforeMinutesInThePast(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["120"],"fullExpression":"logger.debug(\"filename = \" + filename + \" key = \" + key)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKey(java.security.Key)","methodName":"setKey","lineNumber":["61"],"fullExpression":"jws.setKey(privateKey)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKeyIdHeaderValue(java.lang.String)","methodName":"setKeyIdHeaderValue","lineNumber":["62"],"fullExpression":"jws.setKeyIdHeaderValue(kid)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setIssuedAtToNow()","methodName":"setIssuedAtToNow","lineNumber":["86","105"],"fullExpression":"claims.setIssuedAtToNow()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["131"],"fullExpression":"logger.error(\"Exception:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"toJson()","methodName":"toJson","lineNumber":["58"],"fullExpression":"claims.toJson()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"setPayload(java.lang.String)","methodName":"setPayload","lineNumber":["58"],"fullExpression":"jws.setPayload(claims.toJson())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["120"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setGeneratedJwtId()","methodName":"setGeneratedJwtId","lineNumber":["85","104"],"fullExpression":"claims.setGeneratedJwtId()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setExpirationTimeMinutesInTheFuture(float)","methodName":"setExpirationTimeMinutesInTheFuture","lineNumber":["103"],"fullExpression":"claims.setExpirationTimeMinutesInTheFuture(expiresIn / 60)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"getCompactSerialization()","methodName":"getCompactSerialization","lineNumber":["70"],"fullExpression":"jws.getCompactSerialization()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["36"],"fullExpression":"LoggerFactory.getLogger(JwtIssuer.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["135"],"fullExpression":"logger.error(\"Failed to retrieve private key from keystore\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setAlgorithmHeaderValue(java.lang.String)","methodName":"setAlgorithmHeaderValue","lineNumber":["65"],"fullExpression":"jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/cors/src/main/java/com/networknt/cors/CorsUtil.java":[{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"get(io.undertow.util.HttpString)","methodName":"get","lineNumber":["60"],"fullExpression":"headers.get(Headers.ORIGIN)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["61","72"],"fullExpression":"logger.trace(\"origins from the request header = \" + Arrays.toString(origins) + \" allowedOrigins = \" + allowedOrigins)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["78"],"fullExpression":"logger.debug(\"Request rejected due to HOST/ORIGIN mis-match.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["61","72"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["133"],"fullExpression":"exchange.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestScheme()","methodName":"getRequestScheme","lineNumber":["90"],"fullExpression":"exchange.getRequestScheme()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.cors.CorsUtil","methodSignature":"isCoreRequest(io.undertow.util.HeaderMap)","methodName":"isCoreRequest","lineNumber":["133"],"fullExpression":"isCoreRequest(exchange.getRequestHeaders())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"equals(io.undertow.util.HttpString)","methodName":"equals","lineNumber":["133"],"fullExpression":"Methods.OPTIONS.equals(exchange.getRequestMethod())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getHostPort()","methodName":"getHostPort","lineNumber":["91"],"fullExpression":"exchange.getHostPort()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.cors.CorsUtil","methodSignature":"sanitizeDefaultPort(java.lang.String)","methodName":"sanitizeDefaultPort","lineNumber":["65","74"],"fullExpression":"sanitizeDefaultPort(origin)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.NetworkUtils","methodSignature":"formatPossibleIpv6Address(java.lang.String)","methodName":"formatPossibleIpv6Address","lineNumber":["89"],"fullExpression":"NetworkUtils.formatPossibleIpv6Address(exchange.getHostName())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["42"],"fullExpression":"LoggerFactory.getLogger(CorsUtil.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.ResponseCodeHandler","methodSignature":"handleRequest(io.undertow.server.HttpServerExchange)","methodName":"handleRequest","lineNumber":["79"],"fullExpression":"ResponseCodeHandler.HANDLE_403.handleRequest(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["59","133"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getHostName()","methodName":"getHostName","lineNumber":["89"],"fullExpression":"exchange.getHostName()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.cors.CorsUtil","methodSignature":"defaultOrigin(io.undertow.server.HttpServerExchange)","methodName":"defaultOrigin","lineNumber":["71"],"fullExpression":"defaultOrigin(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"toArray()","methodName":"toArray","lineNumber":["60"],"fullExpression":"headers.get(Headers.ORIGIN).toArray()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.cors.CorsUtil","methodSignature":"isDefaultPort(int, java.lang.String)","methodName":"isDefaultPort","lineNumber":["95","125"],"fullExpression":"isDefaultPort(port, protocol)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/WeightedSnapshotTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"offset(java.lang.Double)","methodName":"offset","lineNumber":["55","61","81","86","91","96","101","106","174"],"fullExpression":"offset(0.1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["149"],"fullExpression":"assertThat(output.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["149"],"fullExpression":"assertThat(output.toString()).isEqualTo(String.format(\"1%n2%n3%n4%n5%n\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.WeightedSnapshotTest","methodSignature":"WeightedArray(long[], double[])","methodName":"WeightedArray","lineNumber":["50","123","134","180","189","198","207","216","225"],"fullExpression":"WeightedArray(new long[] { 5, 1, 2, 3, 4 }, new double[] { 1, 2, 3, 2, 2 })","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/api-key/src/main/java/com/networknt/apikey/ApiKeyHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["61"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.apikey.ApiKeyHandler","methodSignature":"handleApiKey(io.undertow.server.HttpServerExchange, java.lang.String)","methodName":"handleApiKey","lineNumber":["97"],"fullExpression":"handleApiKey(exchange, requestPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["40","105"],"fullExpression":"logger.trace(\"ApiKeyHandler is loaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["51","90"],"fullExpression":"logger.info(\"ApiKeyHandler is loaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["95","98","145"],"fullExpression":"logger.debug(\"ApiKeyHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["40","105","120","130"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["125"],"fullExpression":"logger.error(\"Exception:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["96"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"endExchange()","methodName":"endExchange","lineNumber":["146"],"fullExpression":"exchange.endExchange()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["51","90"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["95","98","145"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["33"],"fullExpression":"LoggerFactory.getLogger(ApiKeyHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["114"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["143"],"fullExpression":"logger.error(\"Could not find matched APIKEY for request path \" + requestPath)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/service/src/test/java/com/networknt/service/ServiceJsonLoadTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["10"],"fullExpression":"Assert.assertTrue(config.getSingletons().size() > 0)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/test/java/com/networknt/config/ConfigInjectionTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["34"],"fullExpression":"assertTrue(ce instanceof ConfigException)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["44"],"fullExpression":"assertNotNull(newConfigValue)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNull(java.lang.Object)","methodName":"assertNull","lineNumber":["36"],"fullExpression":"assertNull(oldConfigValue)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["45","51","57","63","70","76","84","92","100","108","122"],"fullExpression":"assertEquals(configValue, newConfigValue)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/jaeger-tracing/src/main/java/com/networknt/jaeger/tracing/JaegerConfig.java":[{"declaringType":"com.networknt.jaeger.tracing.JaegerConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["49","62"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/org/apache/hc/core5/util/copied/CharArrayBuffer.java":[{"declaringType":"org.apache.hc.core5.util.copied.CharArrayBuffer","methodSignature":"expand(int)","methodName":"expand","lineNumber":["90","107","156","190","309"],"fullExpression":"expand(newlen)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.hc.core5.util.copied.CharArrayBuffer","methodSignature":"indexOf(int, int, int)","methodName":"indexOf","lineNumber":["402"],"fullExpression":"indexOf(ch, 0, this.len)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.hc.core5.util.copied.CharArrayBuffer","methodSignature":"isWhitespace(char)","methodName":"isWhitespace","lineNumber":["464","467"],"fullExpression":"isWhitespace(this.array[beginIndex0])","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/body/src/test/java/com/networknt/body/BodyStringCachingTest.java":[{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["89"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(\"/post\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, post));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["37","59"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["42"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["58"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["42"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["93","94","95"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["68","70"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.body.BodyStringCachingTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["38"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["93","94","95"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["92"],"fullExpression":"new ClientRequest().setMethod(Methods.POST)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["102"],"fullExpression":"logger.error(\"IOException: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["46"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["64"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["89"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["68","70"],"fullExpression":"exchange.getResponseSender().send(\"nobody\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["105"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["42"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["92"],"fullExpression":"new ClientRequest().setMethod(Methods.POST).setPath(\"/post\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["42"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["64"],"fullExpression":"Handlers.routing().add(Methods.POST, \"/post\", exchange -> {\n    String bodyString = (String) exchange.getAttachment(AttachmentConstants.REQUEST_BODY_STRING);\n    if (bodyString == null) {\n        exchange.getResponseSender().send(\"nobody\");\n    } else {\n        exchange.getResponseSender().send(bodyString);\n    }\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/status/src/test/java/com/networknt/status/TestStatusWrapper.java":[{"declaringType":"com.networknt.status.TestStatusWrapper.TestStatus","methodSignature":"setCustomInfo(java.lang.String)","methodName":"setCustomInfo","lineNumber":["18"],"fullExpression":"this.setCustomInfo(\"custom_info\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.TestStatusWrapper.TestStatus","methodSignature":"getCustomInfo()","methodName":"getCustomInfo","lineNumber":["35"],"fullExpression":"getCustomInfo()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/InstrumentedScheduledExecutorService.java":[{"declaringType":"io.dropwizard.metrics.InstrumentedScheduledExecutorService","methodSignature":"instrument(java.util.Collection<? extends java.util.concurrent.Callable<T>>)","methodName":"instrument","lineNumber":["198","209","220","230"],"fullExpression":"instrument(tasks)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/main/java/com/networknt/router/OAuthServerHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["46"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["46"],"fullExpression":"logger.info(\"OAuthServerHandler is constructed.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["112"],"fullExpression":"logger.trace(\"matched credential, sending response.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["53","113"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["112"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["114"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["35"],"fullExpression":"LoggerFactory.getLogger(OAuthServerHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["53","113"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["55","70"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["79","85","116","120","124","128"],"fullExpression":"logger.error(\"Invalid authorization header \" + auth.substring(0, 10))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["55","70"],"fullExpression":"exchange.getRequestHeaders().getFirst(Headers.CONTENT_TYPE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.codec.binary.Base64","methodSignature":"decodeBase64(java.lang.String)","methodName":"decodeBase64","lineNumber":["76"],"fullExpression":"org.apache.commons.codec.binary.Base64.decodeBase64(credentials)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/test/java/com/networknt/proxy/mras/MrasConfigTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["20","21","22","23","25","26","27","28"],"fullExpression":"Assert.assertTrue(config.getAccessToken().size() > 0)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["41"],"fullExpression":"Assert.assertEquals(4, pathPrefixAuthList.size())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler-config/src/test/java/com/networknt/handler/PathChainTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["51","65","83","98","113"],"fullExpression":"Assert.assertEquals(ex_message, e.getMessage())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"fail(java.lang.String)","methodName":"fail","lineNumber":["47","61","77","94","109"],"fullExpression":"Assert.fail(\"Expected exception\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceConfig.java":[{"declaringType":"com.networknt.proxy.salesforce.SalesforceConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["75","89"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["211"],"fullExpression":"logger.trace(\"pathPrefixAuth s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.salesforce.SalesforceConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["73","87"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["211"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["17"],"fullExpression":"LoggerFactory.getLogger(SalesforceConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.salesforce.SalesforceConfig","methodSignature":"setProxyHost(java.lang.String)","methodName":"setProxyHost","lineNumber":["192"],"fullExpression":"setProxyHost((String) object)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.salesforce.SalesforceConfig","methodSignature":"setCertFilename(java.lang.String)","methodName":"setCertFilename","lineNumber":["188"],"fullExpression":"setCertFilename((String) object)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.salesforce.SalesforceConfig","methodSignature":"setCertPassword(java.lang.String)","methodName":"setCertPassword","lineNumber":["190"],"fullExpression":"setCertPassword((String) object)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/main/java/com/networknt/proxy/tableau/TableauConfig.java":[{"declaringType":"com.networknt.proxy.tableau.TableauConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["55","68"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler/src/main/java/com/networknt/handler/conduit/ModifiableContentSinkConduit.java":[{"declaringType":"org.xnio.conduits.Conduits","methodSignature":"writeFinalBasic(org.xnio.conduits.StreamSinkConduit, java.nio.ByteBuffer[], int, int)","methodName":"writeFinalBasic","lineNumber":["104"],"fullExpression":"Conduits.writeFinalBasic(this, srcs, offset, length)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["146","313"],"fullExpression":"this.exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["119","142","177","182","187","223","230","240","258","278","286","310","320","338"],"fullExpression":"LOG.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.conduit.ModifiableContentSinkConduit","methodSignature":"http1Write(io.undertow.connector.PooledByteBuffer[])","methodName":"http1Write","lineNumber":["165"],"fullExpression":"this.http1Write(responseDataPooledBuffers)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.conduit.ModifiableContentSinkConduit","methodSignature":"isLastWrite(io.undertow.connector.PooledByteBuffer[], int)","methodName":"isLastWrite","lineNumber":["256"],"fullExpression":"this.isLastWrite(buffers, index)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["126"],"fullExpression":"LOG.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.connector.PooledByteBuffer","methodSignature":"getBuffer()","methodName":"getBuffer","lineNumber":["253","253","261","264","281","281","289"],"fullExpression":"buffer.getBuffer()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["26"],"fullExpression":"LoggerFactory.getLogger(ModifiableContentSinkConduit.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.Conduits","methodSignature":"writeFinalBasic(org.xnio.conduits.StreamSinkConduit, java.nio.ByteBuffer)","methodName":"writeFinalBasic","lineNumber":["99"],"fullExpression":"Conduits.writeFinalBasic(this, src)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["210"],"fullExpression":"workerThread.execute(() -> {\n    try {\n        int index = 0;\n        long totalWritten = 0;\n        for (var buffer : buffers) {\n            if (buffer == null || buffer.getBuffer() == null)\n                break;\n            var written = 0;\n            if (LOG.isTraceEnabled())\n                LOG.trace(\"[{}] Before-Write: current pass: '{}' bytes, total: '{}' bytes, buffer size: '{}' bytes\", index, written, totalWritten, buffer.getBuffer().limit());\n            var lastWrite = this.doWrite(buffers, buffer, written, index);\n            totalWritten += written;\n            if (LOG.isTraceEnabled())\n                LOG.trace(\"[{}] After-Write: current pass: '{}' bytes, total: '{}' bytes, buffer size: '{}' bytes\", index, written, totalWritten, buffer.getBuffer().limit());\n            buffer.close();\n            index++;\n            if (lastWrite)\n                break;\n        }\n        if (LOG.isTraceEnabled())\n            LOG.trace(\"Terminating writes...\");\n        next.terminateWrites();\n    } catch (IOException e) {\n        LOG.error(\"Failed to execute conduit writes on Worker Thread.\", e);\n        throw new RuntimeException(\"Failed to execute conduit writes on Worker Thread. \" + e.getMessage(), e);\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.conduit.ModifiableContentSinkConduit","methodSignature":"resetBufferPool(io.undertow.server.HttpServerExchange)","methodName":"resetBufferPool","lineNumber":["48"],"fullExpression":"resetBufferPool(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.conduit.ModifiableContentSinkConduit","methodSignature":"http2Write(io.undertow.connector.PooledByteBuffer[])","methodName":"http2Write","lineNumber":["167"],"fullExpression":"this.http2Write(responseDataPooledBuffers)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.SinkConduit","methodSignature":"getWriteThread()","methodName":"getWriteThread","lineNumber":["200"],"fullExpression":"next.getWriteThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, long)","methodName":"put","lineNumber":["313"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_LENGTH, length)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"get(io.undertow.util.HttpString)","methodName":"get","lineNumber":["146"],"fullExpression":"this.exchange.getResponseHeaders().get(Headers.CONTENT_LENGTH)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.conduit.ModifiableContentSinkConduit","methodSignature":"isBufferConsumed(io.undertow.connector.PooledByteBuffer, long, int)","methodName":"isBufferConsumed","lineNumber":["268"],"fullExpression":"this.isBufferConsumed(buffer, res, index)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["241","259","311","321","339"],"fullExpression":"LOG.trace(\"Terminating writes...\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isWarnEnabled()","methodName":"isWarnEnabled","lineNumber":["349"],"fullExpression":"LOG.isWarnEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.conduit.ModifiableContentSinkConduit","methodSignature":"isWritingResponse()","methodName":"isWritingResponse","lineNumber":["113"],"fullExpression":"isWritingResponse()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.SinkConduit","methodSignature":"awaitWritable()","methodName":"awaitWritable","lineNumber":["271"],"fullExpression":"next.awaitWritable()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isErrorEnabled()","methodName":"isErrorEnabled","lineNumber":["134","329","343"],"fullExpression":"LOG.isErrorEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["135","245","330","344"],"fullExpression":"LOG.error(\"Error executing interceptors: \" + e.getMessage(), e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.SinkConduit","methodSignature":"terminateWrites()","methodName":"terminateWrites","lineNumber":["111","194","243"],"fullExpression":"next.terminateWrites()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.Conduit","methodSignature":"getWorker()","methodName":"getWorker","lineNumber":["201"],"fullExpression":"next.getWorker()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Object)","methodName":"warn","lineNumber":["350"],"fullExpression":"LOG.warn(\"updateContentLength() next is {}\", this.next.getClass().getSimpleName())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"transfer(java.nio.channels.ReadableByteChannel, long, java.nio.ByteBuffer, java.nio.channels.WritableByteChannel)","methodName":"transfer","lineNumber":["94"],"fullExpression":"IoUtils.transfer(source, count, throughBuffer, new ConduitWritableByteChannel(this))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["143","279","287"],"fullExpression":"LOG.trace(\"Next conduit is: {}\", next.getClass().getName())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.StreamSinkConduit","methodSignature":"write(java.nio.ByteBuffer)","methodName":"write","lineNumber":["261","264"],"fullExpression":"next.write(buffer.getBuffer())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler/src/main/java/com/networknt/handler/conduit/ContentStreamSinkConduit.java":[{"declaringType":"org.xnio.conduits.StreamSinkConduit","methodSignature":"writeFinal(java.nio.ByteBuffer[], int, int)","methodName":"writeFinal","lineNumber":["84"],"fullExpression":"_next.writeFinal(srcs, offset, length)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["42"],"fullExpression":"LOG.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.StreamSinkConduit","methodSignature":"transferFrom(java.nio.channels.FileChannel, long, long)","methodName":"transferFrom","lineNumber":["69"],"fullExpression":"_next.transferFrom(src, position, count)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.StreamSinkConduit","methodSignature":"transferFrom(org.xnio.channels.StreamSourceChannel, long, java.nio.ByteBuffer)","methodName":"transferFrom","lineNumber":["74"],"fullExpression":"_next.transferFrom(src, count, throughBuffer)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["18"],"fullExpression":"LoggerFactory.getLogger(ContentStreamSinkConduit.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.StreamSinkConduit","methodSignature":"write(java.nio.ByteBuffer[], int, int)","methodName":"write","lineNumber":["64"],"fullExpression":"_next.write(dsts, offs, len)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isErrorEnabled()","methodName":"isErrorEnabled","lineNumber":["50"],"fullExpression":"LOG.isErrorEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["51"],"fullExpression":"LOG.error(\"Error executing interceptors\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.StreamSinkConduit","methodSignature":"write(java.nio.ByteBuffer)","methodName":"write","lineNumber":["59"],"fullExpression":"_next.write(src)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.StreamSinkConduit","methodSignature":"writeFinal(java.nio.ByteBuffer)","methodName":"writeFinal","lineNumber":["79"],"fullExpression":"_next.writeFinal(src)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.SinkConduit","methodSignature":"terminateWrites()","methodName":"terminateWrites","lineNumber":["89"],"fullExpression":"_next.terminateWrites()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/rate-limit/src/test/java/com/networknt/limit/LimitHandlerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["169"],"fullExpression":"Assert.assertTrue(errorList.size() > 0)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["65"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["82"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["65"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["90"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["118"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["65"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["100"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["107","136"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["70"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["88"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["90"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["114","143"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.LimitHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["61"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["65"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["106","135"],"fullExpression":"new ClientRequest().setPath(\"/\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["53"],"fullExpression":"LoggerFactory.getLogger(LimitHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["88"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/\", exchange -> {\n    exchange.getResponseSender().send(\"OK\");\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["60","83","162","168"],"fullExpression":"logger.info(\"starting serverconfig\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["116","145"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["107","136"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["106","135"],"fullExpression":"new ClientRequest().setPath(\"/\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["111","140"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["65"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["120"],"fullExpression":"Assert.assertEquals(\"OK\", body)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/MultipleAuthServerTest.java":[{"declaringType":"junit.framework.TestCase","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["35","43"],"fullExpression":"assertTrue(pathPrefixServices.size() > 0)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/dump/src/main/java/com/networknt/dump/DumpConfig.java":[{"declaringType":"com.networknt.dump.DumpConfig","methodSignature":"loadRequestConfig(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"loadRequestConfig","lineNumber":["64"],"fullExpression":"loadRequestConfig(this.request)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.dump.DumpConfig","methodSignature":"loadResponseConfig(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"loadResponseConfig","lineNumber":["59"],"fullExpression":"loadResponseConfig(this.response)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.dump.DumpConfig","methodSignature":"isEnabled()","methodName":"isEnabled","lineNumber":["100","104"],"fullExpression":"isEnabled()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/data-source/src/test/java/com/networknt/db/DataSourceSettingTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["23","33"],"fullExpression":"assertNotNull(ds)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["21","22","31","32"],"fullExpression":"assertEquals(ds.getIdleTimeout(), 50000)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.zaxxer.hikari.HikariConfig","methodSignature":"getIdleTimeout()","methodName":"getIdleTimeout","lineNumber":["21","31"],"fullExpression":"ds.getIdleTimeout()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.zaxxer.hikari.HikariConfig","methodSignature":"getMinimumIdle()","methodName":"getMinimumIdle","lineNumber":["22","32"],"fullExpression":"ds.getMinimumIdle()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerConfig.java":[{"declaringType":"com.networknt.reqtrans.RequestTransformerConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["42","56"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["104"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.reqtrans.RequestTransformerConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["43","57"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["104"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["23"],"fullExpression":"LoggerFactory.getLogger(RequestTransformerConfig.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/status/src/main/java/com/networknt/status/HttpStatus.java":[{"declaringType":"com.networknt.status.HttpStatus.Series","methodSignature":"values()","methodName":"values","lineNumber":["506"],"fullExpression":"values()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.HttpStatus","methodSignature":"values()","methodName":"values","lineNumber":["446"],"fullExpression":"values()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.HttpStatus","methodSignature":"resolve(int)","methodName":"resolve","lineNumber":["437"],"fullExpression":"resolve(statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.HttpStatus","methodSignature":"series()","methodName":"series","lineNumber":["393","398","403","408","413"],"fullExpression":"series()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.HttpStatus.Series","methodSignature":"resolve(int)","methodName":"resolve","lineNumber":["496"],"fullExpression":"resolve(statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.HttpStatus","methodSignature":"is4xxClientError()","methodName":"is4xxClientError","lineNumber":["418"],"fullExpression":"is4xxClientError()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.HttpStatus.Series","methodSignature":"valueOf(int)","methodName":"valueOf","lineNumber":["486"],"fullExpression":"valueOf(status.value)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.HttpStatus.Series","methodSignature":"valueOf(com.networknt.status.HttpStatus)","methodName":"valueOf","lineNumber":["388"],"fullExpression":"Series.valueOf(this)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.status.HttpStatus","methodSignature":"is5xxServerError()","methodName":"is5xxServerError","lineNumber":["418"],"fullExpression":"is5xxServerError()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/MeterApproximationTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"offset(java.lang.Double)","methodName":"offset","lineNumber":["57","67","77"],"fullExpression":"offset(0.1 * ratePerMinute)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.MeterApproximationTest","methodSignature":"simulateMetronome(long, java.util.concurrent.TimeUnit, long, java.util.concurrent.TimeUnit)","methodName":"simulateMetronome","lineNumber":["52","62","72"],"fullExpression":"simulateMetronome(62934, TimeUnit.MILLISECONDS, 3, TimeUnit.MINUTES)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/org/apache/hc/client5/http/ssl/copied/DefaultHostnameVerifier.java":[{"declaringType":"org.apache.hc.client5.http.ssl.copied.DefaultHostnameVerifier","methodSignature":"normaliseAddress(java.lang.String)","methodName":"normaliseAddress","lineNumber":["141"],"fullExpression":"normaliseAddress(host)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["91"],"fullExpression":"log.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.hc.client5.http.ssl.copied.DefaultHostnameVerifier","methodSignature":"extractCN(java.lang.String)","methodName":"extractCN","lineNumber":["118"],"fullExpression":"extractCN(subjectPrincipal.getName(X500Principal.RFC2253))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Throwable)","methodName":"debug","lineNumber":["92"],"fullExpression":"log.debug(ex.getMessage(), ex)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["71"],"fullExpression":"LoggerFactory.getLogger(getClass())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.hc.client5.http.ssl.copied.DefaultHostnameVerifier","methodSignature":"getSubjectAltNames(java.security.cert.X509Certificate)","methodName":"getSubjectAltNames","lineNumber":["102"],"fullExpression":"getSubjectAltNames(cert)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.hc.client5.http.ssl.copied.DefaultHostnameVerifier","methodSignature":"verify(java.lang.String, java.security.cert.X509Certificate)","methodName":"verify","lineNumber":["88"],"fullExpression":"verify(host, x509)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.hc.client5.http.ssl.copied.DefaultHostnameVerifier","methodSignature":"determineHostFormat(java.lang.String)","methodName":"determineHostFormat","lineNumber":["101"],"fullExpression":"determineHostFormat(host)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/utility/src/test/java/com/networknt/utility/UtilTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotEquals(java.lang.Object, java.lang.Object)","methodName":"assertNotEquals","lineNumber":["32"],"fullExpression":"Assert.assertNotEquals(id1, id2)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/utility/src/main/java/com/networknt/utility/ConfigUtils.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["17","18","24","25","35","37"],"fullExpression":"logger.debug(\"findServiceEntry for \" + searchKey + \" and method: \" + method)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["17","18","24","25","35","37"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Object)","methodName":"warn","lineNumber":["56"],"fullExpression":"logger.warn(\"Invalid key {}\", key)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["12"],"fullExpression":"LoggerFactory.getLogger(ConfigUtils.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/cluster/src/test/java/com/networknt/cluster/LightClusterTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["35","37","44","47","50","57"],"fullExpression":"Assert.assertTrue(\"http://localhost:7005\".equals(s) || \"http://localhost:7002\".equals(s))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["63"],"fullExpression":"Assert.assertEquals(2, l.size())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/api-key/src/test/java/com/networknt/apikey/ApiKeyConfigTest.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["12"],"fullExpression":"LoggerFactory.getLogger(ApiKeyConfigTest.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/InstrumentedThreadFactoryTest.java":[{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isEqualTo(int)","methodName":"isEqualTo","lineNumber":["102"],"fullExpression":"assertThat(interrupted.get()).isEqualTo(0)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["102"],"fullExpression":"assertThat(interrupted.get())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler/src/main/java/com/networknt/handler/Handler.java":[{"declaringType":"com.networknt.handler.Handler","methodSignature":"initChains()","methodName":"initChains","lineNumber":["65","527"],"fullExpression":"initChains()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.Handler","methodSignature":"next(io.undertow.server.HttpServerExchange)","methodName":"next","lineNumber":["231","251","257"],"fullExpression":"next(httpServerExchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.Handler","methodSignature":"initDefaultHandlers()","methodName":"initDefaultHandlers","lineNumber":["67"],"fullExpression":"initDefaultHandlers()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.Handler","methodSignature":"initStringDefinedHandler(java.lang.String)","methodName":"initStringDefinedHandler","lineNumber":["82"],"fullExpression":"initStringDefinedHandler((String) handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpHandler","methodSignature":"handleRequest(io.undertow.server.HttpServerExchange)","methodName":"handleRequest","lineNumber":["214","229"],"fullExpression":"lastHandler.handleRequest(httpServerExchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["309"],"fullExpression":"ex.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isErrorEnabled()","methodName":"isErrorEnabled","lineNumber":["160"],"fullExpression":"LOG.isErrorEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.Handler","methodSignature":"initPaths()","methodName":"initPaths","lineNumber":["66","528"],"fullExpression":"initPaths()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["314"],"fullExpression":"ex.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AbstractAttachable","methodSignature":"getAttachment(io.undertow.util.AttachmentKey<T>)","methodName":"getAttachment","lineNumber":["245","246","269","271"],"fullExpression":"ex.getAttachment(CHAIN_ID)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.Handler","methodSignature":"registerMiddlewareHandler(java.lang.Object)","methodName":"registerMiddlewareHandler","lineNumber":["443"],"fullExpression":"registerMiddlewareHandler(resolvedHandler)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.Handler","methodSignature":"getNext(io.undertow.server.HttpServerExchange)","methodName":"getNext","lineNumber":["208","295"],"fullExpression":"getNext(httpServerExchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"websocket(io.undertow.websockets.WebSocketConnectionCallback)","methodName":"websocket","lineNumber":["439"],"fullExpression":"websocket((WebSocketConnectionCallback) handlerOrProviderObject)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.Handler","methodSignature":"splitClassAndName(java.lang.String)","methodName":"splitClassAndName","lineNumber":["418"],"fullExpression":"splitClassAndName(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AbstractAttachable","methodSignature":"putAttachment(io.undertow.util.AttachmentKey<T>, T)","methodName":"putAttachment","lineNumber":["248","249","320","333","353","354"],"fullExpression":"ex.putAttachment(CHAIN_ID, execName)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["47"],"fullExpression":"LoggerFactory.getLogger(Handler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AttachmentKey","methodSignature":"create(java.lang.Class<? super T>)","methodName":"create","lineNumber":["45","46"],"fullExpression":"AttachmentKey.create(Integer.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.Handler","methodSignature":"initHandlers()","methodName":"initHandlers","lineNumber":["64","526"],"fullExpression":"initHandlers()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/prometheus/src/main/java/com/networknt/metrics/prometheus/PrometheusHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["83"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.metrics.prometheus.PrometheusHandler","methodSignature":"sanitizeName(java.lang.String)","methodName":"sanitizeName","lineNumber":["158","163"],"fullExpression":"sanitizeName(name)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.prometheus.client.SimpleCollector.Builder","methodSignature":"name(java.lang.String)","methodName":"name","lineNumber":["159","164"],"fullExpression":"Counter.build().name(k)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["110"],"fullExpression":"logger.info(\"Prometheus hotspot monitor enabled.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["114"],"fullExpression":"logger.debug(\"Tags was empty. AuditInfo size \" + auditInfo.size())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.prometheus.client.SimpleCollector.Builder","methodSignature":"help(java.lang.String)","methodName":"help","lineNumber":["159","164"],"fullExpression":"Counter.build().name(k).help(k)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.metrics.prometheus.PrometheusHandler","methodSignature":"incCounterForStatusCode(int, java.util.List<java.lang.String>, java.util.List<java.lang.String>)","methodName":"incCounterForStatusCode","lineNumber":["108"],"fullExpression":"incCounterForStatusCode(exchange1.getStatusCode(), labels, labelValues)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.prometheus.client.Counter","methodSignature":"build()","methodName":"build","lineNumber":["159"],"fullExpression":"Counter.build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.prometheus.client.Summary","methodSignature":"build()","methodName":"build","lineNumber":["164"],"fullExpression":"Summary.build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["118"],"fullExpression":"logger.error(\"ExchangeListener throwable\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ExchangeCompletionListener.NextListener","methodSignature":"proceed()","methodName":"proceed","lineNumber":["120"],"fullExpression":"nextListener.proceed()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"addExchangeCompleteListener(io.undertow.server.ExchangeCompletionListener)","methodName":"addExchangeCompleteListener","lineNumber":["93"],"fullExpression":"exchange.addExchangeCompleteListener((exchange1, nextListener) -> {\n    try {\n        Map<String, Object> auditInfo = exchange1.getAttachment(AttachmentConstants.AUDIT_INFO);\n        if (auditInfo != null) {\n            Map<String, String> tags = new HashMap<>();\n            tags.put(\"endpoint\", (String) auditInfo.get(Constants.ENDPOINT_STRING));\n            tags.put(\"clientId\", auditInfo.get(Constants.CLIENT_ID_STRING) != null ? (String) auditInfo.get(Constants.CLIENT_ID_STRING) : \"unknown\");\n            // The tags can be empty in error cases.\n            if (!tags.isEmpty()) {\n                List<String> labels = new ArrayList<>(tags.keySet());\n                List<String> labelValues = new ArrayList<>(tags.values());\n                summary(RESPONSE_TIME_SECOND, labels).labels(labelValues.stream().toArray(String[]::new)).observe(respTimer.elapsedSeconds());\n                incCounterForStatusCode(exchange1.getStatusCode(), labels, labelValues);\n                if (config.enableHotspot) {\n                    logger.info(\"Prometheus hotspot monitor enabled.\");\n                    DefaultExports.initialize();\n                }\n            } else {\n                logger.debug(\"Tags was empty. AuditInfo size \" + auditInfo.size());\n            }\n        }\n    } catch (Throwable e) {\n        logger.error(\"ExchangeListener throwable\", e);\n    } finally {\n        nextListener.proceed();\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getStatusCode()","methodName":"getStatusCode","lineNumber":["108"],"fullExpression":"exchange1.getStatusCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["57"],"fullExpression":"LoggerFactory.getLogger(PrometheusHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.prometheus.client.hotspot.DefaultExports","methodSignature":"initialize()","methodName":"initialize","lineNumber":["111"],"fullExpression":"DefaultExports.initialize()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.prometheus.client.SimpleTimer","methodSignature":"elapsedSeconds()","methodName":"elapsedSeconds","lineNumber":["106"],"fullExpression":"respTimer.elapsedSeconds()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.metrics.prometheus.PrometheusHandler","methodSignature":"counter(java.lang.String, java.util.List<java.lang.String>)","methodName":"counter","lineNumber":["144","146","148","150","152"],"fullExpression":"counter(REQUEST_TOTAL, labels)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.metrics.prometheus.PrometheusHandler","methodSignature":"summary(java.lang.String, java.util.List<java.lang.String>)","methodName":"summary","lineNumber":["106"],"fullExpression":"summary(RESPONSE_TIME_SECOND, labels)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/SlidingTimeWindowReservoir.java":[{"declaringType":"io.dropwizard.metrics.SlidingTimeWindowReservoir","methodSignature":"getTick()","methodName":"getTick","lineNumber":["75","97"],"fullExpression":"getTick()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.SlidingTimeWindowReservoir","methodSignature":"trim()","methodName":"trim","lineNumber":["66","73","80"],"fullExpression":"trim()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/encode-decode/src/test/java/com/networknt/HttpClientUtils.java":[{"declaringType":"org.apache.http.HttpResponse","methodSignature":"getEntity()","methodName":"getEntity","lineNumber":["35","54"],"fullExpression":"response.getEntity()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.HttpClientUtils","methodSignature":"readResponse(java.io.InputStream)","methodName":"readResponse","lineNumber":["39"],"fullExpression":"readResponse(entity.getContent())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.HttpEntity","methodSignature":"getContent()","methodName":"getContent","lineNumber":["39","54"],"fullExpression":"entity.getContent()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.HttpClientUtils","methodSignature":"readRawResponse(java.io.InputStream)","methodName":"readRawResponse","lineNumber":["54"],"fullExpression":"readRawResponse(response.getEntity().getContent())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/decryptor/src/main/java/com/networknt/decrypt/DummyDecryptor.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["9"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["9"],"fullExpression":"logger.info(\"DummyDecryptor is constructed.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["7"],"fullExpression":"LoggerFactory.getLogger(DummyDecryptor.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["19"],"fullExpression":"logger.error(\"The secret text is not formatted correctly with CRYPT:text\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/main/java/com/networknt/router/middleware/PathServiceHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["125"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["106"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["63","125"],"fullExpression":"logger.info(\"PathServiceHandler is constructed\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["69","77","85","95"],"fullExpression":"logger.debug(\"PathServiceConfig.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["82"],"fullExpression":"logger.trace(\"Put into the service_id header for serviceId = \" + serviceId)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["69","77","85","95"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["82"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["59"],"fullExpression":"LoggerFactory.getLogger(PathServiceHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"peekFirst()","methodName":"peekFirst","lineNumber":["72"],"fullExpression":"serviceIdHeader.peekFirst()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["71","83"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["88","92"],"fullExpression":"logger.error(\"could not get endpoint from the auditInfo.\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/http/Light4jHttp2ClientProvider.java":[{"declaringType":"org.xnio.conduits.ConduitStreamSinkChannel","methodSignature":"getConduit()","methodName":"getConduit","lineNumber":["154"],"fullExpression":"connection.getSinkChannel().getConduit()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoFuture","methodSignature":"getException()","methodName":"getException","lineNumber":["111"],"fullExpression":"ioFuture.getException()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientCallback","methodSignature":"completed(T)","methodName":"completed","lineNumber":["139"],"fullExpression":"listener.completed(createHttp2Channel(connection, bufferPool, options, uri.getHost()))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.ConduitStreamSourceChannel","methodSignature":"setConduit(org.xnio.conduits.StreamSourceConduit)","methodName":"setConduit","lineNumber":["160"],"fullExpression":"connection.getSourceChannel().setConduit(new BytesReceivedStreamSourceConduit(connection.getSourceChannel().getConduit(), new ByteActivityCallback() {\n\n    @Override\n    public void activity(long bytes) {\n        clientStatistics.read += bytes;\n    }\n}))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Light4jHttp2ClientProvider","methodSignature":"alpnProtocol(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.URI, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"alpnProtocol","lineNumber":["145"],"fullExpression":"alpnProtocol(listener, uri, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.UndertowMessages","methodSignature":"sslWasNull()","methodName":"sslWasNull","lineNumber":["79","94"],"fullExpression":"UndertowMessages.MESSAGES.sslWasNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap.Builder","methodSignature":"addAll(org.xnio.OptionMap)","methodName":"addAll","lineNumber":["82","98"],"fullExpression":"OptionMap.builder().addAll(options)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Light4jHttp2ClientProvider","methodSignature":"handleConnected(org.xnio.StreamConnection, io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.URI, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"handleConnected","lineNumber":["121"],"fullExpression":"handleConnected(connection, listener, uri, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Light4jHttp2ClientProvider","methodSignature":"connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.InetSocketAddress, java.net.URI, org.xnio.XnioIoThread, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["68"],"fullExpression":"connect(listener, null, uri, ioThread, ssl, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.StreamConnection","methodSignature":"getSourceChannel()","methodName":"getSourceChannel","lineNumber":["160","160"],"fullExpression":"connection.getSourceChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["57"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.ConduitStreamSinkChannel","methodSignature":"setConduit(org.xnio.conduits.StreamSinkConduit)","methodName":"setConduit","lineNumber":["154"],"fullExpression":"connection.getSinkChannel().setConduit(new BytesSentStreamSinkConduit(connection.getSinkChannel().getConduit(), new ByteActivityCallback() {\n\n    @Override\n    public void activity(long bytes) {\n        clientStatistics.written += bytes;\n    }\n}))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoFuture","methodSignature":"getStatus()","methodName":"getStatus","lineNumber":["110"],"fullExpression":"ioFuture.getStatus()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Light4jHttp2ClientProvider","methodSignature":"createHttp2Channel(org.xnio.StreamConnection, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap, java.lang.String)","methodName":"createHttp2Channel","lineNumber":["139"],"fullExpression":"createHttp2Channel(connection, bufferPool, options, uri.getHost())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientCallback","methodSignature":"failed(java.io.IOException)","methodName":"failed","lineNumber":["79","94","111"],"fullExpression":"listener.failed(UndertowMessages.MESSAGES.sslWasNull())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"builder()","methodName":"builder","lineNumber":["82","98"],"fullExpression":"OptionMap.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Light4jHttp2ClientProvider","methodSignature":"createNotifier(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>)","methodName":"createNotifier","lineNumber":["84","86","99","101"],"fullExpression":"createNotifier(listener)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ssl.XnioSsl","methodSignature":"openSslConnection(org.xnio.XnioIoThread, java.net.InetSocketAddress, java.net.InetSocketAddress, org.xnio.ChannelListener<? super org.xnio.ssl.SslConnection>, org.xnio.OptionMap)","methodName":"openSslConnection","lineNumber":["101"],"fullExpression":"ssl.openSslConnection(ioThread, bindAddress, new InetSocketAddress(uri.getHost(), uri.getPort() == -1 ? 443 : uri.getPort()), createOpenListener(listener, uri, ssl, bufferPool, options), options)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ssl.XnioSsl","methodSignature":"openSslConnection(org.xnio.XnioWorker, java.net.InetSocketAddress, org.xnio.ChannelListener<? super org.xnio.ssl.SslConnection>, org.xnio.OptionMap)","methodName":"openSslConnection","lineNumber":["84"],"fullExpression":"ssl.openSslConnection(worker, new InetSocketAddress(uri.getHost(), uri.getPort() == -1 ? 443 : uri.getPort()), createOpenListener(listener, uri, ssl, bufferPool, tlsOptions), tlsOptions)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.UndertowLogger","methodSignature":"alpnConnectionFailed(org.xnio.ssl.SslConnection)","methodName":"alpnConnectionFailed","lineNumber":["56"],"fullExpression":"UndertowLogger.ROOT_LOGGER.alpnConnectionFailed(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ssl.XnioSsl","methodSignature":"openSslConnection(org.xnio.XnioWorker, java.net.InetSocketAddress, java.net.InetSocketAddress, org.xnio.ChannelListener<? super org.xnio.ssl.SslConnection>, org.xnio.OptionMap)","methodName":"openSslConnection","lineNumber":["86"],"fullExpression":"ssl.openSslConnection(worker, bindAddress, new InetSocketAddress(uri.getHost(), uri.getPort() == -1 ? 443 : uri.getPort()), createOpenListener(listener, uri, ssl, bufferPool, tlsOptions), tlsOptions)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Light4jHttp2ClientProvider","methodSignature":"createOpenListener(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.URI, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"createOpenListener","lineNumber":["84","86","99","101"],"fullExpression":"createOpenListener(listener, uri, ssl, bufferPool, tlsOptions)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.ConduitStreamSourceChannel","methodSignature":"getConduit()","methodName":"getConduit","lineNumber":["160"],"fullExpression":"connection.getSourceChannel().getConduit()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap.Builder","methodSignature":"getMap()","methodName":"getMap","lineNumber":["82","98"],"fullExpression":"OptionMap.builder().addAll(options).set(Options.SSL_STARTTLS, true).getMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"get(org.xnio.Option<java.lang.Boolean>, boolean)","methodName":"get","lineNumber":["152"],"fullExpression":"options.get(UndertowOptions.ENABLE_STATISTICS, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap.Builder","methodSignature":"set(org.xnio.Option<java.lang.Boolean>, boolean)","methodName":"set","lineNumber":["82","98"],"fullExpression":"OptionMap.builder().addAll(options).set(Options.SSL_STARTTLS, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoFuture","methodSignature":"addNotifier(org.xnio.IoFuture.Notifier<? super T, A>, A)","methodName":"addNotifier","lineNumber":["84","86","99","101"],"fullExpression":"ssl.openSslConnection(worker, new InetSocketAddress(uri.getHost(), uri.getPort() == -1 ? 443 : uri.getPort()), createOpenListener(listener, uri, ssl, bufferPool, tlsOptions), tlsOptions).addNotifier(createNotifier(listener), null)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Light4jHttp2ClientProvider","methodSignature":"connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.InetSocketAddress, java.net.URI, org.xnio.XnioWorker, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["63"],"fullExpression":"connect(listener, null, uri, worker, ssl, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ssl.XnioSsl","methodSignature":"openSslConnection(org.xnio.XnioIoThread, java.net.InetSocketAddress, org.xnio.ChannelListener<? super org.xnio.ssl.SslConnection>, org.xnio.OptionMap)","methodName":"openSslConnection","lineNumber":["99"],"fullExpression":"ssl.openSslConnection(ioThread, new InetSocketAddress(uri.getHost(), uri.getPort() == -1 ? 443 : uri.getPort()), createOpenListener(listener, uri, ssl, bufferPool, tlsOptions), options)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.StreamConnection","methodSignature":"getSinkChannel()","methodName":"getSinkChannel","lineNumber":["154","154"],"fullExpression":"connection.getSinkChannel()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/correlation-config/src/main/java/com/networknt/correlation/CorrelationConfig.java":[{"declaringType":"com.networknt.correlation.CorrelationConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["40","56","61"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.correlation.CorrelationConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["88","89","91"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/test/java/com/networknt/config/TestCentralizedManagement.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["57","65","73"],"fullExpression":"Assert.assertTrue(testMap.get(\"key\") instanceof Integer)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNull(java.lang.Object)","methodName":"assertNull","lineNumber":["81"],"fullExpression":"Assert.assertNull(testMap.get(\"key\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"fail()","methodName":"fail","lineNumber":["46"],"fullExpression":"fail()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["37","89","97","119"],"fullExpression":"Assert.assertEquals(\"test\", testMap.get(\"key\").toString())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sidecar/src/main/java/com/networknt/router/middleware/SidecarPathPrefixServiceHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["26"],"fullExpression":"logger.info(\"SidecarPathPrefixServiceHandler is constructed\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["33","42"],"fullExpression":"logger.debug(\"SidecarPathPrefixServiceHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["35","38"],"fullExpression":"logger.trace(\"Outgoing request calls PathPrefixServiceHandler with header indicator\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["33","42"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["35","38"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["21"],"fullExpression":"LoggerFactory.getLogger(SidecarPathPrefixServiceHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestScheme()","methodName":"getRequestScheme","lineNumber":["37"],"fullExpression":"exchange.getRequestScheme()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/main/java/io/undertow/server/handlers/proxy/LoadBalancingRouterProxyClient.java":[{"declaringType":"io.undertow.util.AbstractAttachable","methodSignature":"addToAttachmentList(io.undertow.util.AttachmentKey<io.undertow.util.AttachmentList<T>>, T)","methodName":"addToAttachmentList","lineNumber":["203"],"fullExpression":"exchange.addToAttachmentList(ATTEMPTED_HOSTS, host)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["161","166","180","193","197","201","205","219","231","236","238","241","244","250","265","270","272"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.LoadBalancingRouterProxyClient.HostSelector","methodSignature":"selectHost(io.undertow.server.handlers.proxy.LoadBalancingRouterProxyClient.Host[])","methodName":"selectHost","lineNumber":["275"],"fullExpression":"hostSelector.selectHost(hostArray)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AttachmentList","methodSignature":"contains(java.lang.Object)","methodName":"contains","lineNumber":["282"],"fullExpression":"attempted.contains(selected)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.LoadBalancingRouterProxyClient","methodSignature":"selectHost(io.undertow.server.HttpServerExchange)","methodName":"selectHost","lineNumber":["192","196"],"fullExpression":"selectHost(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object...)","methodName":"trace","lineNumber":["272"],"fullExpression":"logger.trace(\"HostArray is empty. serviceUrl {} serviceId {} envTag {}\", serviceUrl, serviceId, envTag)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.UndertowClient","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["97"],"fullExpression":"UndertowClient.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.ProxyCallback","methodSignature":"couldNotResolveBackend(io.undertow.server.HttpServerExchange)","methodName":"couldNotResolveBackend","lineNumber":["200"],"fullExpression":"callback.couldNotResolveBackend(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["59"],"fullExpression":"LoggerFactory.getLogger(LoadBalancingRouterProxyClient.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.ProxyConnectionPool","methodSignature":"available()","methodName":"available","lineNumber":["283"],"fullExpression":"selected.connectionPool.available()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.ProxyConnectionPool","methodSignature":"closeCurrentConnections()","methodName":"closeCurrentConnections","lineNumber":["389"],"fullExpression":"connectionPool.closeCurrentConnections()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["166","201","205","219","231","236","238","241","244","250","265","270"],"fullExpression":"logger.trace(\"Only one uri found in the service.yml, so duplicated it to enable retry.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.LoadBalancingRouterProxyClient.Host","methodSignature":"getUri()","methodName":"getUri","lineNumber":["193","197"],"fullExpression":"host.getUri()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"trace","lineNumber":["161","180"],"fullExpression":"logger.trace(\"addHosts serviceId {} envTag {} for cluster.services discovery.\", serviceId, envTag)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.LoadBalancingRouterProxyClient.Host","methodSignature":"closeCurrentConnections()","methodName":"closeCurrentConnections","lineNumber":["336"],"fullExpression":"host.closeCurrentConnections()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["208","261"],"fullExpression":"logger.error(\"Failed to get connection\", ex)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setReasonPhrase(java.lang.String)","methodName":"setReasonPhrase","lineNumber":["209"],"fullExpression":"exchange.setReasonPhrase(ex.getMessage())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AttachmentKey","methodSignature":"createList(java.lang.Class<? super T>)","methodName":"createList","lineNumber":["61"],"fullExpression":"AttachmentKey.createList(Host.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AbstractAttachable","methodSignature":"getAttachment(io.undertow.util.AttachmentKey<T>)","methodName":"getAttachment","lineNumber":["237"],"fullExpression":"exchange.getAttachment(ATTEMPTED_HOSTS)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.ProxyCallback","methodSignature":"failed(io.undertow.server.HttpServerExchange)","methodName":"failed","lineNumber":["210"],"fullExpression":"callback.failed(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.ProxyConnectionPool","methodSignature":"connect(io.undertow.server.handlers.proxy.ProxyClient.ProxyTarget, io.undertow.server.HttpServerExchange, io.undertow.server.handlers.proxy.ProxyCallback<io.undertow.server.handlers.proxy.ProxyConnection>, long, java.util.concurrent.TimeUnit, boolean)","methodName":"connect","lineNumber":["204"],"fullExpression":"host.connectionPool.connect(target, exchange, callback, timeout, timeUnit, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["193","197"],"fullExpression":"logger.trace(\"First time to selectHost and uri = {}\", host == null ? null : host.getUri())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getQueryParameters()","methodName":"getQueryParameters","lineNumber":["227"],"fullExpression":"exchange.getQueryParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["216"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.LoadBalancingRouterProxyClient","methodSignature":"addHosts(java.lang.String, java.lang.String)","methodName":"addHosts","lineNumber":["266","302"],"fullExpression":"addHosts(serviceId, envTag)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sidecar/src/main/java/com/networknt/router/middleware/SidecarSAMLTokenHandler.java":[{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"peekFirst()","methodName":"peekFirst","lineNumber":["27"],"fullExpression":"serviceIdHeader.peekFirst()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["26","28"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestScheme()","methodName":"getRequestScheme","lineNumber":["36"],"fullExpression":"exchange.getRequestScheme()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/main/java/com/networknt/proxy/tableau/TableauSimpleAuthHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["171"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["135","138"],"fullExpression":"logger.debug(\"statusCode = \" + statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.tableau.TableauSimpleAuthHandler","methodSignature":"getToken(java.lang.String)","methodName":"getToken","lineNumber":["104"],"fullExpression":"getToken(contentUrl)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["134"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["129","130","131"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["109","110","129","130","131"],"fullExpression":"exchange.getRequestHeaders().put(TABLEAU_TOKEN, token)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["144"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["99"],"fullExpression":"exchange.getRequestHeaders().getFirst(TABLEAU_CONTENT_URL)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.tableau.TableauSimpleAuthHandler","methodSignature":"getRequestBody(java.lang.String)","methodName":"getRequestBody","lineNumber":["127"],"fullExpression":"getRequestBody(contentUrl)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["147"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["135","138"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["62"],"fullExpression":"LoggerFactory.getLogger(TableauSimpleAuthHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["99","109","110"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/http-url/src/main/java/com/networknt/url/URLNormalizer.java":[{"declaringType":"com.networknt.url.URLNormalizer","methodSignature":"toURI()","methodName":"toURI","lineNumber":["259"],"fullExpression":"toURI()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.URLNormalizer","methodSignature":"toURL()","methodName":"toURL","lineNumber":["189","296","324","350","393","423","545","570","623","636","647"],"fullExpression":"toURL()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.URLNormalizer","methodSignature":"replaceStart(java.lang.StringBuilder, java.lang.String, java.lang.String)","methodName":"replaceStart","lineNumber":["448","450","459","462"],"fullExpression":"replaceStart(in, \"/./\", \"/\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.URLNormalizer","methodSignature":"equalsAny(java.lang.Object, java.lang.Object...)","methodName":"equalsAny","lineNumber":["827"],"fullExpression":"equalsAny(enc, \"%2D\", \"%2E\", \"%5F\", \"%7E\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.URLNormalizer","methodSignature":"removeLastSegment(java.lang.StringBuilder)","methodName":"removeLastSegment","lineNumber":["460","463"],"fullExpression":"removeLastSegment(out)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.URLNormalizer","methodSignature":"isEncodedUnreservedCharacter(java.lang.String)","methodName":"isEncodedUnreservedCharacter","lineNumber":["228"],"fullExpression":"isEncodedUnreservedCharacter(enc)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.URLNormalizer","methodSignature":"deleteStart(java.lang.StringBuilder, java.lang.String)","methodName":"deleteStart","lineNumber":["439","441","469","471","503"],"fullExpression":"deleteStart(in, \"../\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.URLNormalizer","methodSignature":"addDirectoryTrailingSlash()","methodName":"addDirectoryTrailingSlash","lineNumber":["377"],"fullExpression":"addDirectoryTrailingSlash()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Throwable)","methodName":"debug","lineNumber":["234","579"],"fullExpression":"logger.debug(\"UTF-8 is not supported by your system. \" + \"URL will remain unchanged:\" + url, e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["134"],"fullExpression":"LoggerFactory.getLogger(URLNormalizer.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String, java.lang.Throwable)","methodName":"info","lineNumber":["810"],"fullExpression":"logger.info(\"URL does not appear to be valid and cannot be parsed:\" + url, e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.URLNormalizer","methodSignature":"equalStrings(java.lang.StringBuilder, java.lang.String)","methodName":"equalStrings","lineNumber":["449","461","468","470"],"fullExpression":"equalStrings(in, \"/.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.URLNormalizer","methodSignature":"startsWith(java.lang.StringBuilder, java.lang.String)","methodName":"startsWith","lineNumber":["438","440","447","458"],"fullExpression":"startsWith(in, \"../\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server/src/test/java/com/networknt/server/DefaultConfigLoaderTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["59","61"],"fullExpression":"Assert.assertEquals(\"Ruby\", result1.get(0))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/test/java/com/networknt/config/TestConfigLoader.java":[{"declaringType":"com.networknt.config.TestConfigLoader","methodSignature":"loadObjectConfig(java.lang.String, java.lang.Class<T>, java.lang.String)","methodName":"loadObjectConfig","lineNumber":["36"],"fullExpression":"loadObjectConfig(configName, clazz, \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.TestConfigLoader","methodSignature":"loadMapConfig(java.lang.String, java.lang.String)","methodName":"loadMapConfig","lineNumber":["25","30"],"fullExpression":"loadMapConfig(configName, \"\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/main/java/com/networknt/proxy/ProxyConfig.java":[{"declaringType":"com.networknt.proxy.ProxyConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["67","80"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.ProxyConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["122","124","126","128","130","132","134","136","138","140","142"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/consul/src/test/java/com/networknt/consul/ConsulServiceTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["44","46","48","68","70","72"],"fullExpression":"Assert.assertEquals(\"{\\\"ID\\\":\\\"127.0.0.1:com.networknt.apib-1.0.0:7442\\\",\\\"Name\\\":\\\"com.networknt.apib-1.0.0\\\",\\\"Tags\\\":[\\\"protocol_light\\\"],\\\"Address\\\":\\\"127.0.0.1\\\",\\\"Port\\\":7442,\\\"Check\\\":{\\\"CheckID\\\":\\\"check-127.0.0.1:com.networknt.apib-1.0.0:7442\\\",\\\"DeregisterCriticalServiceAfter\\\":\\\"2m\\\",\\\"TCP\\\":\\\"127.0.0.1:7442\\\",\\\"Interval\\\":\\\"10s\\\"}}\", s)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/rate-limit/src/test/java/com/networknt/limit/LimitOldConfigTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["152"],"fullExpression":"Assert.assertTrue(errorList.size() > 0)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["43","66","146"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["48"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["65"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["99","128"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["48"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["90","119"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["73"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["101"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["48"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["83"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["90","119"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["89","118"],"fullExpression":"new ClientRequest().setPath(\"/\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["94","123"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["53"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["71"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["73"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["97","126"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.LimitOldConfigTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["44"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["48"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["89","118"],"fullExpression":"new ClientRequest().setPath(\"/\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["48"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["103"],"fullExpression":"Assert.assertEquals(\"OK\", body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["71"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/\", exchange -> {\n    exchange.getResponseSender().send(\"OK\");\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/basic-auth/src/test/java/com/networknt/basicauth/BasicAuthConfigTest.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["28"],"fullExpression":"LoggerFactory.getLogger(BasicAuthConfigTest.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/header/src/test/java/com/networknt/header/HeaderHandlerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["199","232","265"],"fullExpression":"Assert.assertTrue(possibleJson.contains(body))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.header.HeaderHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["63"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["69"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["85"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["69"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["106","108","110","112","131","133","135","137","156","158","160","162"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["115","140","165"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["197","230","263"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["182","183","184","185","186","215","216","217","218","219","248","249","250","251","252"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["73"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["91"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["193","226","259"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["69"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["181","214","247"],"fullExpression":"new ClientRequest().setPath(\"/get\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["55"],"fullExpression":"LoggerFactory.getLogger(HeaderHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(java.lang.String)","methodName":"getFirst","lineNumber":["95","97","99","101","106","108","110","112","120","122","124","126","131","133","135","137","145","147","149","151","156","158","160","162"],"fullExpression":"exchange.getRequestHeaders().getFirst(\"headerA\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["91","91","91"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/petstore\", exchange -> {\n    Map<String, Map<String, String>> headers = new HashMap<>();\n    Map<String, String> requestHeaders = new HashMap<>();\n    String headerA = exchange.getRequestHeaders().getFirst(\"headerA\");\n    if (headerA != null)\n        requestHeaders.put(\"headerA\", headerA);\n    String headerB = exchange.getRequestHeaders().getFirst(\"headerB\");\n    if (headerB != null)\n        requestHeaders.put(\"headerB\", headerB);\n    String keyA = exchange.getRequestHeaders().getFirst(\"keyA\");\n    if (keyA != null)\n        requestHeaders.put(\"keyA\", keyA);\n    String keyB = exchange.getRequestHeaders().getFirst(\"keyB\");\n    if (keyB != null)\n        requestHeaders.put(\"keyB\", keyB);\n    headers.put(\"requestHeaders\", requestHeaders);\n    Map<String, String> responseHeaders = new HashMap<>();\n    String headerC = exchange.getResponseHeaders().getFirst(\"headerC\");\n    if (headerC != null)\n        responseHeaders.put(\"headerC\", headerC);\n    String headerD = exchange.getResponseHeaders().getFirst(\"headerD\");\n    if (headerD != null)\n        responseHeaders.put(\"headerD\", headerD);\n    String keyC = exchange.getResponseHeaders().getFirst(\"keyC\");\n    if (keyC != null)\n        responseHeaders.put(\"keyC\", keyC);\n    String keyD = exchange.getResponseHeaders().getFirst(\"keyD\");\n    if (keyD != null)\n        responseHeaders.put(\"keyD\", keyD);\n    headers.put(\"responseHeaders\", responseHeaders);\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(headers));\n}).add(Methods.GET, \"/market\", exchange -> {\n    Map<String, Map<String, String>> headers = new HashMap<>();\n    Map<String, String> requestHeaders = new HashMap<>();\n    String headerE = exchange.getRequestHeaders().getFirst(\"headerE\");\n    if (headerE != null)\n        requestHeaders.put(\"headerE\", headerE);\n    String headerF = exchange.getRequestHeaders().getFirst(\"headerF\");\n    if (headerF != null)\n        requestHeaders.put(\"headerF\", headerF);\n    String keyE = exchange.getRequestHeaders().getFirst(\"keyE\");\n    if (keyE != null)\n        requestHeaders.put(\"keyE\", keyE);\n    String keyF = exchange.getRequestHeaders().getFirst(\"keyF\");\n    if (keyF != null)\n        requestHeaders.put(\"keyF\", keyF);\n    headers.put(\"requestHeaders\", requestHeaders);\n    Map<String, String> responseHeaders = new HashMap<>();\n    String headerG = exchange.getResponseHeaders().getFirst(\"headerG\");\n    if (headerG != null)\n        responseHeaders.put(\"headerG\", headerG);\n    String headerH = exchange.getResponseHeaders().getFirst(\"headerH\");\n    if (headerH != null)\n        responseHeaders.put(\"headerH\", headerH);\n    String keyG = exchange.getResponseHeaders().getFirst(\"keyG\");\n    if (keyG != null)\n        responseHeaders.put(\"keyG\", keyG);\n    String keyH = exchange.getResponseHeaders().getFirst(\"keyH\");\n    if (keyH != null)\n        responseHeaders.put(\"keyH\", keyH);\n    headers.put(\"responseHeaders\", responseHeaders);\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(headers));\n}).add(Methods.GET, \"/get\", exchange -> {\n    Map<String, Map<String, String>> headers = new HashMap<>();\n    Map<String, String> requestHeaders = new HashMap<>();\n    String header1 = exchange.getRequestHeaders().getFirst(\"header1\");\n    if (header1 != null)\n        requestHeaders.put(\"header1\", header1);\n    String header2 = exchange.getRequestHeaders().getFirst(\"header2\");\n    if (header2 != null)\n        requestHeaders.put(\"header2\", header1);\n    String key1 = exchange.getRequestHeaders().getFirst(\"key1\");\n    if (key1 != null)\n        requestHeaders.put(\"key1\", key1);\n    String key2 = exchange.getRequestHeaders().getFirst(\"key2\");\n    if (key2 != null)\n        requestHeaders.put(\"key2\", key2);\n    headers.put(\"requestHeaders\", requestHeaders);\n    Map<String, String> responseHeaders = new HashMap<>();\n    header1 = exchange.getResponseHeaders().getFirst(\"header1\");\n    if (header1 != null)\n        responseHeaders.put(\"header1\", header1);\n    header2 = exchange.getResponseHeaders().getFirst(\"header2\");\n    if (header2 != null)\n        responseHeaders.put(\"header2\", header1);\n    key1 = exchange.getResponseHeaders().getFirst(\"key1\");\n    if (key1 != null)\n        responseHeaders.put(\"key1\", key1);\n    key2 = exchange.getResponseHeaders().getFirst(\"key2\");\n    if (key2 != null)\n        responseHeaders.put(\"key2\", key2);\n    headers.put(\"responseHeaders\", responseHeaders);\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(headers));\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["62","86"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["195","228","261"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["182","183","184","185","186","215","216","217","218","219","248","249","250","251","252"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["181","214","247"],"fullExpression":"new ClientRequest().setPath(\"/get\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["190","223","256"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.header.HeaderHandlerTest","methodSignature":"getPossibleJson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)","methodName":"getPossibleJson","lineNumber":["198","231","264"],"fullExpression":"getPossibleJson(\"key1\", \"value1\", \"key2\", \"value2\", \"key1\", \"value1\", \"key2\", \"value2\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["69"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["95","97","99","101","120","122","124","126","145","147","149","151"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/simplepool/undertow/SimpleClientConnectionMaker.java":[{"declaringType":"io.undertow.client.UndertowClient","methodSignature":"connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.InetSocketAddress, java.net.URI, org.xnio.XnioWorker, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["91"],"fullExpression":"undertowClient.connect(connectionCallback, bindAddress, uri, worker, ssl, BUFFER_POOL, connectionOptions)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"builder()","methodName":"builder","lineNumber":["165"],"fullExpression":"OptionMap.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["85","114"],"fullExpression":"logger.debug(\"Failed to establish new connection for uri: {}\", uri)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getLocalAddress()","methodName":"getLocalAddress","lineNumber":["223"],"fullExpression":"connection.getLocalAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.undertow.SimpleClientConnectionMaker","methodSignature":"port(io.undertow.client.ClientConnection)","methodName":"port","lineNumber":["75","104"],"fullExpression":"port(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.undertow.SimpleClientConnectionMaker","methodSignature":"getConnectionOptions(boolean)","methodName":"getConnectionOptions","lineNumber":["68"],"fullExpression":"getConnectionOptions(isHttp2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap.Builder","methodSignature":"set(org.xnio.Option<T>, T)","methodName":"set","lineNumber":["165"],"fullExpression":"OptionMap.builder().set(Options.WORKER_IO_THREADS, 8).set(Options.TCP_NODELAY, true).set(Options.KEEP_ALIVE, true).set(Options.WORKER_NAME, isHttp2 ? \"Callback-HTTP2\" : \"Callback-HTTP11\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["143"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"getXnio()","methodName":"getXnio","lineNumber":["187"],"fullExpression":"getWorker(isHttp2).getXnio()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["189"],"fullExpression":"logger.error(\"Exception while creating new shared UndertowXnioSsl used to create connections\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.undertow.SimpleClientConnectionMaker","methodSignature":"getSSL(boolean, boolean)","methodName":"getSSL","lineNumber":["66"],"fullExpression":"getSSL(isHttps, isHttp2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Xnio","methodSignature":"getInstance(java.lang.ClassLoader)","methodName":"getInstance","lineNumber":["152"],"fullExpression":"Xnio.getInstance(Undertow.class.getClassLoader())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Xnio","methodSignature":"createWorker(java.lang.ThreadGroup, org.xnio.OptionMap)","methodName":"createWorker","lineNumber":["155"],"fullExpression":"xnio.createWorker(null, getWorkerOptionMap(isHttp2))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.undertow.SimpleClientConnectionMaker","methodSignature":"getWorkerOptionMap(boolean)","methodName":"getWorkerOptionMap","lineNumber":["155"],"fullExpression":"getWorkerOptionMap(isHttp2)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.undertow.SimpleClientConnectionMaker","methodSignature":"getWorker(boolean)","methodName":"getWorker","lineNumber":["67","187"],"fullExpression":"getWorker(isHttp2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"debug","lineNumber":["75","104"],"fullExpression":"logger.debug(\"New connection {} established with {}\", port(connection), uri)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap.Builder","methodSignature":"getMap()","methodName":"getMap","lineNumber":["170"],"fullExpression":"optionBuild.getMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.UndertowClient","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["90"],"fullExpression":"UndertowClient.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap.Builder","methodSignature":"set(org.xnio.Option<java.lang.Boolean>, boolean)","methodName":"set","lineNumber":["165","165"],"fullExpression":"OptionMap.builder().set(Options.WORKER_IO_THREADS, 8).set(Options.TCP_NODELAY, true).set(Options.KEEP_ALIVE, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["48"],"fullExpression":"LoggerFactory.getLogger(SimpleClientConnectionMaker.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap.Builder","methodSignature":"set(org.xnio.Option<java.lang.Integer>, int)","methodName":"set","lineNumber":["165"],"fullExpression":"OptionMap.builder().set(Options.WORKER_IO_THREADS, 8)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/api-key/src/test/java/com/networknt/apikey/ApiKeyJsonConfigTest.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["11"],"fullExpression":"LoggerFactory.getLogger(ApiKeyJsonConfigTest.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/integration/java/com/networknt/client/Http2ClientPoolIT.java":[{"declaringType":"com.networknt.client.Http2ClientPoolIT","methodSignature":"sendMessage(io.undertow.server.HttpServerExchange)","methodName":"sendMessage","lineNumber":["133","134"],"fullExpression":"sendMessage(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["137"],"fullExpression":"Assert.assertTrue(hasScopeToken)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["639"],"fullExpression":"logger.debug(\"future = \" + future)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["197"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolIT","methodSignature":"loadKeyStore(java.lang.String)","methodName":"loadKeyStore","lineNumber":["117","117"],"fullExpression":"loadKeyStore(SERVER_KEY_STORE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setDisableRequireSignature()","methodName":"setDisableRequireSignature","lineNumber":["702"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["119"],"fullExpression":"builder.addHttpListener(7777, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["239","310","347","384","463","536"],"fullExpression":"Assert.assertEquals(10, references.size())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"getXnio()","methodName":"getXnio","lineNumber":["327","364","408","481"],"fullExpression":"worker.getXnio()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["101","141","170","230","264","265","338","375","417","418","490","491","552","573"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_LENGTH, message.length() + \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setIssuedAtToNow()","methodName":"setIssuedAtToNow","lineNumber":["737"],"fullExpression":"claims.setIssuedAtToNow()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"isOpen()","methodName":"isOpen","lineNumber":["559","581"],"fullExpression":"connection.isOpen()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["658"],"fullExpression":"IoUtils.safeClose(stream)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipAllValidators()","methodName":"setSkipAllValidators","lineNumber":["702"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setStringListClaim(java.lang.String, java.util.List<java.lang.String>)","methodName":"setStringListClaim","lineNumber":["745"],"fullExpression":"claims.setStringListClaim(\"scope\", scope)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolIT","methodSignature":"getPrivateKey(java.lang.String, java.lang.String, java.lang.String)","methodName":"getPrivateKey","lineNumber":["768"],"fullExpression":"getPrivateKey(\"/config/primary.jks\", \"password\", \"selfsigned\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setIoThreads(int)","methodName":"setIoThreads","lineNumber":["124"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"now()","methodName":"now","lineNumber":["712"],"fullExpression":"NumericDate.now()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"close()","methodName":"close","lineNumber":["104"],"fullExpression":"sender.close()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"setResponseListener(io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>)","methodName":"setResponseListener","lineNumber":["270","423","496"],"fullExpression":"result.setResponseListener(new ClientCallback<ClientExchange>() {\n\n    @Override\n    public void completed(ClientExchange result) {\n        new StringReadChannelListener(Http2Client.BUFFER_POOL) {\n\n            @Override\n            protected void stringDone(String string) {\n                responses.add(string);\n                latch.countDown();\n            }\n\n            @Override\n            protected void error(IOException e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n        }.setup(result.getResponseChannel());\n    }\n\n    @Override\n    public void failed(IOException e) {\n        e.printStackTrace();\n        latch.countDown();\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setExpirationTime(org.jose4j.jwt.NumericDate)","methodName":"setExpirationTime","lineNumber":["727"],"fullExpression":"claims.setExpirationTime(NumericDate.fromMilliseconds(System.currentTimeMillis() + expiredInSeconds * 1000))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["229","263","337","374","416","489","551","572"],"fullExpression":"new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setStatusCode(int)","methodName":"setStatusCode","lineNumber":["100"],"fullExpression":"exchange.setStatusCode(StatusCodes.OK)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolIT","methodSignature":"createClient()","methodName":"createClient","lineNumber":["217","252","322","359","402","475","546","567"],"fullExpression":"createClient()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["806"],"fullExpression":"logger.error(\"Failed to retrieve private key from keystore\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(boolean)","methodName":"assertFalse","lineNumber":["140"],"fullExpression":"Assert.assertFalse(expired)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"getExpirationTime()","methodName":"getExpirationTime","lineNumber":["712"],"fullExpression":"jwtClaims.getExpirationTime()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolIT","methodSignature":"getJwt(org.jose4j.jwt.JwtClaims)","methodName":"getJwt","lineNumber":["728"],"fullExpression":"getJwt(claims)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["229","263","337","374","416","489","551","572"],"fullExpression":"new ClientRequest().setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["716","802"],"fullExpression":"logger.error(\"MalformedClaimException:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setWorkerThreads(int)","methodName":"setWorkerThreads","lineNumber":["124"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setSocketOption(Options.SSL_ENABLED_PROTOCOLS, Sequence.of(\"TLSv1.2\")).setHandler(new PathHandler().addExactPath(MESSAGE, exchange -> sendMessage(exchange)).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n}))).setWorkerThreads(200)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setAudience(java.lang.String)","methodName":"setAudience","lineNumber":["734"],"fullExpression":"claims.setAudience(\"urn:com.networknt\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setBufferSize(int)","methodName":"setBufferSize","lineNumber":["124"],"fullExpression":"builder.setBufferSize(1024 * 16)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"setPayload(java.lang.String)","methodName":"setPayload","lineNumber":["777"],"fullExpression":"jws.setPayload(claims.toJson())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"add(io.undertow.util.HttpString, java.lang.String)","methodName":"add","lineNumber":["554","575"],"fullExpression":"request.getRequestHeaders().add(Headers.CONNECTION, Headers.CLOSE.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setClaim(java.lang.String, java.lang.Object)","methodName":"setClaim","lineNumber":["739","741","742","743"],"fullExpression":"claims.setClaim(\"version\", \"1.0\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["136","138"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["242","312","465","538","559","581"],"fullExpression":"Assert.assertEquals(\"HTTP/1.1\", reference.get().getProtocol().toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumer","methodSignature":"process(java.lang.String)","methodName":"process","lineNumber":["708"],"fullExpression":"consumer.process(jwt)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolIT","methodSignature":"randInt(int, int)","methodName":"randInt","lineNumber":["157","620"],"fullExpression":"randInt(1, 3)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["124"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setSocketOption(Options.SSL_ENABLED_PROTOCOLS, Sequence.of(\"TLSv1.2\")).setHandler(new PathHandler().addExactPath(MESSAGE, exchange -> sendMessage(exchange)).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n}))).setWorkerThreads(200).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKey(java.security.Key)","methodName":"setKey","lineNumber":["780"],"fullExpression":"jws.setKey(privateKey)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKeyIdHeaderValue(java.lang.String)","methodName":"setKeyIdHeaderValue","lineNumber":["781"],"fullExpression":"jws.setKeyIdHeaderValue(\"100\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["101","141","170"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["102","142","150","171","181"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["121","124","124","124"],"fullExpression":"builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["366","483"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"sendRequest(io.undertow.client.ClientRequest, io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>)","methodName":"sendRequest","lineNumber":["266","419","492"],"fullExpression":"connection.sendRequest(request, new ClientCallback<ClientExchange>() {\n\n    @Override\n    public void completed(ClientExchange result) {\n        new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());\n        result.setResponseListener(new ClientCallback<ClientExchange>() {\n\n            @Override\n            public void completed(ClientExchange result) {\n                new StringReadChannelListener(Http2Client.BUFFER_POOL) {\n\n                    @Override\n                    protected void stringDone(String string) {\n                        responses.add(string);\n                        latch.countDown();\n                    }\n\n                    @Override\n                    protected void error(IOException e) {\n                        e.printStackTrace();\n                        latch.countDown();\n                    }\n                }.setup(result.getResponseChannel());\n            }\n\n            @Override\n            public void failed(IOException e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n        });\n    }\n\n    @Override\n    public void failed(IOException e) {\n        e.printStackTrace();\n        latch.countDown();\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpsListener(int, java.lang.String, javax.net.ssl.SSLContext)","methodName":"addHttpsListener","lineNumber":["118"],"fullExpression":"builder.addHttpsListener(7778, \"localhost\", sslContext)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.PathHandler","methodSignature":"addExactPath(java.lang.String, io.undertow.server.HttpHandler)","methodName":"addExactPath","lineNumber":["132","132","132","132","132","132"],"fullExpression":"new PathHandler().addExactPath(MESSAGE, exchange -> sendMessage(exchange)).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n}))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["187"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["103","150","181"],"fullExpression":"sender.send(message)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtContext","methodSignature":"getJwtClaims()","methodName":"getJwtClaims","lineNumber":["709"],"fullExpression":"jwtContext.getJwtClaims()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"fromMilliseconds(long)","methodName":"fromMilliseconds","lineNumber":["727"],"fullExpression":"NumericDate.fromMilliseconds(System.currentTimeMillis() + expiredInSeconds * 1000)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolIT","methodSignature":"getJwt(int)","methodName":"getJwt","lineNumber":["166"],"fullExpression":"getJwt(5)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["124"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setSocketOption(Options.SSL_ENABLED_PROTOCOLS, Sequence.of(\"TLSv1.2\")).setHandler(new PathHandler().addExactPath(MESSAGE, exchange -> sendMessage(exchange)).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["242","554","575"],"fullExpression":"reference.get().getProtocol().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolIT","methodSignature":"getJwtFromAuthorization(java.lang.String)","methodName":"getJwtFromAuthorization","lineNumber":["699"],"fullExpression":"getJwtFromAuthorization(authorization)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["702"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification().build()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolIT","methodSignature":"createClient(org.xnio.OptionMap)","methodName":"createClient","lineNumber":["207"],"fullExpression":"createClient(OptionMap.EMPTY)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolIT","methodSignature":"callApiAsyncMultiThread(int)","methodName":"callApiAsyncMultiThread","lineNumber":["592","604","616"],"fullExpression":"callApiAsyncMultiThread(4)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["223","259","331","368","389","412","485"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        for (int i = 0; i < 10; i++) {\n            AtomicReference<ClientResponse> reference = new AtomicReference<>();\n            references.add(i, reference);\n            final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);\n            request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n            connection.sendRequest(request, client.createClientCallback(reference, latch));\n        }\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["593","605","618"],"fullExpression":"logger.info(\"called times: \" + i)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setNotBeforeMinutesInThePast(float)","methodName":"setNotBeforeMinutesInThePast","lineNumber":["738"],"fullExpression":"claims.setNotBeforeMinutesInThePast(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["230","264","265","338","375","417","418","490","491","552","554","573","575"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"getValue()","methodName":"getValue","lineNumber":["712","712"],"fullExpression":"NumericDate.now().getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolIT","methodSignature":"createSSLContext(java.security.KeyStore, java.security.KeyStore, boolean)","methodName":"createSSLContext","lineNumber":["117"],"fullExpression":"createSSLContext(loadKeyStore(SERVER_KEY_STORE), loadKeyStore(SERVER_TRUST_STORE), false)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"shutdown()","methodName":"shutdown","lineNumber":["193"],"fullExpression":"worker.shutdown()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolIT","methodSignature":"isTokenExpired(java.lang.String)","methodName":"isTokenExpired","lineNumber":["139"],"fullExpression":"isTokenExpired(scopeToken)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getRequestChannel()","methodName":"getRequestChannel","lineNumber":["269","422","495"],"fullExpression":"result.getRequestChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.StringWriteChannelListener","methodSignature":"setup(org.xnio.channels.StreamSinkChannel)","methodName":"setup","lineNumber":["269","422","495"],"fullExpression":"new StringWriteChannelListener(postMessage).setup(result.getRequestChannel())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Xnio","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["110"],"fullExpression":"Xnio.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getResponseChannel()","methodName":"getResponseChannel","lineNumber":["286","439","512"],"fullExpression":"result.getResponseChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setIssuer(java.lang.String)","methodName":"setIssuer","lineNumber":["733"],"fullExpression":"claims.setIssuer(\"urn:com:networknt:oauth2:v1\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientPoolIT","methodSignature":"getTestClaims()","methodName":"getTestClaims","lineNumber":["726"],"fullExpression":"getTestClaims()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["223","259","331","368","389","412","485"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipSignatureVerification()","methodName":"setSkipSignatureVerification","lineNumber":["702"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"toJson()","methodName":"toJson","lineNumber":["777"],"fullExpression":"claims.toJson()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setExpirationTimeMinutesInTheFuture(float)","methodName":"setExpirationTimeMinutesInTheFuture","lineNumber":["735"],"fullExpression":"claims.setExpirationTimeMinutesInTheFuture(10)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setGeneratedJwtId()","methodName":"setGeneratedJwtId","lineNumber":["736"],"fullExpression":"claims.setGeneratedJwtId()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setSocketOption(org.xnio.Option<T>, T)","methodName":"setSocketOption","lineNumber":["124","124"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setSocketOption(Options.SSL_ENABLED_PROTOCOLS, Sequence.of(\"TLSv1.2\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getProtocol()","methodName":"getProtocol","lineNumber":["242"],"fullExpression":"reference.get().getProtocol()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"getCompactSerialization()","methodName":"getCompactSerialization","lineNumber":["787"],"fullExpression":"jws.getCompactSerialization()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["115"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestReceiver()","methodName":"getRequestReceiver","lineNumber":["147","153","178"],"fullExpression":"exchange.getRequestReceiver()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Receiver","methodSignature":"receiveFullString(io.undertow.io.Receiver.FullStringCallback)","methodName":"receiveFullString","lineNumber":["147","153","178"],"fullExpression":"exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.StringReadChannelListener","methodSignature":"setup(org.xnio.channels.StreamSourceChannel)","methodName":"setup","lineNumber":["273","426","499"],"fullExpression":"new StringReadChannelListener(Http2Client.BUFFER_POOL) {\n\n    @Override\n    protected void stringDone(String string) {\n        responses.add(string);\n        latch.countDown();\n    }\n\n    @Override\n    protected void error(IOException e) {\n        e.printStackTrace();\n        latch.countDown();\n    }\n}.setup(result.getResponseChannel())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setAlgorithmHeaderValue(java.lang.String)","methodName":"setAlgorithmHeaderValue","lineNumber":["784"],"fullExpression":"jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/proxy-handler/src/main/java/com/networknt/handler/config/UrlRewriteRule.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["11"],"fullExpression":"LoggerFactory.getLogger(UrlRewriteRule.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isErrorEnabled()","methodName":"isErrorEnabled","lineNumber":["45"],"fullExpression":"LOG.isErrorEnabled()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/Timer.java":[{"declaringType":"io.dropwizard.metrics.Timer","methodSignature":"getFifteenMinuteRate()","methodName":"getFifteenMinuteRate","lineNumber":["196"],"fullExpression":"this.getFifteenMinuteRate()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Timer.Context","methodSignature":"stop()","methodName":"stop","lineNumber":["57"],"fullExpression":"stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Timer","methodSignature":"getCount()","methodName":"getCount","lineNumber":["192"],"fullExpression":"this.getCount()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Timer","methodSignature":"getFiveMinuteRate()","methodName":"getFiveMinuteRate","lineNumber":["195"],"fullExpression":"this.getFiveMinuteRate()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Timer","methodSignature":"getMeanRate()","methodName":"getMeanRate","lineNumber":["193"],"fullExpression":"this.getMeanRate()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Timer","methodSignature":"update(long)","methodName":"update","lineNumber":["107"],"fullExpression":"update(unit.toNanos(duration))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Timer","methodSignature":"getOneMinuteRate()","methodName":"getOneMinuteRate","lineNumber":["194"],"fullExpression":"this.getOneMinuteRate()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Timer","methodSignature":"update(long, java.util.concurrent.TimeUnit)","methodName":"update","lineNumber":["50"],"fullExpression":"timer.update(elapsed, TimeUnit.NANOSECONDS)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/rule-loader/src/main/java/com/networknt/rule/RuleLoaderConfig.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["104"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["99"],"fullExpression":"logger.trace(\"endpointRules = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["104"],"fullExpression":"logger.info(\"endpointRules missing or wrong type.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["99"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["11"],"fullExpression":"LoggerFactory.getLogger(RuleLoaderConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.rule.RuleLoaderConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["38","52"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.rule.RuleLoaderConfig","methodSignature":"setMapData()","methodName":"setMapData","lineNumber":["39","53"],"fullExpression":"setMapData()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/MetricRegistryTest.java":[{"declaringType":"org.mockito.Mockito","methodSignature":"never()","methodName":"never","lineNumber":["223"],"fullExpression":"never()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/security/src/test/java/com/networknt/security/ClaimsUtil.java":[{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setStringListClaim(java.lang.String, java.util.List<java.lang.String>)","methodName":"setStringListClaim","lineNumber":["31","41","48","55","88"],"fullExpression":"claims.setStringListClaim(\"scope\", scope)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setClaim(java.lang.String, java.lang.Object)","methodName":"setClaim","lineNumber":["27","28","29","30","37","38","39","40","47","54","61","62","68","69","70","76","77","83","84","85","86","87"],"fullExpression":"claims.setClaim(\"user_id\", userId)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler/src/main/java/com/networknt/handler/Interceptor.java":[{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["62","66"],"fullExpression":"headers.getFirst(Headers.CONTENT_TYPE)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/data-source/src/test/java/com/networknt/db/GenericDataSourceTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["36","42","55","58","68","71","81","84","94","97","107","110","120","123","133","136"],"fullExpression":"assertNotNull(ds)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.zaxxer.hikari.HikariConfig","methodSignature":"getMaximumPoolSize()","methodName":"getMaximumPoolSize","lineNumber":["39","48"],"fullExpression":"hds.getMaximumPoolSize()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/portal-registry/src/test/java/com/networknt/portal/registry/PortalRegistryServiceTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["40","42"],"fullExpression":"Assert.assertEquals(\"{\\\"serviceId\\\":\\\"com.networknt.apib-1.0.0\\\",\\\"name\\\":\\\"apib\\\",\\\"tag\\\":\\\"uat1\\\",\\\"protocol\\\":\\\"https\\\",\\\"address\\\":\\\"127.0.0.1\\\",\\\"port\\\":7442,\\\"check\\\":{\\\"id\\\":\\\"com.networknt.apib-1.0.0|uat1:https:127.0.0.1:7442\\\",\\\"deregisterCriticalServiceAfter\\\":120000,\\\"healthPath\\\":\\\"/health/\\\",\\\"tlsSkipVerify\\\":true,\\\"interval\\\":10000}}\", s)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/portal-registry/src/main/java/com/networknt/portal/registry/client/PortalRegistryClientImpl.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["49"],"fullExpression":"logger.debug(\"url = {}\", portalUrl)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["72","97","116","139","174"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"toString()","methodName":"toString","lineNumber":["216"],"fullExpression":"reference.get().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["205","206","211","212"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["62","87","170"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["48"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"trace","lineNumber":["207","216"],"fullExpression":"logger.trace(\"The request sent to controller: {} = request header: {}, request body is empty\", uri.toString(), request.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["205","206","211","212"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["53","77","102","123","145","183"],"fullExpression":"logger.error(\"Invalid URI \" + portalUrl, e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["204"],"fullExpression":"new ClientRequest().setMethod(method)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"toString()","methodName":"toString","lineNumber":["207"],"fullExpression":"request.toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["62","87","170"],"fullExpression":"logger.trace(\"checkPass id = {}\", checkId)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["204"],"fullExpression":"new ClientRequest().setMethod(method).setPath(path)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["34"],"fullExpression":"LoggerFactory.getLogger(PortalRegistryClientImpl.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.portal.registry.client.PortalRegistryClientImpl","methodSignature":"send(io.undertow.client.ClientConnection, io.undertow.util.HttpString, java.lang.String, java.lang.String, java.lang.String)","methodName":"send","lineNumber":["115","138","173"],"fullExpression":"send(connection, Methods.POST, path, token, json)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/DefaultObjectNameFactory.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Object...)","methodName":"warn","lineNumber":["42"],"fullExpression":"LOGGER.warn(\"Unable to register {} {}\", type, name, e1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["27"],"fullExpression":"LoggerFactory.getLogger(DefaultObjectNameFactory.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config-reload/src/main/java/com/networknt/config/reload/handler/ConfigReloadHandler.java":[{"declaringType":"com.networknt.config.reload.handler.ConfigReloadHandler","methodSignature":"processReloadMethod(java.lang.Class<?>)","methodName":"processReloadMethod","lineNumber":["108"],"fullExpression":"processReloadMethod(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["80"],"fullExpression":"exchange.getResponseSender().send(mapper.writeValueAsString(reloaded))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.reload.handler.ConfigReloadHandler","methodSignature":"reLoadConfigs()","methodName":"reLoadConfigs","lineNumber":["58"],"fullExpression":"reLoadConfigs()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["78"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["80"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.reload.handler.ConfigReloadHandler","methodSignature":"reloadPlugin(java.lang.String)","methodName":"reloadPlugin","lineNumber":["72"],"fullExpression":"reloadPlugin(module)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"add(io.undertow.util.HttpString, java.lang.String)","methodName":"add","lineNumber":["78"],"fullExpression":"exchange.getResponseHeaders().add(new HttpString(\"Content-Type\"), \"application/json\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"writeValueAsString(java.lang.Object)","methodName":"writeValueAsString","lineNumber":["80"],"fullExpression":"mapper.writeValueAsString(reloaded)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.reload.handler.ConfigReloadHandler","methodSignature":"reloadModule(java.lang.String)","methodName":"reloadModule","lineNumber":["69"],"fullExpression":"reloadModule(module)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ldap-util/src/main/java/com/networknt/ldap/LdapUtil.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["48","51","55","84"],"fullExpression":"logger.debug(\"user '\" + username + \"' authentication succeeded\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["48","51","55","84"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.ldap.LdapUtil","methodSignature":"ldapContext()","methodName":"ldapContext","lineNumber":["74","139"],"fullExpression":"ldapContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.ldap.LdapUtil","methodSignature":"getUid(java.lang.String)","methodName":"getUid","lineNumber":["44"],"fullExpression":"getUid(username)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.ldap.LdapUtil","methodSignature":"ldapContext(java.util.Hashtable<java.lang.String, java.lang.String>)","methodName":"ldapContext","lineNumber":["120"],"fullExpression":"ldapContext(env)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["21"],"fullExpression":"LoggerFactory.getLogger(LdapUtil.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["59","93"],"fullExpression":"logger.error(\"Exception:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["80"],"fullExpression":"logger.error(\"Principal name '\" + username + \"' not found\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.ldap.LdapUtil","methodSignature":"testBind(java.lang.String, java.lang.String)","methodName":"testBind","lineNumber":["47"],"fullExpression":"testBind(dn, password)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/http-entity/src/main/java/com/networknt/http/HttpMethod.java":[{"declaringType":"com.networknt.http.HttpMethod","methodSignature":"values()","methodName":"values","lineNumber":["37"],"fullExpression":"values()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.HttpMethod","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["62"],"fullExpression":"resolve(method)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/consul/src/main/java/com/networknt/consul/ConsulThreadMonitor.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["42"],"fullExpression":"logger.debug(\"Service {} checked in on time\", checkin.getKey())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["11"],"fullExpression":"LoggerFactory.getLogger(ConsulThreadMonitor.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object)","methodName":"error","lineNumber":["37","40"],"fullExpression":"logger.error(\"Service {} has missed its check in... Shutting down host...\", checkin.getKey())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["44","45"],"fullExpression":"logger.error(\"Consul Monitor Thread Interrupted\", i)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ldap-util/src/main/java/com/networknt/ldap/LdapSSLSocketFactory.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["16"],"fullExpression":"LoggerFactory.getLogger(LdapSSLSocketFactory.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/main/java/com/networknt/router/middleware/TokenHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["191"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["85","210"],"fullExpression":"logger.info(\"TokenHandler is loaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["93","105","112","134"],"fullExpression":"logger.debug(\"TokenHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["127"],"fullExpression":"logger.trace(\"Authorization header is used with \" + (token.length() > 10 ? token.substring(0, 10) : token))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["123","126"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["94"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["121"],"fullExpression":"exchange.getRequestHeaders().getFirst(Headers.AUTHORIZATION)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["85","210"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"getFirst()","methodName":"getFirst","lineNumber":["99"],"fullExpression":"headerValues.getFirst()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.TokenHandler","methodSignature":"getJwtToken(java.lang.String)","methodName":"getJwtToken","lineNumber":["108"],"fullExpression":"getJwtToken(serviceId)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["93","105","112","134"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["80"],"fullExpression":"LoggerFactory.getLogger(TokenHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["97","121","124","130"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["103"],"fullExpression":"logger.error(\"The serviceId cannot be resolved. Do you have PathPrefixServiceHandler or ServiceDictHandler before this handler?\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sidecar/src/main/java/com/networknt/router/middleware/SidecarTokenHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["22"],"fullExpression":"logger.debug(\"SidecarTokenHandler is constructed\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["33","36","40","43"],"fullExpression":"logger.trace(\"SidecarTokenHandler.handleRequest ends with calling TokenHandler\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["22"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["26","31","33","36","40","43"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"trace","lineNumber":["31"],"fullExpression":"logger.trace(\"SidecarTokenHandler.handleRequest serviceId {} and serviceUrl {}.\", serviceId, serviceUrl)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["15"],"fullExpression":"LoggerFactory.getLogger(SidecarTokenHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"peekFirst()","methodName":"peekFirst","lineNumber":["29"],"fullExpression":"serviceIdHeader.peekFirst()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["28","30"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestScheme()","methodName":"getRequestScheme","lineNumber":["39"],"fullExpression":"exchange.getRequestScheme()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/utility/src/test/java/com/networknt/utility/CodeVerifierUtilTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["36"],"fullExpression":"Assert.assertTrue(c1.equals(c2))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/traceability-config/src/main/java/com/networknt/traceability/TraceabilityConfig.java":[{"declaringType":"com.networknt.traceability.TraceabilityConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["38","54","59"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.traceability.TraceabilityConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["79","80"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/body/src/test/java/com/networknt/body/BodyHandlerTest.java":[{"declaringType":"com.networknt.body.BodyHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["65"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["69"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["85"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["69"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["95","97","103","109","135"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["165","202","243"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["154","187","188","189","228","229","230","269","270","271","304","305","306","339","340","341","374","375","376","408","410","441","443","474","475","476","515","516","517"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["73"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["91"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["95","97","103","109","135"],"fullExpression":"exchange.getResponseSender().send(\"nobody\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["161","198","239","281","316","351","386","419","452","485","526"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["69"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["153","186","227","268","303","338","373","407","440","473","514"],"fullExpression":"new ClientRequest().setPath(\"/get\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["57"],"fullExpression":"LoggerFactory.getLogger(BodyHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["91","91"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/get\", exchange -> {\n    Object body = exchange.getAttachment(AttachmentConstants.REQUEST_BODY);\n    if (body == null) {\n        exchange.getResponseSender().send(\"nobody\");\n    } else {\n        exchange.getResponseSender().send(\"body\");\n    }\n}).add(Methods.POST, \"/post\", exchange -> {\n    Object body = exchange.getAttachment(AttachmentConstants.REQUEST_BODY);\n    if (body == null) {\n        exchange.getResponseSender().send(\"nobody\");\n    } else {\n        if (body instanceof List) {\n            String resp = \"[\" + ((List<Object>) body).stream().map(n -> n.toString()).collect(Collectors.joining(\",\")) + \"]\";\n            exchange.getResponseSender().send(resp);\n        } else if (body instanceof Map) {\n            Map<String, Object> map = (Map<String, Object>) body;\n            String resp = \"\";\n            if (map.size() > 0 && map.values().iterator().next() instanceof List) {\n                resp = \"{\" + ((Map<String, FormData.FormValue>) body).entrySet().stream().map(entry -> {\n                    Object value = entry.getValue();\n                    if (value instanceof List) {\n                        // Handle List case\n                        String listValue = ((List<?>) value).stream().map(n -> n instanceof FormData.FormValue ? ((FormData.FormValue) n).getValue() : n.toString()).collect(Collectors.joining(\",\"));\n                        return entry.getKey() + \":\" + \"[\" + listValue + \"]\";\n                    } else {\n                        // Handle non-List case\n                        return entry.getKey() + \":\" + \"[\" + value.toString() + \"]\";\n                    }\n                }).collect(Collectors.joining(\",\")) + \"}\";\n            } else {\n                resp = \"{\" + ((Map<String, Object>) body).entrySet().stream().map(entry -> entry.getKey() + \":\" + entry.getValue()).collect(Collectors.joining(\",\")) + \"}\";\n            }\n            exchange.getResponseSender().send(resp);\n        }\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["183","224","265","300","335","370","404","437","470","511"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(\"/post\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, post));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["64","86"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["163","200","241"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["154","187","188","189","228","229","230","269","270","271","304","305","306","339","340","341","374","375","376","408","410","441","443","474","475","476","515","516","517"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.form.FormData.FormValue","methodSignature":"getValue()","methodName":"getValue","lineNumber":["120"],"fullExpression":"((FormData.FormValue) n).getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["153","186","227","268","303","338","373","407","440","473","514"],"fullExpression":"new ClientRequest().setPath(\"/get\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["158","195","236","278","313","348","383","416","449","482","523"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["183","224","265","300","335","370","404","437","470","511"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["69"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["166"],"fullExpression":"Assert.assertEquals(\"nobody\", body)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/test/java/com/networknt/proxy/mras/MrasHandlerTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["32","55"],"fullExpression":"logger.info(\"starting serverconfig\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["37"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["54"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["92","126"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["37"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["83","115","116","117"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["62","65"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["94","129"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["37"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["76","107"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["83","115","116","117"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["82","114"],"fullExpression":"new ClientRequest().setPath(\"/mras\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["87","121"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["42"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["60"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["62","65"],"fullExpression":"exchange.getResponseSender().send(\"POST OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.mras.MrasHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["33"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["90","124"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["37"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["82","114"],"fullExpression":"new ClientRequest().setPath(\"/mras\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["26"],"fullExpression":"LoggerFactory.getLogger(MrasHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["37"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["96"],"fullExpression":"Assert.assertEquals(\"GET OK\", body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["60","60"],"fullExpression":"Handlers.routing().add(Methods.POST, \"/mras\", exchange -> {\n    exchange.getResponseSender().send(\"POST OK\");\n}).add(Methods.GET, \"/mras\", exchange -> {\n    exchange.getResponseSender().send(\"GET OK\");\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/utility/src/main/java/com/networknt/utility/FingerPrintUtil.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["37"],"fullExpression":"logger.error(\"Exception:\", e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server/src/main/java/com/networknt/server/Server.java":[{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["357"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"getLight4jProduct()","methodName":"getLight4jProduct","lineNumber":["347"],"fullExpression":"getLight4jProduct()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["271"],"fullExpression":"builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"loadConfigs()","methodName":"loadConfigs","lineNumber":["115"],"fullExpression":"loadConfigs()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.GracefulShutdownHandler","methodSignature":"shutdown()","methodName":"shutdown","lineNumber":["377"],"fullExpression":"gracefulShutdownHandler.shutdown()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["296"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"buildTrustManagers(java.security.KeyStore)","methodName":"buildTrustManagers","lineNumber":["467","469"],"fullExpression":"buildTrustManagers(loadTrustStore())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"getLight4jVersion()","methodName":"getLight4jVersion","lineNumber":["347"],"fullExpression":"getLight4jVersion()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"shutdown()","methodName":"shutdown","lineNumber":["352","398"],"fullExpression":"shutdown()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["65"],"fullExpression":"LoggerFactory.getLogger(Server.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["192","224","303","494"],"fullExpression":"logger.error(errMessage)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"register(java.lang.String)","methodName":"register","lineNumber":["321"],"fullExpression":"register(id)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"stop()","methodName":"stop","lineNumber":["390"],"fullExpression":"stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["109","308","326","336","345","376","383","391","555","559"],"fullExpression":"logger.info(\"server starts\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"serverOptionInit()","methodName":"serverOptionInit","lineNumber":["279"],"fullExpression":"serverOptionInit()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"middlewareInit()","methodName":"middlewareInit","lineNumber":["175"],"fullExpression":"middlewareInit()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"bind(io.undertow.server.HttpHandler, int)","methodName":"bind","lineNumber":["202","211"],"fullExpression":"bind(gracefulShutdownHandler, randomPort)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"buildKeyManagers(java.security.KeyStore, char[])","methodName":"buildKeyManagers","lineNumber":["464"],"fullExpression":"buildKeyManagers(loadKeyStore(), keyPass.toCharArray())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"loadTrustStore()","methodName":"loadTrustStore","lineNumber":["467"],"fullExpression":"loadTrustStore()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"addDaemonShutdownHook()","methodName":"addDaemonShutdownHook","lineNumber":["165"],"fullExpression":"addDaemonShutdownHook()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"loadKeyStore()","methodName":"loadKeyStore","lineNumber":["464"],"fullExpression":"loadKeyStore()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["135","381","432","450","477"],"fullExpression":"logger.error(\"Server is not operational! Failed with exception\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"createSSLContext()","methodName":"createSSLContext","lineNumber":["256"],"fullExpression":"createSSLContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"start()","methodName":"start","lineNumber":["132"],"fullExpression":"start()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"getAddress()","methodName":"getAddress","lineNumber":["312"],"fullExpression":"getAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["307","326","331","335","340","344","370","528","538","544"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"mergeStatusConfig()","methodName":"mergeStatusConfig","lineNumber":["121"],"fullExpression":"mergeStatusConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setSocketOption(org.xnio.Option<T>, T)","methodName":"setSocketOption","lineNumber":["275"],"fullExpression":"builder.setSocketOption(Options.SSL_CLIENT_AUTH_MODE, SslClientAuthMode.REQUIRED)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["253"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String, java.lang.Throwable)","methodName":"info","lineNumber":["538","544"],"fullExpression":"logger.info(\"Failed to register service, start the server without registry.\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.Server","methodSignature":"init()","methodName":"init","lineNumber":["105"],"fullExpression":"init()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/rule-loader/src/main/java/com/networknt/rule/FineGrainedAuthAction.java":[{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"getClaimValue(java.lang.String)","methodName":"getClaimValue","lineNumber":["32"],"fullExpression":"jwtClaims.getClaimValue(\"roles\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/basic-auth/src/test/java/com/networknt/basicauth/AnonymousBearerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["132","223"],"fullExpression":"Assert.assertNotNull(responseBody)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["59","81"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.AnonymousBearerTest","methodSignature":"encodeCredentialsFullFormat(java.lang.String, java.lang.String, java.lang.String)","methodName":"encodeCredentialsFullFormat","lineNumber":["103"],"fullExpression":"encodeCredentialsFullFormat(username, password, \":\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["80"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["128","158","188","218"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.AnonymousBearerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["60"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["64"],"fullExpression":"Undertow.builder().addHttpListener(17352, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["119","149","178","179","208","209"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.codec.binary.Base64","methodSignature":"encodeBase64(byte[])","methodName":"encodeBase64","lineNumber":["97"],"fullExpression":"Base64.encodeBase64(cred.getBytes(UTF_8))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["86"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["130","159","189","221"],"fullExpression":"Assert.assertEquals(401, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["119","149","178","179","208","209"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["118","148","177","207"],"fullExpression":"new ClientRequest().setPath(\"/v2/wrong\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["123","153","183","213"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["68"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["86"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["86"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["126","156","186","216"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["118","148","177","207"],"fullExpression":"new ClientRequest().setPath(\"/v2/wrong\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["52"],"fullExpression":"LoggerFactory.getLogger(AnonymousBearerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["64"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["86"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/v2/pet\", exchange -> exchange.getResponseSender().send(\"OK\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/balance/src/main/java/com/networknt/balance/LocalFirstLoadBalance.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["51"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["51"],"fullExpression":"logger.info(\"A LocalFirstLoadBalance instance is started\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String)","methodName":"warn","lineNumber":["115"],"fullExpression":"logger.warn(\"Warn ipToLong address is wrong: address =\" + address)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.balance.LocalFirstLoadBalance","methodSignature":"ipToLong(java.lang.String)","methodName":"ipToLong","lineNumber":["92"],"fullExpression":"ipToLong(ip)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["39"],"fullExpression":"LoggerFactory.getLogger(LocalFirstLoadBalance.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/consul/src/main/java/com/networknt/consul/ConsulHeartbeatManager.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["105","124"],"fullExpression":"logger.info(\"heartbeat switcher change to \" + switcherStatus)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.consul.ConsulHeartbeatManager","methodSignature":"processHeartbeat(boolean)","methodName":"processHeartbeat","lineNumber":["74","79"],"fullExpression":"processHeartbeat(switcherStatus)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["37"],"fullExpression":"LoggerFactory.getLogger(ConsulHeartbeatManager.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["85","173"],"fullExpression":"logger.error(\"consul heartbeat executor err:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["115"],"fullExpression":"logger.error(\"execute heartbeat job fail! serviceId:\" + serviceId + \" is rejected\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.consul.ConsulHeartbeatManager","methodSignature":"isSwitcherChange(boolean)","methodName":"isSwitcherChange","lineNumber":["73"],"fullExpression":"isSwitcherChange(switcherStatus)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.consul.ConsulHeartbeatManager","methodSignature":"isHeartbeatOpen()","methodName":"isHeartbeatOpen","lineNumber":["72"],"fullExpression":"isHeartbeatOpen()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/consul/src/main/java/com/networknt/consul/ConsulRecoveryManager.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["32"],"fullExpression":"logger.debug(\"Starting Consul Thread Monitor...\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["74"],"fullExpression":"logger.debug(\"Service {} checking in\", serviceName)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["11"],"fullExpression":"LoggerFactory.getLogger(ConsulRecoveryManager.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"error","lineNumber":["58"],"fullExpression":"logger.error(\"Recovery mode: Fixing Consul Connection for service {} - attempt {}...\", serviceName, recoveryAttempts)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["68"],"fullExpression":"logger.error(\"System shutdown initiated - Consul connection could not be reestablished\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.consul.ConsulRecoveryManager","methodSignature":"startConsulThreadMonitor()","methodName":"startConsulThreadMonitor","lineNumber":["26"],"fullExpression":"startConsulThreadMonitor()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/oauth/LongestExpireCacheStrategyTest.java":[{"declaringType":"com.networknt.client.oauth.LongestExpireCacheStrategyTest","methodSignature":"createJwts(int, long)","methodName":"createJwts","lineNumber":["18","37"],"fullExpression":"createJwts(4, initExpiryTime)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["36"],"fullExpression":"Assert.assertEquals(cachedQueue.size(), 4)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.oauth.LongestExpireCacheStrategyTest","methodSignature":"getScopes(int)","methodName":"getScopes","lineNumber":["53"],"fullExpression":"getScopes(i + 1)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/Slf4jReporterTest.java":[{"declaringType":"org.mockito.Mockito","methodSignature":"verify(T)","methodName":"verify","lineNumber":["72","87","116","149","194","226","241","270","303","347"],"fullExpression":"verify(logger)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled(org.slf4j.Marker)","methodName":"isInfoEnabled","lineNumber":["219","233","262","295","339"],"fullExpression":"logger.isInfoEnabled(marker)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Slf4jReporterTest","methodSignature":"gauge(T)","methodName":"gauge","lineNumber":["66","220"],"fullExpression":"gauge(\"value\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Slf4jReporterTest","methodSignature":"map()","methodName":"map","lineNumber":["67","68","69","70","81","83","84","85","110","111","113","114","143","144","145","147","188","189","190","191","221","222","223","224","235","237","238","239","264","265","267","268","297","298","299","301","341","342","343","344"],"fullExpression":"this.map()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodSignature":"thenReturn(T)","methodName":"thenReturn","lineNumber":["65","79","108","141","186","219","233","262","295","339"],"fullExpression":"when(logger.isErrorEnabled(marker)).thenReturn(true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isErrorEnabled(org.slf4j.Marker)","methodName":"isErrorEnabled","lineNumber":["65","79","108","141","186"],"fullExpression":"logger.isErrorEnabled(marker)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"when(T)","methodName":"when","lineNumber":["65","79","108","141","186","219","233","262","295","339"],"fullExpression":"when(logger.isErrorEnabled(marker))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(org.slf4j.Marker, java.lang.String, java.lang.Object...)","methodName":"error","lineNumber":["72","87","116","149","194"],"fullExpression":"verify(logger).error(marker, \"type={}, name={}, value={}\", \"GAUGE\", \"gauge\", \"value\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"mock(java.lang.Class<T>)","methodName":"mock","lineNumber":["41","42"],"fullExpression":"mock(Logger.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(org.slf4j.Marker, java.lang.String, java.lang.Object...)","methodName":"info","lineNumber":["226","241","270","303","347"],"fullExpression":"verify(logger).info(marker, \"type={}, name={}, value={}\", \"GAUGE\", \"prefix.gauge\", \"value\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/utility/src/main/java/com/networknt/utility/HashUtil.java":[{"declaringType":"org.apache.commons.codec.binary.Base64","methodSignature":"encodeBase64URLSafeString(byte[])","methodName":"encodeBase64URLSafeString","lineNumber":["50"],"fullExpression":"base64.encodeBase64URLSafeString(bb.array())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/limit-config/src/main/java/com/networknt/limit/LimitKey.java":[{"declaringType":"com.networknt.limit.LimitKey","methodSignature":"values()","methodName":"values","lineNumber":["15"],"fullExpression":"LimitKey.values()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/switcher/src/main/java/com/networknt/switcher/LocalSwitcherService.java":[{"declaringType":"com.networknt.switcher.LocalSwitcherService","methodSignature":"setValue(java.lang.String, boolean)","methodName":"setValue","lineNumber":["57"],"fullExpression":"setValue(switcherName, initialValue)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ldap-util/src/main/java/com/networknt/ldap/LdapConfig.java":[{"declaringType":"com.networknt.ldap.LdapConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["38","51"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/http/Http2ServiceRequest.java":[{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"get(io.undertow.util.HttpString)","methodName":"get","lineNumber":["261","264","270","271"],"fullExpression":"this.clientRequest.getRequestHeaders().get(Headers.CONTENT_TYPE)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Http2ServiceRequest","methodSignature":"processClientRequest()","methodName":"processClientRequest","lineNumber":["82"],"fullExpression":"processClientRequest()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["217","223","228","233","261","262","264","265","270","271","273"],"fullExpression":"this.clientRequest.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["52","62","74"],"fullExpression":"new ClientRequest().setMethod(method).setPath(uri.getPath())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"writeValueAsString(java.lang.Object)","methodName":"writeValueAsString","lineNumber":["205"],"fullExpression":"this.objectMapper.writeValueAsString(requestBody)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["223","228","265","273"],"fullExpression":"this.clientRequest.getRequestHeaders().put(new HttpString(headerName), headerValue)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["52","62","74"],"fullExpression":"new ClientRequest().setMethod(method)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, long)","methodName":"put","lineNumber":["233"],"fullExpression":"this.clientRequest.getRequestHeaders().put(new HttpString(headerName), headerValue)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/test/java/com/networknt/config/ConfigDecryptTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["49","57","75","81"],"fullExpression":"Assert.assertTrue(testArray.size() > 0)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["42","45","52","60","78","84","96","108"],"fullExpression":"Assert.assertEquals(SECRET, secretMap.get(\"serverKeystorePass\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/JmxAttributeGaugeTest.java":[{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isGreaterThan(int)","methodName":"isGreaterThan","lineNumber":["74"],"fullExpression":"assertThat((Integer) gauge.getValue()).isGreaterThan(0)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isEqualTo(long)","methodName":"isEqualTo","lineNumber":["99"],"fullExpression":"assertThat((Long) gauge.getValue()).isEqualTo(Long.MAX_VALUE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Long)","methodName":"assertThat","lineNumber":["99"],"fullExpression":"assertThat((Long) gauge.getValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Integer)","methodName":"assertThat","lineNumber":["74"],"fullExpression":"assertThat((Integer) gauge.getValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.JmxAttributeGaugeTest","methodSignature":"registerMBean(javax.management.ObjectName)","methodName":"registerMBean","lineNumber":["53","54"],"fullExpression":"registerMBean(new ObjectName(\"JmxAttributeGaugeTest:type=test,name=test1\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/Striped64.java":[{"declaringType":"io.dropwizard.metrics.Striped64","methodSignature":"casBase(long, long)","methodName":"casBase","lineNumber":["274"],"fullExpression":"casBase(v = base, fn(v, x))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Striped64","methodSignature":"casBusy()","methodName":"casBusy","lineNumber":["215","243","260"],"fullExpression":"casBusy()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Striped64.Cell","methodSignature":"cas(long, long)","methodName":"cas","lineNumber":["237"],"fullExpression":"a.cas(v = a.value, fn(v, x))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Striped64","methodSignature":"fn(long, long)","methodName":"fn","lineNumber":["237","274"],"fullExpression":"fn(v, x)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/consul/src/test/java/com/networknt/consul/ConsulHeartbeatManagerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["86","88"],"fullExpression":"assertTrue(heartbeatTimes > lastHeartbeatTimes)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.consul.ConsulHeartbeatManagerTest","methodSignature":"checkHeartbeat(java.util.Map<java.lang.String, java.lang.Long>, boolean, int)","methodName":"checkHeartbeat","lineNumber":["68","73"],"fullExpression":"checkHeartbeat(mockServices, true, serviceNum)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.consul.ConsulHeartbeatManagerTest","methodSignature":"setHeartbeatSwitcher(boolean)","methodName":"setHeartbeatSwitcher","lineNumber":["67","71"],"fullExpression":"setHeartbeatSwitcher(true)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/prometheus/src/main/java/com/networknt/metrics/prometheus/PrometheusGetHandler.java":[{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["53"],"fullExpression":"exchange.getResponseSender().send(writer.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.prometheus.client.exporter.common.TextFormat","methodSignature":"write004(java.io.Writer, java.util.Enumeration<io.prometheus.client.Collector.MetricFamilySamples>)","methodName":"write004","lineNumber":["49"],"fullExpression":"TextFormat.write004(writer, registry.metricFamilySamples())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.prometheus.client.CollectorRegistry","methodSignature":"metricFamilySamples()","methodName":"metricFamilySamples","lineNumber":["49"],"fullExpression":"registry.metricFamilySamples()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["53"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["39"],"fullExpression":"LoggerFactory.getLogger(PrometheusGetHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["51"],"fullExpression":"logger.error(\"error on put result:\", e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/UniformReservoirTest.java":[{"declaringType":"org.assertj.core.api.AbstractDoubleAssert","methodSignature":"isLessThan(double)","methodName":"isLessThan","lineNumber":["44"],"fullExpression":"assertThat(i).isLessThan(1000)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(double)","methodName":"assertThat","lineNumber":["44"],"fullExpression":"assertThat(i)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sanitizer/src/test/java/com/networknt/sanitizer/SanitizerHandlerWithEncodeTypeTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["92"],"fullExpression":"Assert.assertNotNull(body)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["93"],"fullExpression":"Assert.assertTrue(body.contains(\"<script>alert(\\\\'header test\\\\')</script>\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["69"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(\"/header\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n        request.getRequestHeaders().put(new HttpString(\"param\"), \"<script>alert('header test')</script>\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, post));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["36","51"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["50"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["88"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["73","74","75","76"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["89"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["73","74","75","76"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["72"],"fullExpression":"new ClientRequest().setMethod(Methods.POST)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["83"],"fullExpression":"logger.error(\"IOException: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["38"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["69"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["86"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["72"],"fullExpression":"new ClientRequest().setMethod(Methods.POST).setPath(\"/header\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/main/java/com/networknt/config/ConfigInjection.java":[{"declaringType":"com.networknt.config.ConfigInjection.InjectionPattern","methodSignature":"getErrorText()","methodName":"getErrorText","lineNumber":["164"],"fullExpression":"injectionPattern.getErrorText()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.ConfigInjection.InjectionPattern","methodSignature":"getKey()","methodName":"getKey","lineNumber":["132","138","140","141","146","148","149"],"fullExpression":"injectionPattern.getKey()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.ConfigInjection","methodSignature":"getInjectionPattern(java.lang.String)","methodName":"getInjectionPattern","lineNumber":["126"],"fullExpression":"getInjectionPattern(content)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.ConfigInjection","methodSignature":"convertEnvVars(java.lang.String)","methodName":"convertEnvVars","lineNumber":["132"],"fullExpression":"convertEnvVars(injectionPattern.getKey())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.ConfigInjection.InjectionPattern","methodSignature":"setKey(java.lang.String)","methodName":"setKey","lineNumber":["192"],"fullExpression":"injectionPattern.setKey(array[0])","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.ConfigInjection.InjectionPattern","methodSignature":"setDefaultValue(java.lang.String)","methodName":"setDefaultValue","lineNumber":["202","206","210"],"fullExpression":"injectionPattern.setDefaultValue(\"\\\\$\\\\{\" + array[0] + \"\\\\}\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.ConfigInjection","methodSignature":"getValue(java.lang.String, boolean)","methodName":"getValue","lineNumber":["76"],"fullExpression":"getValue(m.group(1), decrypt)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.ConfigInjection.InjectionPattern","methodSignature":"setErrorText(java.lang.String)","methodName":"setErrorText","lineNumber":["198"],"fullExpression":"injectionPattern.setErrorText(array[1].substring(1))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.ConfigInjection","methodSignature":"typeCast(java.lang.String)","methodName":"typeCast","lineNumber":["161"],"fullExpression":"typeCast(injectionPattern.getDefaultValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.ConfigInjection.InjectionPattern","methodSignature":"getDefaultValue()","methodName":"getDefaultValue","lineNumber":["161"],"fullExpression":"injectionPattern.getDefaultValue()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/info/src/test/java/com/networknt/info/ServerInfoGetHandlerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["108"],"fullExpression":"Assert.assertNotNull(body)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["54","73"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["105"],"fullExpression":"logger.debug(\"body = \" + body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["56"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["72"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["103"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["56"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["94"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["106"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["94"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["93"],"fullExpression":"new ClientRequest().setPath(\"/server/info\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["98"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["60"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["78"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["101"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.info.ServerInfoGetHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["55"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["56"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["93"],"fullExpression":"new ClientRequest().setPath(\"/server/info\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["47"],"fullExpression":"LoggerFactory.getLogger(ServerInfoGetHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["56"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ldap-util/src/test/java/com/networknt/ldap/LdapAuthTest.java":[{"declaringType":"com.networknt.ldap.LdapAuthTest","methodSignature":"ldapContext()","methodName":"ldapContext","lineNumber":["46","118"],"fullExpression":"ldapContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.ldap.LdapAuthTest","methodSignature":"ldapContext(java.util.Hashtable<java.lang.String, java.lang.String>)","methodName":"ldapContext","lineNumber":["28"],"fullExpression":"ldapContext(env)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.ldap.LdapAuthTest","methodSignature":"testBind(java.lang.String, java.lang.String)","methodName":"testBind","lineNumber":["99"],"fullExpression":"testBind(dn, password)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["16"],"fullExpression":"LoggerFactory.getLogger(LdapAuthTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.ldap.LdapAuthTest","methodSignature":"getUid(java.lang.String)","methodName":"getUid","lineNumber":["95"],"fullExpression":"getUid(user)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server/src/main/java/com/networknt/server/JsonPathStartupHookProvider.java":[{"declaringType":"com.networknt.server.JsonPathStartupHookProvider","methodSignature":"configJsonPath()","methodName":"configJsonPath","lineNumber":["38"],"fullExpression":"configJsonPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.Configuration","methodSignature":"setDefaults(com.jayway.jsonpath.Configuration.Defaults)","methodName":"setDefaults","lineNumber":["42"],"fullExpression":"Configuration.setDefaults(new Configuration.Defaults() {\n\n    private final JsonProvider jsonProvider = new JacksonJsonProvider();\n\n    private final MappingProvider mappingProvider = new JacksonMappingProvider();\n\n    @Override\n    public JsonProvider jsonProvider() {\n        return jsonProvider;\n    }\n\n    @Override\n    public MappingProvider mappingProvider() {\n        return mappingProvider;\n    }\n\n    @Override\n    public Set<Option> options() {\n        return EnumSet.noneOf(Option.class);\n    }\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/main/java/com/networknt/config/yml/ConfigLoaderConstructor.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["36"],"fullExpression":"logger.debug(\"creating config loader {}.\", configLoaderClass)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["15"],"fullExpression":"LoggerFactory.getLogger(ConfigLoaderConstructor.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.yml.ConfigLoaderConstructor","methodSignature":"createConfigLoader(java.lang.String)","methodName":"createConfigLoader","lineNumber":["25"],"fullExpression":"createConfigLoader(configLoaderClass)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["42","45"],"fullExpression":"logger.error(\"Please specify an implementing class of com.networknt.config.ConfigLoader.\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/basic-auth/src/test/java/com/networknt/basicauth/BasicAuthHandlerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["135"],"fullExpression":"Assert.assertNotNull(responseBody)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["61","83"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["82"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["131","162","192","221","253","285","317","349","385"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["66"],"fullExpression":"Undertow.builder().addHttpListener(17352, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["121","122","152","153","182","183","212","243","244","275","276","307","308","339","340","375","376"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.codec.binary.Base64","methodSignature":"encodeBase64(byte[])","methodName":"encodeBase64","lineNumber":["99"],"fullExpression":"Base64.encodeBase64(cred.getBytes(UTF_8))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["88"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["133","163","193","222","254","286","318","350","386"],"fullExpression":"Assert.assertEquals(401, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.BasicAuthHandlerTest","methodSignature":"encodeCredentialsFullFormat(java.lang.String, java.lang.String, java.lang.String)","methodName":"encodeCredentialsFullFormat","lineNumber":["105","244"],"fullExpression":"encodeCredentialsFullFormat(username, password, \":\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["121","122","152","153","182","183","212","243","244","275","276","307","308","339","340","375","376"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["120","151","181","211","242","274","306","338","374"],"fullExpression":"new ClientRequest().setPath(\"/v2/pet\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["126","157","187","216","248","280","312","344","380"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["70"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["88"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["88"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.BasicAuthHandlerTest","methodSignature":"encodeCredentials(java.lang.String, java.lang.String)","methodName":"encodeCredentials","lineNumber":["122","153","183","276","308","340"],"fullExpression":"encodeCredentials(\"user1\", \"user1pass\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["129","160","190","219","251","283","315","347","383"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.BasicAuthHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["62"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["120","151","181","211","242","274","306","338","374"],"fullExpression":"new ClientRequest().setPath(\"/v2/pet\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["54"],"fullExpression":"LoggerFactory.getLogger(BasicAuthHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["66"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["88"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/v2/pet\", exchange -> exchange.getResponseSender().send(\"OK\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/registry/src/main/java/com/networknt/registry/support/FailbackRegistry.java":[{"declaringType":"com.networknt.registry.support.FailbackRegistry","methodSignature":"retry()","methodName":"retry","lineNumber":["68"],"fullExpression":"retry()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["46"],"fullExpression":"LoggerFactory.getLogger(FailbackRegistry.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/dump/src/test/java/com/networknt/dump/DumpHandlerTest.java":[{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["110"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(\"/pet\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(HttpStringConstants.TRACEABILITY_ID, \"tid\");\n        request.getRequestHeaders().put(Headers.AUTHORIZATION, \"Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5MDAzNTcwOSwianRpIjoiSTJnSmdBSHN6NzJEV2JWdUFMdUU2QSIsImlhdCI6MTQ3NDY3NTcwOSwibmJmIjoxNDc0Njc1NTg5LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.mue6eh70kGS3Nt2BCYz7ViqwO7lh_4JSFwcHYdJMY6VfgKTHhsIGKq2uEDt3zwT56JFAePwAxENMGUTGvgceVneQzyfQsJeVGbqw55E9IfM_uSM-YcHwTfR7eSLExN4pbqzVDI353sSOvXxA98ZtJlUZKgXNE1Ngun3XFORCRIB_eH8B0FY_nT_D1Dq2WJrR-re-fbR6_va95vwoUdCofLRa4IpDfXXx19ZlAtfiVO44nw6CS8O87eGfAm7rCMZIzkWlCOFWjNHnCeRsh7CVdEH34LF-B48beiG5lM7h4N12-EME8_VDefgMjZ8eqs1ICvJMxdIut58oYbdnkwTjkA\");\n        request.getRequestHeaders().put(HttpStringConstants.SCOPE_TOKEN, \"Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5MDAzNTcwOSwianRpIjoiSTJnSmdBSHN6NzJEV2JWdUFMdUU2QSIsImlhdCI6MTQ3NDY3NTcwOSwibmJmIjoxNDc0Njc1NTg5LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.mue6eh70kGS3Nt2BCYz7ViqwO7lh_4JSFwcHYdJMY6VfgKTHhsIGKq2uEDt3zwT56JFAePwAxENMGUTGvgceVneQzyfQsJeVGbqw55E9IfM_uSM-YcHwTfR7eSLExN4pbqzVDI353sSOvXxA98ZtJlUZKgXNE1Ngun3XFORCRIB_eH8B0FY_nT_D1Dq2WJrR-re-fbR6_va95vwoUdCofLRa4IpDfXXx19ZlAtfiVO44nw6CS8O87eGfAm7rCMZIzkWlCOFWjNHnCeRsh7CVdEH34LF-B48beiG5lM7h4N12-EME8_VDefgMjZ8eqs1ICvJMxdIut58oYbdnkwTjkA\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, post));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["58","86"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["69"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["85"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["69"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["114","115","116","117","118"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["92"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["114","116","118"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["113"],"fullExpression":"new ClientRequest().setMethod(Methods.POST)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["125"],"fullExpression":"logger.error(\"IOException: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.dump.DumpHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["59"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["73"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["91"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["110"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["92"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getStatus()","methodName":"getStatus","lineNumber":["130"],"fullExpression":"reference.get().getStatus()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["128"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["69"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["113"],"fullExpression":"new ClientRequest().setMethod(Methods.POST).setPath(\"/pet\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["51"],"fullExpression":"LoggerFactory.getLogger(DumpHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["69"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["130"],"fullExpression":"Assert.assertEquals(\"OK\", reference.get().getStatus())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["91"],"fullExpression":"Handlers.routing().add(Methods.POST, \"/pet\", exchange -> exchange.getResponseSender().send(\"OK\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/DefaultAsyncResult.java":[{"declaringType":"com.networknt.client.DefaultAsyncResult","methodSignature":"succeed(T)","methodName":"succeed","lineNumber":["40"],"fullExpression":"succeed(null)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/encode-decode/src/test/java/com/networknt/EncodeDecodeHandlerTest.java":[{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["83"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(pathHandler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["99"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["61"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["83"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["62","74"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["132","142","144"],"fullExpression":"Assert.assertEquals(StatusCodes.OK, result.getStatusLine().getStatusCode())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["61"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_LENGTH, message.length() + \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.message.AbstractHttpMessage","methodSignature":"setHeader(java.lang.String, java.lang.String)","methodName":"setHeader","lineNumber":["130"],"fullExpression":"get.setHeader(Headers.ACCEPT_ENCODING_STRING, encoding)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.EncodeDecodeHandlerTest","methodSignature":"runTest(java.lang.String, java.lang.String)","methodName":"runTest","lineNumber":["110","111","117","122"],"fullExpression":"runTest(sb.toString(), \"deflate\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.HttpMessage","methodSignature":"getHeaders(java.lang.String)","methodName":"getHeaders","lineNumber":["133"],"fullExpression":"result.getHeaders(Headers.CONTENT_ENCODING_STRING)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["87"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.NameValuePair","methodSignature":"getValue()","methodName":"getValue","lineNumber":["134"],"fullExpression":"header[0].getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.nio.ByteBuffer)","methodName":"send","lineNumber":["74"],"fullExpression":"exchange.getResponseSender().send(ByteBuffer.wrap(message))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["83"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(pathHandler)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.client.methods.HttpEntityEnclosingRequestBase","methodSignature":"setEntity(org.apache.http.HttpEntity)","methodName":"setEntity","lineNumber":["138"],"fullExpression":"post.setEntity(new ByteArrayEntity(body))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["46"],"fullExpression":"LoggerFactory.getLogger(EncodeDecodeHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.StatusLine","methodSignature":"getStatusCode()","methodName":"getStatusCode","lineNumber":["132","142"],"fullExpression":"result.getStatusLine().getStatusCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.HttpResponse","methodSignature":"getStatusLine()","methodName":"getStatusLine","lineNumber":["132","142"],"fullExpression":"result.getStatusLine()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["54","100"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.impl.client.CloseableHttpClient","methodSignature":"execute(org.apache.http.client.methods.HttpUriRequest)","methodName":"execute","lineNumber":["131","141"],"fullExpression":"client.execute(get)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodSignature":"build()","methodName":"build","lineNumber":["127"],"fullExpression":"HttpClientBuilder.create().disableContentCompression().build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Receiver","methodSignature":"receiveFullBytes(io.undertow.io.Receiver.FullBytesCallback)","methodName":"receiveFullBytes","lineNumber":["71"],"fullExpression":"exchange.getRequestReceiver().receiveFullBytes(new Receiver.FullBytesCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, byte[] message) {\n        exchange.getResponseSender().send(ByteBuffer.wrap(message));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodSignature":"disableContentCompression()","methodName":"disableContentCompression","lineNumber":["127"],"fullExpression":"HttpClientBuilder.create().disableContentCompression()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.message.AbstractHttpMessage","methodSignature":"addHeader(java.lang.String, java.lang.String)","methodName":"addHeader","lineNumber":["139"],"fullExpression":"post.addHeader(Headers.CONTENT_ENCODING_STRING, encoding)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["83"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestReceiver()","methodName":"getRequestReceiver","lineNumber":["71"],"fullExpression":"exchange.getRequestReceiver()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["134","145"],"fullExpression":"Assert.assertEquals(encoding, header[0].getValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String, io.undertow.io.IoCallback)","methodName":"send","lineNumber":["62"],"fullExpression":"exchange.getResponseSender().send(message, IoCallback.END_EXCHANGE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodSignature":"create()","methodName":"create","lineNumber":["127"],"fullExpression":"HttpClientBuilder.create()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/resource/src/test/java/com/networknt/resource/PathResourceConfigHandlerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["107"],"fullExpression":"Assert.assertTrue(body.contains(\"This is just a test\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["53","72"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["71"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["103","138"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["55"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["94","129"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["105","140"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["94","129"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["93","128"],"fullExpression":"new ClientRequest().setPath(\"/view/index.html\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["98","133"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["59"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["101","136"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["93","128"],"fullExpression":"new ClientRequest().setPath(\"/view/index.html\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["46"],"fullExpression":"LoggerFactory.getLogger(PathResourceConfigHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["55"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/UniformSnapshot.java":[{"declaringType":"io.dropwizard.metrics.UniformSnapshot","methodSignature":"getMean()","methodName":"getMean","lineNumber":["184"],"fullExpression":"getMean()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/test/java/com/networknt/router/RouterConfigTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["84","97","110"],"fullExpression":"Assert.assertEquals(targetURL, s)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/security/src/main/java/com/networknt/security/SwtVerifier.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["34"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["34"],"fullExpression":"logger.info(\"SwtVerifier is constructed.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["64"],"fullExpression":"logger.trace(\"swt = \" + swt + requestPathOrSwtServiceIds instanceof String ? \" requestPath = \" + requestPathOrSwtServiceIds : \" swtServiceIds = \" + requestPathOrSwtServiceIds + \" clientId = \" + clientId + \" clientSecret = \" + clientSecret)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["63","129","135","140"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["26"],"fullExpression":"LoggerFactory.getLogger(SwtVerifier.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.SwtVerifier","methodSignature":"inspectToken(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)","methodName":"inspectToken","lineNumber":["93","105","122"],"fullExpression":"inspectToken(swt, config)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/rule-loader/src/main/java/com/networknt/rule/RuleLoaderStartupHook.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["71","87","125"],"fullExpression":"logger.debug(\"getServiceById result = \" + serviceString)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["111"],"fullExpression":"logger.info(\"Rule Loader is not enabled and skipped loading rules from the portal.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["151","181"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["147","148","178"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.rule.RuleLoaderStartupHook","methodSignature":"loadPluginClass()","methodName":"loadPluginClass","lineNumber":["108"],"fullExpression":"loadPluginClass()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["140","171"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["148","178"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["131","158","188"],"fullExpression":"logger.error(\"Exception:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["146","177"],"fullExpression":"new ClientRequest().setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["62","98","111"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.rule.RuleLoaderStartupHook","methodSignature":"loadActionClass(java.lang.String)","methodName":"loadActionClass","lineNumber":["120"],"fullExpression":"loadActionClass(actionClass)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["71","87","125"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["146","177"],"fullExpression":"new ClientRequest().setMethod(Methods.GET).setPath(message)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["38"],"fullExpression":"LoggerFactory.getLogger(RuleLoaderStartupHook.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/main/java/com/networknt/router/RouterHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["144"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["101","108"],"fullExpression":"logger.debug(\"RouterHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["144"],"fullExpression":"logger.info(\"RouterHandler is reloaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["101","108"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["69","117"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["50"],"fullExpression":"LoggerFactory.getLogger(RouterHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["93","141"],"fullExpression":"logger.error(\"An instance of MetricsHandler is not configured in the handler.yml.\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/rate-limit/src/main/java/com/networknt/limit/key/JwtHeaderClientIdKeyResolver.java":[{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"getFirst()","methodName":"getFirst","lineNumber":["33"],"fullExpression":"values.getFirst()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"get(java.lang.String)","methodName":"get","lineNumber":["32"],"fullExpression":"headerMap.get(\"Client-Id\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["31"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/audit-config/src/main/java/com/networknt/audit/AuditConfig.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["163","183"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["163","183"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditConfig","methodSignature":"getHeaderList()","methodName":"getHeaderList","lineNumber":["132","132"],"fullExpression":"getHeaderList()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["34"],"fullExpression":"LoggerFactory.getLogger(AuditConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["78","94"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditConfig","methodSignature":"setLists()","methodName":"setLists","lineNumber":["76","92"],"fullExpression":"setLists()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditConfig","methodSignature":"setLogLevel()","methodName":"setLogLevel","lineNumber":["77","93"],"fullExpression":"setLogLevel()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditConfig","methodSignature":"getAuditList()","methodName":"getAuditList","lineNumber":["136","136"],"fullExpression":"getAuditList()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["152","160","161","175","176","180","181","195","196","203","205","207","209","215","217"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/main/java/com/networknt/config/yml/DecryptConstructor.java":[{"declaringType":"com.networknt.config.yml.DecryptConstructor","methodSignature":"createDecryptor(java.lang.String)","methodName":"createDecryptor","lineNumber":["34"],"fullExpression":"createDecryptor(decryptorClass)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["53"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.yml.DecryptConstructor.ConstructYamlDecryptedStr","methodSignature":"constructDecryptedScalar(org.yaml.snakeyaml.nodes.ScalarNode)","methodName":"constructDecryptedScalar","lineNumber":["80"],"fullExpression":"constructDecryptedScalar((ScalarNode) node)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["54"],"fullExpression":"logger.trace(\"creating decryptor {}\", decryptorClass)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["20"],"fullExpression":"LoggerFactory.getLogger(DecryptConstructor.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.yaml.snakeyaml.nodes.ScalarNode","methodSignature":"getValue()","methodName":"getValue","lineNumber":["84"],"fullExpression":"node.getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["63","66"],"fullExpression":"logger.error(\"Please specify an implementing class of com.networknt.decrypt.Decryptor.\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/prometheus/src/test/java/com/networknt/metrics/prometheus/PrometheusHandlerTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["54","78"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["61"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["77"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["110"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["61"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["100","101"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["84"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["112"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["100","101"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["99"],"fullExpression":"new ClientRequest().setPath(\"/v2/pet/111\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["105"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.metrics.prometheus.PrometheusHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["55"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["65"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["83"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["84"],"fullExpression":"exchange.getResponseSender().send(\"test\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["108"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["61"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["99"],"fullExpression":"new ClientRequest().setPath(\"/v2/pet/111\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["47"],"fullExpression":"LoggerFactory.getLogger(PrometheusHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["61"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["113"],"fullExpression":"Assert.assertEquals(\"test\", body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["83"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/v2/pet/{petId}\", exchange -> exchange.getResponseSender().send(\"test\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ip-whitelist/src/main/java/com/networknt/whitelist/WhitelistHandler.java":[{"declaringType":"com.networknt.whitelist.WhitelistHandler","methodSignature":"isAllowed(java.net.InetAddress, java.lang.String)","methodName":"isAllowed","lineNumber":["66"],"fullExpression":"isAllowed(peer.getAddress(), reqPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["83"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["51","56","102"],"fullExpression":"logger.info(\"WhitelistHandler is constructed.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["62","72"],"fullExpression":"logger.debug(\"WhitelistHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["67","118"],"fullExpression":"logger.trace(\"Invalid IP for the path\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["65","67","118","121","131","134","142"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"trace","lineNumber":["65","131"],"fullExpression":"logger.trace(\"IP = {} request path = {}\", peer.toString(), reqPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["64"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"endExchange()","methodName":"endExchange","lineNumber":["69"],"fullExpression":"exchange.endExchange()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistHandler.PeerMatch","methodSignature":"isDeny()","methodName":"isDeny","lineNumber":["121","122","134","135"],"fullExpression":"rule.isDeny()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["51","56","102"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getSourceAddress()","methodName":"getSourceAddress","lineNumber":["63"],"fullExpression":"exchange.getSourceAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["62","72"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistHandler.PeerMatch","methodSignature":"matches(java.net.InetAddress)","methodName":"matches","lineNumber":["120","133"],"fullExpression":"rule.matches(address)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["121","134"],"fullExpression":"logger.trace(\"Found matched rule for address and rule isAllow {}\", !rule.isDeny())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["37"],"fullExpression":"LoggerFactory.getLogger(WhitelistHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistHandler","methodSignature":"findIpAcl(java.lang.String)","methodName":"findIpAcl","lineNumber":["116","129"],"fullExpression":"findIpAcl(reqPath)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/utility/src/main/java/com/networknt/utility/Util.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["98"],"fullExpression":"logger.debug(\"path = \" + path)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["43"],"fullExpression":"LoggerFactory.getLogger(Util.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["90"],"fullExpression":"logger.error(\"Error in getting InetAddress\", ioe)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.codec.binary.Base64","methodSignature":"encodeBase64URLSafeString(byte[])","methodName":"encodeBase64URLSafeString","lineNumber":["57"],"fullExpression":"Base64.encodeBase64URLSafeString(bb.array())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/request-transformer/src/test/java/com/networknt/reqtrans/RequestTransformerInterceptorTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["111"],"fullExpression":"Assert.assertNotNull(body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["43"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["59"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["43"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["70"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["107"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.reqtrans.RequestTransformerInterceptorTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["39"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["92","93","94"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["47"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["65"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["70"],"fullExpression":"exchange.getResponseSender().send(s)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["104"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["43"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["91"],"fullExpression":"new ClientRequest().setMethod(Methods.POST).setPath(\"/post\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["31"],"fullExpression":"LoggerFactory.getLogger(RequestTransformerInterceptorTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["65"],"fullExpression":"Handlers.routing().add(Methods.POST, \"/post\", exchange -> {\n    PooledByteBuffer[] bufferedData = exchange.getAttachment(AttachmentConstants.BUFFERED_REQUEST_DATA_KEY);\n    String s = BuffersUtils.toString(bufferedData, StandardCharsets.UTF_8);\n    System.out.println(\"updated request body = \" + s);\n    exchange.getResponseSender().send(s);\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["88"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(\"/post\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, post));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["38","60"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["106"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["92","93","94"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["91"],"fullExpression":"new ClientRequest().setMethod(Methods.POST)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["101"],"fullExpression":"logger.error(\"IOException: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["88"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["43"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["112"],"fullExpression":"Assert.assertEquals(\"[{\\\"com.networknt.handler.RequestInterceptorHandler\\\":[\\\"com.networknt.reqtrans.RequestTransformerHandler\\\"]}]\", body)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/deref-token/src/test/java/com/networknt/deref/DerefMiddlewareHandlerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["156"],"fullExpression":"Assert.assertNotNull(body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["62","71"],"fullExpression":"Undertow.builder().addHttpListener(8887, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["106","119"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["62","71"],"fullExpression":"Undertow.builder().addHttpListener(8887, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["86","94"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["87","95"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["153"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.deref.DerefMiddlewareHandlerTest","methodSignature":"getOAuthHandler()","methodName":"getOAuthHandler","lineNumber":["73"],"fullExpression":"getOAuthHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["86","94","142","143"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"path()","methodName":"path","lineNumber":["81","92"],"fullExpression":"Handlers.path()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["66","75"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.PathHandler","methodSignature":"addPrefixPath(java.lang.String, io.undertow.server.HttpHandler)","methodName":"addPrefixPath","lineNumber":["81","92"],"fullExpression":"Handlers.path().addPrefixPath(\"/api\", (exchange) -> {\n    // check if the Authorization header contains JWT token here.\n    String authHeader = exchange.getRequestHeaders().getFirst(Headers.AUTHORIZATION);\n    Assert.assertEquals(\"Bearer \" + token, authHeader);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(\"OK\");\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["87","95"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["150"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["62","71"],"fullExpression":"Undertow.builder().addHttpListener(8887, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["141"],"fullExpression":"new ClientRequest().setPath(\"/api\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["48"],"fullExpression":"LoggerFactory.getLogger(DerefMiddlewareHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["56","70"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["152"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["142","143"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["141"],"fullExpression":"new ClientRequest().setPath(\"/api\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["147"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.deref.DerefMiddlewareHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["57"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["84"],"fullExpression":"exchange.getRequestHeaders().getFirst(Headers.AUTHORIZATION)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["62","71"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["84"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["85","157"],"fullExpression":"Assert.assertEquals(\"Bearer \" + token, authHeader)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server/src/test/java/com/networknt/server/TestHandler.java":[{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["30"],"fullExpression":"exchange.getResponseSender().send(\"Hello World!\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["30"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/registry/src/main/java/com/networknt/registry/support/DirectRegistryConfig.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["74"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String)","methodName":"warn","lineNumber":["92"],"fullExpression":"logger.warn(\"mapping is missing or wrong type.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.support.DirectRegistryConfig","methodSignature":"setMap()","methodName":"setMap","lineNumber":["25","36","49"],"fullExpression":"setMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["74"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["14"],"fullExpression":"LoggerFactory.getLogger(DirectRegistryConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["80"],"fullExpression":"logger.error(\"IOException:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.support.DirectRegistryConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["70","71","72","88","89"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/oauth/OauthHelperTest.java":[{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["59"],"fullExpression":"Undertow.builder().addHttpListener(8887, \"localhost\").setHandler(Handlers.header(Handlers.path().addPrefixPath(\"/oauth2/key\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(\"OK\");\n}).addPrefixPath(\"/oauth2/introspection\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"active\", true);\n    map.put(\"client_id\", \"bb8293f6-ceef-4e7a-90c8-1492e97df19f\");\n    map.put(\"token_type\", \"access_token\");\n    map.put(\"scope\", \"openid profile\");\n    map.put(\"sub\", \"cn=odicuser,dc=example,dc=com\");\n    map.put(\"exp\", \"86400\");\n    map.put(\"iat\", \"1506513918\");\n    map.put(\"iss\", \"https://wa.example.com\");\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(map));\n}).addPrefixPath(\"/oauth2/deref\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(token);\n}).addPrefixPath(\"/oauth2/token\", (exchange) -> {\n    // create a token that expired in 5 seconds.\n    Map<String, Object> map = new HashMap<>();\n    String token = getJwt(5);\n    map.put(\"access_token\", token);\n    map.put(\"token_type\", \"Bearer\");\n    map.put(\"expires_in\", 5);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n}), Headers.SERVER_STRING, \"U-tow\")).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKey(java.security.Key)","methodName":"setKey","lineNumber":["189"],"fullExpression":"jws.setKey(privateKey)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["107"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.InvalidJwtException","methodSignature":"hasExpired()","methodName":"hasExpired","lineNumber":["128"],"fullExpression":"e.hasExpired()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKeyIdHeaderValue(java.lang.String)","methodName":"setKeyIdHeaderValue","lineNumber":["190"],"fullExpression":"jws.setKeyIdHeaderValue(\"100\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setDisableRequireSignature()","methodName":"setDisableRequireSignature","lineNumber":["120"],"fullExpression":"new JwtConsumerBuilder().setDisableRequireSignature()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["59"],"fullExpression":"Undertow.builder().addHttpListener(8887, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["63","67","80","90"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["64","77","81","91"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["63","67","80","90"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"path()","methodName":"path","lineNumber":["61"],"fullExpression":"Handlers.path()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setIssuedAtToNow()","methodName":"setIssuedAtToNow","lineNumber":["146"],"fullExpression":"claims.setIssuedAtToNow()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["96"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.PathHandler","methodSignature":"addPrefixPath(java.lang.String, io.undertow.server.HttpHandler)","methodName":"addPrefixPath","lineNumber":["61","61","61","61"],"fullExpression":"Handlers.path().addPrefixPath(\"/oauth2/key\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(\"OK\");\n}).addPrefixPath(\"/oauth2/introspection\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"active\", true);\n    map.put(\"client_id\", \"bb8293f6-ceef-4e7a-90c8-1492e97df19f\");\n    map.put(\"token_type\", \"access_token\");\n    map.put(\"scope\", \"openid profile\");\n    map.put(\"sub\", \"cn=odicuser,dc=example,dc=com\");\n    map.put(\"exp\", \"86400\");\n    map.put(\"iat\", \"1506513918\");\n    map.put(\"iss\", \"https://wa.example.com\");\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(map));\n}).addPrefixPath(\"/oauth2/deref\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(token);\n}).addPrefixPath(\"/oauth2/token\", (exchange) -> {\n    // create a token that expired in 5 seconds.\n    Map<String, Object> map = new HashMap<>();\n    String token = getJwt(5);\n    map.put(\"access_token\", token);\n    map.put(\"token_type\", \"Bearer\");\n    map.put(\"expires_in\", 5);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["64","81"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setStringListClaim(java.lang.String, java.util.List<java.lang.String>)","methodName":"setStringListClaim","lineNumber":["154"],"fullExpression":"claims.setStringListClaim(\"scope\", scope)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"fromMilliseconds(long)","methodName":"fromMilliseconds","lineNumber":["136"],"fullExpression":"NumericDate.fromMilliseconds(System.currentTimeMillis() + expiredInSeconds * 1000)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumer","methodSignature":"processToClaims(java.lang.String)","methodName":"processToClaims","lineNumber":["126"],"fullExpression":"consumer.processToClaims(jwt)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["59"],"fullExpression":"Undertow.builder().addHttpListener(8887, \"localhost\").setHandler(Handlers.header(Handlers.path().addPrefixPath(\"/oauth2/key\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(\"OK\");\n}).addPrefixPath(\"/oauth2/introspection\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"active\", true);\n    map.put(\"client_id\", \"bb8293f6-ceef-4e7a-90c8-1492e97df19f\");\n    map.put(\"token_type\", \"access_token\");\n    map.put(\"scope\", \"openid profile\");\n    map.put(\"sub\", \"cn=odicuser,dc=example,dc=com\");\n    map.put(\"exp\", \"86400\");\n    map.put(\"iat\", \"1506513918\");\n    map.put(\"iss\", \"https://wa.example.com\");\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(map));\n}).addPrefixPath(\"/oauth2/deref\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(token);\n}).addPrefixPath(\"/oauth2/token\", (exchange) -> {\n    // create a token that expired in 5 seconds.\n    Map<String, Object> map = new HashMap<>();\n    String token = getJwt(5);\n    map.put(\"access_token\", token);\n    map.put(\"token_type\", \"Bearer\");\n    map.put(\"expires_in\", 5);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n}), Headers.SERVER_STRING, \"U-tow\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setExpirationTime(org.jose4j.jwt.NumericDate)","methodName":"setExpirationTime","lineNumber":["136"],"fullExpression":"claims.setExpirationTime(NumericDate.fromMilliseconds(System.currentTimeMillis() + expiredInSeconds * 1000))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["51"],"fullExpression":"LoggerFactory.getLogger(OauthHelperTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["120"],"fullExpression":"new JwtConsumerBuilder().setDisableRequireSignature().setSkipSignatureVerification().build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["217"],"fullExpression":"logger.error(\"Failed to retrieve private key from keystore\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["58"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setNotBeforeMinutesInThePast(float)","methodName":"setNotBeforeMinutesInThePast","lineNumber":["147"],"fullExpression":"claims.setNotBeforeMinutesInThePast(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.oauth.OauthHelperTest","methodSignature":"getPrivateKey(java.lang.String, java.lang.String, java.lang.String)","methodName":"getPrivateKey","lineNumber":["177"],"fullExpression":"getPrivateKey(\"/config/primary.jks\", \"password\", \"selfsigned\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.oauth.OauthHelperTest","methodSignature":"getTestClaims()","methodName":"getTestClaims","lineNumber":["135"],"fullExpression":"getTestClaims()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["213"],"fullExpression":"logger.error(\"Exception:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setIssuer(java.lang.String)","methodName":"setIssuer","lineNumber":["142"],"fullExpression":"claims.setIssuer(\"urn:com:networknt:oauth2:v1\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipSignatureVerification()","methodName":"setSkipSignatureVerification","lineNumber":["120"],"fullExpression":"new JwtConsumerBuilder().setDisableRequireSignature().setSkipSignatureVerification()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setAudience(java.lang.String)","methodName":"setAudience","lineNumber":["143"],"fullExpression":"claims.setAudience(\"urn:com.networknt\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"toJson()","methodName":"toJson","lineNumber":["186"],"fullExpression":"claims.toJson()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"setPayload(java.lang.String)","methodName":"setPayload","lineNumber":["186"],"fullExpression":"jws.setPayload(claims.toJson())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.oauth.OauthHelperTest","methodSignature":"getJwt(org.jose4j.jwt.JwtClaims)","methodName":"getJwt","lineNumber":["137"],"fullExpression":"getJwt(claims)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setExpirationTimeMinutesInTheFuture(float)","methodName":"setExpirationTimeMinutesInTheFuture","lineNumber":["144"],"fullExpression":"claims.setExpirationTimeMinutesInTheFuture(10)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setGeneratedJwtId()","methodName":"setGeneratedJwtId","lineNumber":["145"],"fullExpression":"claims.setGeneratedJwtId()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.oauth.OauthHelperTest","methodSignature":"getJwtFromAuthorization(java.lang.String)","methodName":"getJwtFromAuthorization","lineNumber":["118"],"fullExpression":"getJwtFromAuthorization(authorization)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"getCompactSerialization()","methodName":"getCompactSerialization","lineNumber":["198"],"fullExpression":"jws.getCompactSerialization()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setClaim(java.lang.String, java.lang.Object)","methodName":"setClaim","lineNumber":["148","150","151","152"],"fullExpression":"claims.setClaim(\"version\", \"1.0\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["59"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"header(io.undertow.server.HttpHandler, java.lang.String, java.lang.String)","methodName":"header","lineNumber":["61"],"fullExpression":"Handlers.header(Handlers.path().addPrefixPath(\"/oauth2/key\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(\"OK\");\n}).addPrefixPath(\"/oauth2/introspection\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"active\", true);\n    map.put(\"client_id\", \"bb8293f6-ceef-4e7a-90c8-1492e97df19f\");\n    map.put(\"token_type\", \"access_token\");\n    map.put(\"scope\", \"openid profile\");\n    map.put(\"sub\", \"cn=odicuser,dc=example,dc=com\");\n    map.put(\"exp\", \"86400\");\n    map.put(\"iat\", \"1506513918\");\n    map.put(\"iss\", \"https://wa.example.com\");\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(map));\n}).addPrefixPath(\"/oauth2/deref\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(token);\n}).addPrefixPath(\"/oauth2/token\", (exchange) -> {\n    // create a token that expired in 5 seconds.\n    Map<String, Object> map = new HashMap<>();\n    String token = getJwt(5);\n    map.put(\"access_token\", token);\n    map.put(\"token_type\", \"Bearer\");\n    map.put(\"expires_in\", 5);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n}), Headers.SERVER_STRING, \"U-tow\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.oauth.OauthHelperTest","methodSignature":"getJwt(int)","methodName":"getJwt","lineNumber":["86"],"fullExpression":"getJwt(5)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setAlgorithmHeaderValue(java.lang.String)","methodName":"setAlgorithmHeaderValue","lineNumber":["193"],"fullExpression":"jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/audit/src/test/java/com/networknt/audit/AuditHandlerWithAuditOnErrorTestBase.java":[{"declaringType":"org.mockito.Mockito","methodSignature":"times(int)","methodName":"times","lineNumber":["59"],"fullExpression":"times(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditHandlerWithAuditOnErrorTestBase","methodSignature":"verifyAuditErrorStatus()","methodName":"verifyAuditErrorStatus","lineNumber":["55"],"fullExpression":"verifyAuditErrorStatus()","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.spi.ILoggingEvent","methodSignature":"getFormattedMessage()","methodName":"getFormattedMessage","lineNumber":["61"],"fullExpression":"event.getFormattedMessage()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.ArgumentMatchers","methodSignature":"eq(T)","methodName":"eq","lineNumber":["33"],"fullExpression":"eq(\"audit\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["63"],"fullExpression":"Assert.assertEquals(\"{statusCode=401, code=ERR10001, severity=ERROR, message=AUTH_TOKEN_EXPIRED, description=Jwt token in authorization header expired}\", mapValue.get(\"Status\").toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"doReturn(java.lang.Object)","methodName":"doReturn","lineNumber":["33"],"fullExpression":"doReturn(originAuditConfig)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/com/networknt/metrics/APMAgentReporter.java":[{"declaringType":"com.networknt.metrics.APMAgentReporter","methodSignature":"format(double)","methodName":"format","lineNumber":["255","257"],"fullExpression":"format(((Float) o).doubleValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["139"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["116"],"fullExpression":"LoggerFactory.getLogger(APMAgentReporter.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["173"],"fullExpression":"logger.error(\"Unable to report to APM Agent. Discarding data.\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.metrics.APMAgentReporter","methodSignature":"format(long)","methodName":"format","lineNumber":["259","261","263","265"],"fullExpression":"format(((Byte) o).longValue())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/test/java/com/networknt/proxy/ExternalServiceHandlerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["99"],"fullExpression":"Assert.assertTrue(body.contains(\"https://postman-echo.com/get\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["35","58"],"fullExpression":"logger.info(\"starting serverconfig\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["40"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["57"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["95","129","161"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["40"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["86","118","119","120","150","151","152"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["65","68"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["97","132","164"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["40"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["79","110","142"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["86","118","119","120","150","151","152"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.ExternalServiceHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["36"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["85","117","149"],"fullExpression":"new ClientRequest().setPath(\"/get\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["90","124","156"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["45"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["63"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["65","68"],"fullExpression":"exchange.getResponseSender().send(\"POST OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["93","127","159"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["40"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["85","117","149"],"fullExpression":"new ClientRequest().setPath(\"/get\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["28"],"fullExpression":"LoggerFactory.getLogger(ExternalServiceHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["40"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["63","63"],"fullExpression":"Handlers.routing().add(Methods.POST, \"/\", exchange -> {\n    exchange.getResponseSender().send(\"POST OK\");\n}).add(Methods.GET, \"/\", exchange -> {\n    exchange.getResponseSender().send(\"GET OK\");\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/data-source/src/main/java/com/networknt/db/GenericDataSource.java":[{"declaringType":"com.zaxxer.hikari.HikariConfig","methodSignature":"setUsername(java.lang.String)","methodName":"setUsername","lineNumber":["84"],"fullExpression":"ds.setUsername((String) mainParams.get(USERNAME))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.db.GenericDataSource","methodSignature":"findMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>...)","methodName":"findMethod","lineNumber":["98"],"fullExpression":"findMethod(ds.getClass(), \"set\" + convertFirstLetterUpper(fieldName), entry.getValue().getClass())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.db.GenericDataSource","methodSignature":"createDataSource()","methodName":"createDataSource","lineNumber":["65","70"],"fullExpression":"createDataSource()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.db.GenericDataSource","methodSignature":"getDsName()","methodName":"getDsName","lineNumber":["77"],"fullExpression":"getDsName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["47"],"fullExpression":"LoggerFactory.getLogger(GenericDataSource.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.zaxxer.hikari.HikariConfig","methodSignature":"addDataSourceProperty(java.lang.String, java.lang.Object)","methodName":"addDataSourceProperty","lineNumber":["107"],"fullExpression":"ds.addDataSourceProperty(k, v)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.db.GenericDataSource","methodSignature":"convertFirstLetterUpper(java.lang.String)","methodName":"convertFirstLetterUpper","lineNumber":["98"],"fullExpression":"convertFirstLetterUpper(fieldName)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["101"],"fullExpression":"logger.error(\"no such set method on datasource for setting value:\" + fieldName)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.zaxxer.hikari.HikariConfig","methodSignature":"setJdbcUrl(java.lang.String)","methodName":"setJdbcUrl","lineNumber":["83"],"fullExpression":"ds.setJdbcUrl((String) mainParams.get(JDBC_URL))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.zaxxer.hikari.HikariConfig","methodSignature":"setPassword(java.lang.String)","methodName":"setPassword","lineNumber":["88"],"fullExpression":"ds.setPassword(password)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server/src/main/java/com/networknt/server/UrlConfigLoader.java":[{"declaringType":"org.yaml.snakeyaml.DumperOptions","methodSignature":"setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions.FlowStyle)","methodName":"setDefaultFlowStyle","lineNumber":["162"],"fullExpression":"options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.UrlConfigLoader","methodSignature":"loadFiles(java.lang.String)","methodName":"loadFiles","lineNumber":["114","116"],"fullExpression":"loadFiles(CERTS)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["110","137"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["275","277"],"fullExpression":"clientRequest.getRequestHeaders().put(Headers.AUTHORIZATION, clientToken)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"readValue(java.lang.String, com.fasterxml.jackson.core.type.TypeReference<T>)","methodName":"readValue","lineNumber":["232"],"fullExpression":"mapper.readValue(respBody, mapType)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.UrlConfigLoader","methodSignature":"getBytes(java.lang.String)","methodName":"getBytes","lineNumber":["215"],"fullExpression":"getBytes(endpoint)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["123","147"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.UrlConfigLoader","methodSignature":"getString(java.lang.String)","methodName":"getString","lineNumber":["208","226"],"fullExpression":"getString(configPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"debug","lineNumber":["272"],"fullExpression":"logger.debug(\"GET url configs endpoint:{}{}\", configServerUri, endpoint)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.UrlConfigLoader","methodSignature":"getServiceConfigs(boolean)","methodName":"getServiceConfigs","lineNumber":["154","155"],"fullExpression":"getServiceConfigs(true)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.UrlConfigLoader","methodSignature":"getConfigServerPath(java.lang.String, boolean)","methodName":"getConfigServerPath","lineNumber":["207","225"],"fullExpression":"getConfigServerPath(configType, globals)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.UrlConfigLoader","methodSignature":"createBootstrapContext()","methodName":"createBootstrapContext","lineNumber":["109","136"],"fullExpression":"createBootstrapContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["273"],"fullExpression":"new ClientRequest().setMethod(Methods.GET).setPath(endpoint)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["55"],"fullExpression":"LoggerFactory.getLogger(UrlConfigLoader.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"info","lineNumber":["106","133"],"fullExpression":"logger.info(\"init url config: {}{}\", configServerUri, configServerPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.UrlConfigLoader","methodSignature":"loadSpecificConfigFileAsMap(java.lang.String, boolean, java.lang.String)","methodName":"loadSpecificConfigFileAsMap","lineNumber":["197"],"fullExpression":"loadSpecificConfigFileAsMap(CONFIGS, globals, extension)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.UrlConfigLoader","methodSignature":"loadBootstrapTrustStore()","methodName":"loadBootstrapTrustStore","lineNumber":["307"],"fullExpression":"loadBootstrapTrustStore()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String, java.lang.Object)","methodName":"info","lineNumber":["183"],"fullExpression":"logger.info(\"target configs directory created :\", targetConfigsDirectory)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.UrlConfigLoader","methodSignature":"loadConfigs()","methodName":"loadConfigs","lineNumber":["112","139"],"fullExpression":"loadConfigs()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["157","177","178","297"],"fullExpression":"logger.debug(\"loadConfigs: {}\", serviceConfigs)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["288"],"fullExpression":"clientResponse.getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["275","277"],"fullExpression":"clientRequest.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["118","142","325","346"],"fullExpression":"logger.error(\"Failed to connect to config server\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["273"],"fullExpression":"new ClientRequest().setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.yaml.snakeyaml.Yaml","methodSignature":"dump(java.lang.Object)","methodName":"dump","lineNumber":["164"],"fullExpression":"new Yaml(options).dump(serviceConfigs)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.UrlConfigLoader","methodSignature":"getServiceFiles(java.lang.String, boolean)","methodName":"getServiceFiles","lineNumber":["175","176"],"fullExpression":"getServiceFiles(configType, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.UrlConfigLoader","methodSignature":"buildTrustManagers(java.security.KeyStore)","methodName":"buildTrustManagers","lineNumber":["307"],"fullExpression":"buildTrustManagers(loadBootstrapTrustStore())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"error","lineNumber":["190","234","299","311"],"fullExpression":"logger.error(\"Exception while creating {} dir or creating files there:{}\", targetConfigsDirectory, e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.UrlConfigLoader","methodSignature":"sendRequest(java.lang.String, java.lang.String, boolean)","methodName":"sendRequest","lineNumber":["257","262"],"fullExpression":"sendRequest(clientToken, endpoint, false)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/rule-loader/src/main/java/com/networknt/rule/GroupRoleTransformAction.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["23"],"fullExpression":"logger.debug(\"key = \" + entry.getKey() + \" value = \" + entry.getValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["23"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["16"],"fullExpression":"LoggerFactory.getLogger(GroupRoleTransformAction.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setClaim(java.lang.String, java.lang.Object)","methodName":"setClaim","lineNumber":["35"],"fullExpression":"claims.setClaim(\"roles\", roles)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/http/Http2ServiceResponse.java":[{"declaringType":"com.networknt.client.http.Http2ServiceResponse","methodSignature":"getClientResponseStatusCode()","methodName":"getClientResponseStatusCode","lineNumber":["28"],"fullExpression":"getClientResponseStatusCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["24"],"fullExpression":"clientResponse.getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.http.Http2ServiceResponse","methodSignature":"getClientResponseBody()","methodName":"getClientResponseBody","lineNumber":["33","37"],"fullExpression":"this.getClientResponseBody()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"getTypeFactory()","methodName":"getTypeFactory","lineNumber":["37"],"fullExpression":"objectMapper.getTypeFactory()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"readValue(java.lang.String, java.lang.Class<T>)","methodName":"readValue","lineNumber":["33"],"fullExpression":"this.objectMapper.readValue(this.getClientResponseBody(), clazz)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"readValue(java.lang.String, com.fasterxml.jackson.databind.JavaType)","methodName":"readValue","lineNumber":["37"],"fullExpression":"this.objectMapper.readValue(this.getClientResponseBody(), objectMapper.getTypeFactory().constructCollectionType(List.class, clazz))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.type.TypeFactory","methodSignature":"constructCollectionType(java.lang.Class<? extends java.util.Collection<E>>, java.lang.Class<? extends java.lang.Object>)","methodName":"constructCollectionType","lineNumber":["37"],"fullExpression":"objectMapper.getTypeFactory().constructCollectionType(List.class, clazz)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/service/src/test/java/com/networknt/service/ServiceConfigTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["36"],"fullExpression":"Assert.assertTrue(singletons.size() > 0)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/body/src/test/java/com/networknt/body/RequestBodyInterceptorTest.java":[{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["54"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["70"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["54"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["80","82","88","94","109"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["140","178","220"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["129","163","164","165","205","206","207","247","248","249","283","284","285","319","320","321","355","356","357","390","392","424","426"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["58"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["76"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.body.RequestBodyInterceptorTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["50"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["80","82","88","94","109"],"fullExpression":"exchange.getResponseSender().send(\"nobody\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["136","174","216","259","295","331","367","401","435"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["54"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["128","162","204","246","282","318","354","389","423"],"fullExpression":"new ClientRequest().setPath(\"/get\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["42"],"fullExpression":"LoggerFactory.getLogger(RequestBodyInterceptorTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["76","76"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/get\", exchange -> {\n    Object body = exchange.getAttachment(AttachmentConstants.REQUEST_BODY);\n    if (body == null) {\n        exchange.getResponseSender().send(\"nobody\");\n    } else {\n        exchange.getResponseSender().send(\"body\");\n    }\n}).add(Methods.POST, \"/post\", exchange -> {\n    Object body = exchange.getAttachment(AttachmentConstants.REQUEST_BODY);\n    if (body == null) {\n        exchange.getResponseSender().send(\"nobody\");\n    } else {\n        if (body instanceof List) {\n            String resp = \"[\" + ((List<Object>) body).stream().map(n -> n.toString()).collect(Collectors.joining(\",\")) + \"]\";\n            exchange.getResponseSender().send(resp);\n        } else if (body instanceof Map) {\n            Map<String, Object> map = (Map<String, Object>) body;\n            String resp = \"\";\n            if (map.size() > 0 && map.values().iterator().next() instanceof List) {\n                resp = \"{\" + ((Map<String, FormData.FormValue>) body).entrySet().stream().map(entry -> entry.getKey() + \":\" + \"[\" + ((List) entry.getValue()).stream().map(n -> n instanceof FormData.FormValue ? ((FormData.FormValue) n).getValue() : n.toString()).collect(Collectors.joining(\",\")) + \"]\").collect(Collectors.joining(\",\")) + \"}\";\n            } else {\n                resp = \"{\" + ((Map<String, Object>) body).entrySet().stream().map(entry -> entry.getKey() + \":\" + entry.getValue()).collect(Collectors.joining(\",\")) + \"}\";\n            }\n            exchange.getResponseSender().send(resp);\n        }\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["159","201","243","279","315","351","386","420"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(\"/post\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, post));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["49","71"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["138","176","218"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["129","163","164","165","205","206","207","247","248","249","283","284","285","319","320","321","355","356","357","390","392","424","426"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.form.FormData.FormValue","methodSignature":"getValue()","methodName":"getValue","lineNumber":["101"],"fullExpression":"((FormData.FormValue) n).getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["128","162","204","246","282","318","354","389","423"],"fullExpression":"new ClientRequest().setPath(\"/get\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["133","171","213","256","292","328","364","398","432"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["159","201","243","279","315","351","386","420"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["54"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["141","439"],"fullExpression":"Assert.assertEquals(\"nobody\", body)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/oauth/TokenInfoTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["43"],"fullExpression":"Assert.assertEquals(\"bb8293f6-ceef-4e7a-90c8-1492e97df19f\", value)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["107"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["153","191","200","205","210","222","227","234","268","280","292"],"fullExpression":"logger.debug(\"MrasHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.mras.MrasHandler","methodSignature":"invokeApi(io.undertow.server.HttpServerExchange, java.lang.String, java.lang.String, java.lang.String, long, java.lang.String)","methodName":"invokeApi","lineNumber":["199","204","209","226"],"fullExpression":"invokeApi(exchange, (String) config.getAccessToken().get(config.SERVICE_HOST), requestPath, \"Bearer \" + accessToken, startTime, endpoint)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getQueryString()","methodName":"getQueryString","lineNumber":["241"],"fullExpression":"exchange.getQueryString()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.mras.MrasHandler","methodSignature":"encodeCredentialsFullFormat(java.lang.String, java.lang.String, java.lang.String)","methodName":"encodeCredentialsFullFormat","lineNumber":["515"],"fullExpression":"encodeCredentialsFullFormat(username, password, \":\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.mras.MrasHandler","methodSignature":"getAccessToken()","methodName":"getAccessToken","lineNumber":["185"],"fullExpression":"getAccessToken()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.mras.MrasHandler","methodSignature":"createSSLContext()","methodName":"createSSLContext","lineNumber":["313","361"],"fullExpression":"createSSLContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["342"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.codec.binary.Base64","methodSignature":"encodeBase64(byte[])","methodName":"encodeBase64","lineNumber":["509"],"fullExpression":"Base64.encodeBase64(cred.getBytes(UTF_8))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["156","161","170","184","215","244","341","348","400","402","428","477","526","544"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["346"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.mras.MrasHandler","methodSignature":"getMicrosoftToken()","methodName":"getMicrosoftToken","lineNumber":["216"],"fullExpression":"getMicrosoftToken()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["155","175","178"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["153","191","200","205","210","222","227","234","268","280","292"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["160","240"],"fullExpression":"exchange.getRequestMethod().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.nio.ByteBuffer)","methodName":"send","lineNumber":["346"],"fullExpression":"exchange.getResponseSender().send(ByteBuffer.wrap(responseBody))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["65"],"fullExpression":"LoggerFactory.getLogger(MrasHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setStatusCode(int)","methodName":"setStatusCode","lineNumber":["336"],"fullExpression":"exchange.setStatusCode(response.statusCode())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["94","138","303","416","492","562"],"fullExpression":"logger.error(\"An instance of MetricsHandler is not configured in the handler.yml.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["97","148"],"fullExpression":"logger.info(\"MrasHandler is loaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["156","161","170","184","215","244","341","400","402","428","477","526","544"],"fullExpression":"logger.trace(\"original requestPath = \" + requestPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["160","240"],"fullExpression":"exchange.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["328","376","420","449","496","534","555","569"],"fullExpression":"logger.error(\"Cannot create HttpClient:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["242"],"fullExpression":"exchange.getRequestHeaders().getFirst(Headers.CONTENT_TYPE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["97","148"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.mras.MrasHandler","methodSignature":"encodeCredentials(java.lang.String, java.lang.String)","methodName":"encodeCredentials","lineNumber":["204","396"],"fullExpression":"encodeCredentials((String) config.getBasicAuth().get(config.USERNAME), (String) config.getBasicAuth().get(config.PASSWORD))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"add(io.undertow.util.HttpString, java.lang.String)","methodName":"add","lineNumber":["342"],"fullExpression":"exchange.getResponseHeaders().add(new HttpString(header.getKey()), s)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["242"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/com/networknt/metrics/JVMMetricsUtil.java":[{"declaringType":"com.networknt.metrics.JVMMetricsUtil","methodSignature":"createGaugeMetricBuilder(long)","methodName":"createGaugeMetricBuilder","lineNumber":["61","63","65","67","72"],"fullExpression":"createGaugeMetricBuilder(m.getUsed())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.metrics.JVMMetricsUtil","methodSignature":"createGaugeMetricBuilder(int)","methodName":"createGaugeMetricBuilder","lineNumber":["83"],"fullExpression":"createGaugeMetricBuilder(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.metrics.JVMMetricsUtil","methodSignature":"createGaugeMetricBuilder(java.lang.Double)","methodName":"createGaugeMetricBuilder","lineNumber":["77"],"fullExpression":"createGaugeMetricBuilder(value)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler/src/main/java/com/networknt/handler/ResponseInterceptorInjectionHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["59"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"get(io.undertow.util.HttpString)","methodName":"get","lineNumber":["95"],"fullExpression":"exchange.getRequestHeaders().get(Headers.ACCEPT_ENCODING)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["37","49"],"fullExpression":"LOG.info(\"SinkConduitInjectorHandler is loaded!\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["78"],"fullExpression":"LOG.trace(\"response-injection.yml is reloaded\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ResponseInterceptorInjectionHandler","methodSignature":"interceptorsRequireContent()","methodName":"interceptorsRequireContent","lineNumber":["91","146"],"fullExpression":"this.interceptorsRequireContent()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"contains(io.undertow.util.HttpString)","methodName":"contains","lineNumber":["94"],"fullExpression":"exchange.getRequestHeaders().contains(Headers.ACCEPT_ENCODING)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ResponseInterceptorInjectionHandler","methodSignature":"requiresContentSinkConduit(io.undertow.server.HttpServerExchange)","methodName":"requiresContentSinkConduit","lineNumber":["118"],"fullExpression":"this.requiresContentSinkConduit(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["135"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["77","121"],"fullExpression":"LOG.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["104"],"fullExpression":"exchange.getRequestHeaders().put(Headers.ACCEPT_ENCODING, \"identity\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.ConduitFactory","methodSignature":"create()","methodName":"create","lineNumber":["119","126"],"fullExpression":"factory.create()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["147"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ResponseInterceptorInjectionHandler","methodSignature":"isCompressed(io.undertow.server.HttpServerExchange)","methodName":"isCompressed","lineNumber":["148"],"fullExpression":"isCompressed(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ResponseInterceptorInjectionHandler","methodSignature":"isAppliedBodyInjectionPathPrefix(java.lang.String)","methodName":"isAppliedBodyInjectionPathPrefix","lineNumber":["147"],"fullExpression":"isAppliedBodyInjectionPathPrefix(exchange.getRequestPath())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"get(java.lang.String)","methodName":"get","lineNumber":["135"],"fullExpression":"exchange.getResponseHeaders().get(Headers.CONTENT_ENCODING_STRING)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["101"],"fullExpression":"LOG.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["158","159","160"],"fullExpression":"Headers.GZIP.toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"addResponseWrapper(io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSinkConduit>)","methodName":"addResponseWrapper","lineNumber":["117"],"fullExpression":"exchange.addResponseWrapper((ConduitFactory<StreamSinkConduit> factory, HttpServerExchange currentExchange) -> {\n    if (this.requiresContentSinkConduit(exchange)) {\n        var mcsc = new ModifiableContentSinkConduit(factory.create(), currentExchange);\n        if (LOG.isTraceEnabled())\n            LOG.trace(\"created a ModifiableContentSinkConduit instance \" + mcsc);\n        return mcsc;\n    } else\n        return new ContentStreamSinkConduit(factory.create(), currentExchange);\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["26"],"fullExpression":"LoggerFactory.getLogger(ResponseInterceptorInjectionHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["94","95","104"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AttachmentKey","methodSignature":"create(java.lang.Class<? super T>)","methodName":"create","lineNumber":["28"],"fullExpression":"AttachmentKey.create(HeaderMap.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/org/apache/hc/core5/net/copied/InetAddressUtils.java":[{"declaringType":"org.apache.hc.core5.net.copied.InetAddressUtils","methodSignature":"isIPv6HexCompressedAddress(java.lang.String)","methodName":"isIPv6HexCompressedAddress","lineNumber":["124"],"fullExpression":"isIPv6HexCompressedAddress(input)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.hc.core5.net.copied.InetAddressUtils","methodSignature":"isIPv6StdAddress(java.lang.String)","methodName":"isIPv6StdAddress","lineNumber":["124"],"fullExpression":"isIPv6StdAddress(input)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/main/java/com/networknt/proxy/LightProxyHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["127","140"],"fullExpression":"logger.debug(\"LightProxyHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["221"],"fullExpression":"logger.info(\"LightProxyHandler is reloaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipAllDefaultValidators()","methodName":"setSkipAllDefaultValidators","lineNumber":["156"],"fullExpression":"new JwtConsumerBuilder().setSkipSignatureVerification().setSkipAllDefaultValidators()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["80","178"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["132"],"fullExpression":"exchange.getRequestHeaders().put(HttpString.tryFromString(CLAIMS_KEY), new ObjectMapper().writeValueAsString(jwtClaims.getClaimsMap()))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["101","199"],"fullExpression":"logger.error(\"Exception for host \" + host, e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipSignatureVerification()","methodName":"setSkipSignatureVerification","lineNumber":["156"],"fullExpression":"new JwtConsumerBuilder().setSkipSignatureVerification()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["221"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"get(java.lang.String)","methodName":"get","lineNumber":["153","155"],"fullExpression":"headerValues.get(Headers.AUTHORIZATION_STRING)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.LightProxyHandler","methodSignature":"extractClaimsFromJwt(io.undertow.util.HeaderMap)","methodName":"extractClaimsFromJwt","lineNumber":["131"],"fullExpression":"extractClaimsFromJwt(headerValues)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"getClaimsMap()","methodName":"getClaimsMap","lineNumber":["132"],"fullExpression":"jwtClaims.getClaimsMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumer","methodSignature":"processToClaims(java.lang.String)","methodName":"processToClaims","lineNumber":["163"],"fullExpression":"jwtConsumer.processToClaims(jwt)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["127","140"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"tryFromString(java.lang.String)","methodName":"tryFromString","lineNumber":["132"],"fullExpression":"HttpString.tryFromString(CLAIMS_KEY)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["63"],"fullExpression":"LoggerFactory.getLogger(LightProxyHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"writeValueAsString(java.lang.Object)","methodName":"writeValueAsString","lineNumber":["132"],"fullExpression":"new ObjectMapper().writeValueAsString(jwtClaims.getClaimsMap())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["156"],"fullExpression":"new JwtConsumerBuilder().setSkipSignatureVerification().setSkipAllDefaultValidators().setAllowedClockSkewInSeconds(LONG_CLOCK_SKEW).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["130","132"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["98","120","196","218"],"fullExpression":"logger.error(\"Incorrect schema \" + uri.getScheme())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setAllowedClockSkewInSeconds(int)","methodName":"setAllowedClockSkewInSeconds","lineNumber":["156"],"fullExpression":"new JwtConsumerBuilder().setSkipSignatureVerification().setSkipAllDefaultValidators().setAllowedClockSkewInSeconds(LONG_CLOCK_SKEW)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.LoadBalancingProxyClient","methodSignature":"addHost(java.net.URI)","methodName":"addHost","lineNumber":["92","190"],"fullExpression":"loadBalancer.addHost(new URI(host))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server/src/integration/java/com/networknt/server/ConsulRegistryIT.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["136","148","160","178","185"],"fullExpression":"Assert.assertNotNull(url)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["137","149"],"fullExpression":"Assert.assertTrue(url.equals(\"https://\" + ipAddress + \":49588\") || url.equals(\"https://\" + ipAddress + \":49589\") || url.equals(\"https://\" + ipAddress + \":49590\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["78","82","106","115","124","193"],"fullExpression":"logger.info(\"Registry IP from STATUS_HOST_IP is \" + ipAddress)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNull(java.lang.Object)","methodName":"assertNull","lineNumber":["167","182"],"fullExpression":"Assert.assertNull(url)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["44"],"fullExpression":"LoggerFactory.getLogger(ConsulRegistryIT.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["161","179","186"],"fullExpression":"Assert.assertEquals(\"https://\" + ipAddress + \":49590\", url)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.testcontainers.containers.ContainerState","methodSignature":"getFirstMappedPort()","methodName":"getFirstMappedPort","lineNumber":["68"],"fullExpression":"consul.getFirstMappedPort()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/header/src/main/java/com/networknt/header/HeaderHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["151"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["73","140"],"fullExpression":"logger.debug(\"HeaderHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"remove(java.lang.String)","methodName":"remove","lineNumber":["77","87","107","125"],"fullExpression":"exchange.getRequestHeaders().remove(s)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["99","108","115","126","133"],"fullExpression":"logger.trace(\"found with requestPath = \" + requestPath + \" prefix = \" + entry.getKey())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["170"],"fullExpression":"logger.info(\"HeaderHandler is reloaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["87","91","125","132"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["99","108","115","126","133"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["81","91","114","132"],"fullExpression":"exchange.getRequestHeaders().put(new HttpString(k), (String) v)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["96"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["170"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["73","140"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["46"],"fullExpression":"LoggerFactory.getLogger(HeaderHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["77","81","107","114"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/utility/src/main/java/com/networknt/utility/NioUtils.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["84"],"fullExpression":"logger.debug(destDir + \" does not exist. Creating...\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"debug","lineNumber":["98"],"fullExpression":"logger.debug(\"Extracting file %s to %s\", file, destFile)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["109","141","164","182"],"fullExpression":"logger.debug(\"Creating directory %s\", dirToCreate)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["84","98","109","141","164","182","214"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object...)","methodName":"debug","lineNumber":["215"],"fullExpression":"logger.debug(\"%d  %s  %s\", Files.size(file), modTime, file)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["46"],"fullExpression":"LoggerFactory.getLogger(NioUtils.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object)","methodName":"error","lineNumber":["240"],"fullExpression":"logger.error(\"Unable to delete file %s\", listFile)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["274"],"fullExpression":"logger.error(\"Failed to write file to byte array: \" + e.getMessage())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/cors/src/main/java/com/networknt/cors/CorsConfig.java":[{"declaringType":"com.networknt.cors.CorsConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["111","112"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.cors.CorsConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["51","68","74"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["124","151"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.cors.CorsConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["52","69","75"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["124","151"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["34"],"fullExpression":"LoggerFactory.getLogger(CorsConfig.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/security/src/test/java/com/networknt/security/JwtVerifierTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["72","93"],"fullExpression":"Assert.assertNotNull(jwt)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"toJson()","methodName":"toJson","lineNumber":["62"],"fullExpression":"jwtClaims.toJson()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"setPayload(java.lang.String)","methodName":"setPayload","lineNumber":["62"],"fullExpression":"jws.setPayload(jwtClaims.toJson())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKey(java.security.Key)","methodName":"setKey","lineNumber":["65"],"fullExpression":"jws.setKey(privateKey)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"parse(java.lang.String)","methodName":"parse","lineNumber":["47"],"fullExpression":"JwtClaims.parse(\"{\\n\" + \"  \\\"sub\\\": \\\"5745ed4b-0158-45ff-89af-4ce99bc6f4de\\\",\\n\" + \"  \\\"iss\\\": \\\"\" + iss + \"\\\",\\n\" + \"  \\\"subject_type\\\": \\\"client-id\\\",\\n\" + \"  \\\"exp\\\": 1557419531,\\n\" + \"  \\\"iat\\\": 1557419231,\\n\" + \"  \\\"scope\\\": [\\n\" + \"    \\\"my.test.scope.read\\\",\\n\" + \"    \\\"my.test.scope.write\\\",\\n\" + \"  ],\\n\" + \"  \\\"consumer_application_id\\\": \\\"389\\\",\\n\" + \"  \\\"request_transit\\\": \\\"63092\\\"\\n\" + \"}\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"getStringClaimValue(java.lang.String)","methodName":"getStringClaimValue","lineNumber":["94"],"fullExpression":"claims.getStringClaimValue(\"iss\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwk.JsonWebKey","methodSignature":"setKeyId(java.lang.String)","methodName":"setKeyId","lineNumber":["101"],"fullExpression":"jwk.setKeyId(\"111\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"getCompactSerialization()","methodName":"getCompactSerialization","lineNumber":["70"],"fullExpression":"jws.getCompactSerialization()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["94"],"fullExpression":"Assert.assertEquals(iss, claims.getStringClaimValue(\"iss\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setAlgorithmHeaderValue(java.lang.String)","methodName":"setAlgorithmHeaderValue","lineNumber":["67"],"fullExpression":"jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwk.PublicJsonWebKey.Factory","methodSignature":"newPublicJwk(java.security.Key)","methodName":"newPublicJwk","lineNumber":["81","100"],"fullExpression":"PublicJsonWebKey.Factory.newPublicJwk(publicKey)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwk.JsonWebKeySet","methodSignature":"toJson(org.jose4j.jwk.JsonWebKey.OutputControlLevel)","methodName":"toJson","lineNumber":["104"],"fullExpression":"jwks.toJson(JsonWebKey.OutputControlLevel.PUBLIC_ONLY)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/InstrumentedExecutorServiceTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"failBecauseExceptionWasNotThrown(java.lang.Class<? extends java.lang.Throwable>)","methodName":"failBecauseExceptionWasNotThrown","lineNumber":["105"],"fullExpression":"failBecauseExceptionWasNotThrown(RejectedExecutionException.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server/src/test/java/com/networknt/server/TestMergeStatusConfig.java":[{"declaringType":"junit.framework.TestCase","methodSignature":"setUp()","methodName":"setUp","lineNumber":["39"],"fullExpression":"super.setUp()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.TestMergeStatusConfig","methodSignature":"setExternalizedConfigDir(java.lang.String)","methodName":"setExternalizedConfigDir","lineNumber":["42"],"fullExpression":"setExternalizedConfigDir(homeDir)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.TestMergeStatusConfig","methodSignature":"writeConfigFile(java.lang.String, java.lang.Object)","methodName":"writeConfigFile","lineNumber":["50"],"fullExpression":"writeConfigFile(\"ERR99999\", contents)","currentLayer":0,"declarationInfo":null},{"declaringType":"junit.framework.TestCase","methodSignature":"fail()","methodName":"fail","lineNumber":["80"],"fullExpression":"fail()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/rate-limit/src/main/java/com/networknt/limit/RateLimiter.java":[{"declaringType":"com.networknt.limit.RateLimiter","methodSignature":"isAllowByServer(java.lang.String)","methodName":"isAllowByServer","lineNumber":["128"],"fullExpression":"isAllowByServer(path)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["208","247"],"fullExpression":"logger.debug(\"CurrentTimeWindow:\" + currentTimeWindow + \" Result:true \" + \" Count:\" + countInOverallTime)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.RateLimiter","methodSignature":"isAllowDirect(java.lang.String, java.lang.String, java.lang.String)","methodName":"isAllowDirect","lineNumber":["106","115","124"],"fullExpression":"isAllowDirect(address, path, ADDRESS_TYPE)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.RateLimiter","methodSignature":"getWindow(java.util.concurrent.TimeUnit)","methodName":"getWindow","lineNumber":["318"],"fullExpression":"getWindow(unit)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.RateLimiter","methodSignature":"lookupServerTimeMap(java.lang.String)","methodName":"lookupServerTimeMap","lineNumber":["227"],"fullExpression":"lookupServerTimeMap(path)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["31"],"fullExpression":"LoggerFactory.getLogger(RateLimiter.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.RateLimiter","methodSignature":"lookupLimitQuota(java.lang.String)","methodName":"lookupLimitQuota","lineNumber":["234"],"fullExpression":"lookupLimitQuota(path)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["105","114","123","127"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/limit-config/src/main/java/com/networknt/limit/LimitConfig.java":[{"declaringType":"com.networknt.limit.LimitConfig.RateLimitSet","methodSignature":"getDirectMaps()","methodName":"getDirectMaps","lineNumber":["348","348","349","361","361","362","374","374","375"],"fullExpression":"getAddress().getDirectMaps()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["260","283","306","329"],"fullExpression":"logger.trace(\"server s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["260","283","306","329"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.LimitConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["221","223","225","227","239"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.LimitConfig","methodSignature":"getClient()","methodName":"getClient","lineNumber":["361","361","362","374"],"fullExpression":"getClient()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.LimitConfig","methodSignature":"populateFromMap(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"populateFromMap","lineNumber":["286","292","309","315","332","338"],"fullExpression":"populateFromMap(addressConfig)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.LimitConfig","methodSignature":"setUserIdKeyResolver(java.lang.String)","methodName":"setUserIdKeyResolver","lineNumber":["228"],"fullExpression":"setUserIdKeyResolver((String) object)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.LimitConfig","methodSignature":"getUser()","methodName":"getUser","lineNumber":["374","375"],"fullExpression":"getUser()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["33"],"fullExpression":"LoggerFactory.getLogger(LimitConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.LimitConfig","methodSignature":"setClientIdKeyResolver(java.lang.String)","methodName":"setClientIdKeyResolver","lineNumber":["224"],"fullExpression":"setClientIdKeyResolver((String) object)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.LimitConfig","methodSignature":"setRateLimitConfig()","methodName":"setRateLimitConfig","lineNumber":["83","97"],"fullExpression":"setRateLimitConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["265","271","288","294","311","317","334","340"],"fullExpression":"logger.error(\"server is the wrong type. Only JSON map or YAML map is supported.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.LimitConfig","methodSignature":"setAddressKeyResolver(java.lang.String)","methodName":"setAddressKeyResolver","lineNumber":["226"],"fullExpression":"setAddressKeyResolver((String) object)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.LimitConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["82","96"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.limit.LimitConfig","methodSignature":"getAddress()","methodName":"getAddress","lineNumber":["348","348","349"],"fullExpression":"getAddress()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sidecar/src/main/java/com/networknt/router/SidecarConfig.java":[{"declaringType":"com.networknt.router.SidecarConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["78","79"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.SidecarConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["37","53","58"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/rate-limit/src/main/java/com/networknt/limit/LimitHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["120"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["95"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["70","73"],"fullExpression":"logger.debug(\"LimitHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["120"],"fullExpression":"logger.info(\"LimitHandler is reloaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["70","73","83"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["76","77","78","80"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Object)","methodName":"warn","lineNumber":["83"],"fullExpression":"logger.warn(\"LimitHandler.handleRequest ends with an error code {}\", statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["84"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["40"],"fullExpression":"LoggerFactory.getLogger(LimitHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"add(io.undertow.util.HttpString, java.lang.String)","methodName":"add","lineNumber":["80"],"fullExpression":"exchange.getResponseHeaders().add(new HttpString(\"Content-Type\"), \"application/json\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setStatusCode(int)","methodName":"setStatusCode","lineNumber":["82"],"fullExpression":"exchange.setStatusCode(statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["116"],"fullExpression":"logger.error(\"Failed to recreate RateLimiter with reloaded config.\", e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/encode-decode/src/main/java/com/networknt/decode/RequestDecodeHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["75"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"addRequestWrapper(io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSourceConduit>)","methodName":"addRequestWrapper","lineNumber":["94"],"fullExpression":"exchange.addRequestWrapper(encodings)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"remove(io.undertow.util.HttpString)","methodName":"remove","lineNumber":["97"],"fullExpression":"exchange.getRequestHeaders().remove(Headers.CONTENT_ENCODING)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isRequestChannelAvailable()","methodName":"isRequestChannelAvailable","lineNumber":["93"],"fullExpression":"exchange.isRequestChannelAvailable()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["92","97"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["92"],"fullExpression":"exchange.getRequestHeaders().getFirst(Headers.CONTENT_ENCODING)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/db-provider/src/main/java/com/networknt/db/provider/DbProviderConfig.java":[{"declaringType":"com.networknt.db.provider.DbProviderConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["35","47"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/http-entity/src/main/java/com/networknt/http/RequestEntity.java":[{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"remove(io.undertow.util.HttpString)","methodName":"remove","lineNumber":["310"],"fullExpression":"this.headers.remove(Headers.CONTENT_TYPE)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.RequestEntity","methodSignature":"getMethod()","methodName":"getMethod","lineNumber":["197","197","211"],"fullExpression":"getMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.RequestEntity.DefaultBodyBuilder","methodSignature":"buildInternal(T, java.lang.reflect.Type)","methodName":"buildInternal","lineNumber":["317","322"],"fullExpression":"buildInternal(body, null)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.RequestEntity","methodSignature":"getUrl()","methodName":"getUrl","lineNumber":["198","198","205","211"],"fullExpression":"getUrl()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, long)","methodName":"put","lineNumber":["301"],"fullExpression":"this.headers.put(Headers.CONTENT_LENGTH, contentLength)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/broadcom/APMEPAgentSender.java":[{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["84"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(path);\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, body));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["96"],"fullExpression":"logger.info(\"The APM metrics push request timed out\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["103"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["88","89","90"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["72"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"trace","lineNumber":["72"],"fullExpression":"logger.trace(\"APMEPAgentSender is sending data to host = {} with body = {}\", url, body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["88","89","90"],"fullExpression":"request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["87"],"fullExpression":"new ClientRequest().setMethod(Methods.POST)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["47"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["84"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["101"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["87"],"fullExpression":"new ClientRequest().setMethod(Methods.POST).setPath(path)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["30"],"fullExpression":"LoggerFactory.getLogger(APMEPAgentSender.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/utility/src/test/java/com/networknt/utility/FingerPrintUtilTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["38","51","64","77","90","103"],"fullExpression":"Assert.assertEquals(\"564aa231f84039ce2b2b886e58f88dcee26fa3e3\", fp)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/registry/src/test/java/com/networknt/registry/support/command/DirectRegistryTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["54","59","64"],"fullExpression":"Assert.assertTrue(urls.get(0).getPort() == 8440)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/response-transformer/src/main/java/com/networknt/restrans/ResponseTransformerInterceptor.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["72"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["60"],"fullExpression":"logger.info(\"ResponseManipulatorHandler is loaded\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["91","97","102","160","191"],"fullExpression":"logger.trace(\"ResponseTransformerInterceptor is reloaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["113","117","128","130","136","139"],"fullExpression":"logger.debug(\"auditInfo exists. Grab endpoint from it.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"remove(java.lang.String)","methodName":"remove","lineNumber":["171"],"fullExpression":"exchange.getResponseHeaders().remove(s)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["171","175","215"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["91","101","159"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["106","127","129"],"fullExpression":"exchange.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["175"],"fullExpression":"exchange.getResponseHeaders().put(new HttpString(k), (String) v)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestURL()","methodName":"getRequestURL","lineNumber":["219"],"fullExpression":"exchange.getRequestURL()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["98","118","221"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["60"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getStatusCode()","methodName":"getStatusCode","lineNumber":["232"],"fullExpression":"exchange.getStatusCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["97","112","116","128","130","135","138","191"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestURI()","methodName":"getRequestURI","lineNumber":["127","129","220"],"fullExpression":"exchange.getRequestURI()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["118","127","129","218","222","223","224"],"fullExpression":"method.toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getPathParameters()","methodName":"getPathParameters","lineNumber":["217"],"fullExpression":"exchange.getPathParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getQueryParameters()","methodName":"getQueryParameters","lineNumber":["216"],"fullExpression":"exchange.getQueryParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["34"],"fullExpression":"LoggerFactory.getLogger(ResponseTransformerInterceptor.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["214"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.restrans.ResponseTransformerInterceptor","methodSignature":"createExchangeInfoMap(io.undertow.server.HttpServerExchange, io.undertow.util.HttpString, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>)","methodName":"createExchangeInfoMap","lineNumber":["108"],"fullExpression":"this.createExchangeInfoMap(exchange, method, responseBody, auditInfo)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["123"],"fullExpression":"logger.error(\"RuleLoaderStartupHook endpointRules is null\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceConfig.java":[{"declaringType":"com.networknt.proxy.ExternalServiceConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["113","115"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.ExternalServiceConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["47","61"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.ExternalServiceConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["49","63"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.ExternalServiceConfig","methodSignature":"setProxyHost(java.lang.String)","methodName":"setProxyHost","lineNumber":["108"],"fullExpression":"setProxyHost((String) object)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/Http2Client.java":[{"declaringType":"org.owasp.encoder.Encode","methodSignature":"forJava(java.lang.String)","methodName":"forJava","lineNumber":["779","786","818"],"fullExpression":"Encode.forJava(keyStoreName)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ChannelListener.Setter","methodSignature":"set(org.xnio.ChannelListener<? super T>)","methodName":"set","lineNumber":["973","1020","1066","1163"],"fullExpression":"result.getRequestChannel().getWriteSetter().set(ChannelListeners.<StreamSinkChannel>flushingChannelListener(null, null))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientProvider","methodSignature":"handlesSchemes()","methodName":"handlesSchemes","lineNumber":["172"],"fullExpression":"provider.handlesSchemes()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["247","252","261","294","335","344","403","429","451"],"fullExpression":"logger.debug(\"The connection is http2?:\" + isHttp2)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"addHostHeader(io.undertow.client.ClientRequest)","methodName":"addHostHeader","lineNumber":["1245","1271"],"fullExpression":"addHostHeader(request)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.FutureResult","methodSignature":"getIoFuture()","methodName":"getIoFuture","lineNumber":["263","296","346","392","405","431","453","482"],"fullExpression":"result.getIoFuture()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"getXnio()","methodName":"getXnio","lineNumber":["212"],"fullExpression":"WORKER.getXnio()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["559","580","1413"],"fullExpression":"request.getRequestHeaders().put(Headers.AUTHORIZATION, token)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Xnio","methodSignature":"getInstance(java.lang.ClassLoader)","methodName":"getInstance","lineNumber":["178"],"fullExpression":"Xnio.getInstance(Undertow.class.getClassLoader())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"isOpen()","methodName":"isOpen","lineNumber":["260","293","343","402","428","450","1248","1274"],"fullExpression":"connection.isOpen()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["756"],"fullExpression":"IoUtils.safeClose(stream)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"addProvider(java.util.Map<java.lang.String, io.undertow.client.ClientProvider>, java.lang.String, io.undertow.client.ClientProvider)","methodName":"addProvider","lineNumber":["173"],"fullExpression":"addProvider(map, scheme, provider)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["247","252","261","265","294","298","335","344","348","381","388","403","407","429","433","451","455","471","478","1249","1275","1387","1398"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"convertTrustManagers(java.util.List<javax.net.ssl.TrustManager>)","methodName":"convertTrustManagers","lineNumber":["845"],"fullExpression":"convertTrustManagers(trustManagerList)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"setResponseListener(io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>)","methodName":"setResponseListener","lineNumber":["941","993","1039","1086","1129","1188"],"fullExpression":"result.setResponseListener(new ClientCallback<ClientExchange>() {\n\n    @Override\n    public void completed(final ClientExchange result) {\n        reference.set(result.getResponse());\n        new StringReadChannelListener(result.getConnection().getBufferPool()) {\n\n            @Override\n            protected void stringDone(String string) {\n                if (logger.isTraceEnabled()) {\n                    logger.trace(\"Service call response = {}\", string);\n                }\n                result.getResponse().putAttachment(RESPONSE_BODY, string);\n                latch.countDown();\n            }\n\n            @Override\n            protected void error(IOException e) {\n                logger.error(\"IOException:\", e);\n                latch.countDown();\n            }\n        }.setup(result.getResponseChannel());\n    }\n\n    @Override\n    public void failed(IOException e) {\n        logger.error(\"IOException:\", e);\n        latch.countDown();\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"toString()","methodName":"toString","lineNumber":["1388","1399"],"fullExpression":"request.getRequestHeaders().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"borrowConnection(java.net.URI, org.xnio.XnioIoThread, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"borrowConnection","lineNumber":["412","417"],"fullExpression":"borrowConnection(uri, ioThread, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AbstractAttachable","methodSignature":"putAttachment(io.undertow.util.AttachmentKey<T>, T)","methodName":"putAttachment","lineNumber":["952","1096"],"fullExpression":"result.getResponse().putAttachment(RESPONSE_BODY, string)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.StreamSinkChannel","methodSignature":"getWriteSetter()","methodName":"getWriteSetter","lineNumber":["973","1020","1066","1163"],"fullExpression":"result.getRequestChannel().getWriteSetter()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["849","859"],"fullExpression":"logger.error(\"No trust store is loaded. Please check client.yml\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap.Builder","methodSignature":"set(org.xnio.Option<java.lang.Integer>, int)","methodName":"set","lineNumber":["98"],"fullExpression":"OptionMap.builder().set(Options.WORKER_IO_THREADS, 8)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String, java.lang.Object)","methodName":"info","lineNumber":["914"],"fullExpression":"logger.info(\"JDK default trust store loaded from : {} .\", location)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableWriteChannel","methodSignature":"flush()","methodName":"flush","lineNumber":["972","1019","1065","1162"],"fullExpression":"result.getRequestChannel().flush()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.FutureResult","methodSignature":"setException(java.io.IOException)","methodName":"setException","lineNumber":["389","479"],"fullExpression":"result.setException(e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["265","298","348","388","407","433","455","478"],"fullExpression":"logger.debug(\"Got a null or non open connection: {} from http2ClientConnectionPool. Creating a new one ...\", connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"borrowConnection(java.net.InetSocketAddress, java.net.URI, org.xnio.XnioWorker, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"borrowConnection","lineNumber":["303"],"fullExpression":"borrowConnection(bindAddress, uri, worker, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["181","312","958","966","977","984","1102","1110","1118","1146","1155","1167","1175","1204","1213","1222"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.FutureResult","methodSignature":"setResult(T)","methodName":"setResult","lineNumber":["262","295","345","382","404","430","452","472"],"fullExpression":"result.setResult(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getBufferPool()","methodName":"getBufferPool","lineNumber":["945","1132"],"fullExpression":"result.getConnection().getBufferPool()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"addAuthToken(io.undertow.client.ClientRequest, java.lang.String)","methodName":"addAuthToken","lineNumber":["702"],"fullExpression":"addAuthToken(request, authToken)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"createXnioSsl(javax.net.ssl.SSLContext)","methodName":"createXnioSsl","lineNumber":["310"],"fullExpression":"createXnioSsl(createSSLContext())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["779","786","818"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"loadDefaultTrustStore()","methodName":"loadDefaultTrustStore","lineNumber":["827"],"fullExpression":"loadDefaultTrustStore()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoFuture","methodSignature":"get()","methodName":"get","lineNumber":["231"],"fullExpression":"future.get()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap.Builder","methodSignature":"set(org.xnio.Option<java.lang.Boolean>, boolean)","methodName":"set","lineNumber":["98","98"],"fullExpression":"OptionMap.builder().set(Options.WORKER_IO_THREADS, 8).set(Options.TCP_NODELAY, true).set(Options.KEEP_ALIVE, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"connectAsync(java.net.URI)","methodName":"connectAsync","lineNumber":["1252"],"fullExpression":"this.connectAsync(uri)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientProvider","methodSignature":"connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.URI, org.xnio.XnioWorker, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["497"],"fullExpression":"provider.connect(listener, uri, worker, ssl, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"connectAsync(java.net.URI, boolean)","methodName":"connectAsync","lineNumber":["1278"],"fullExpression":"this.connectAsync(uri, isHttp2)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.URI, org.xnio.XnioWorker, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["486"],"fullExpression":"connect(listener, uri, worker, null, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableWriteChannel","methodSignature":"resumeWrites()","methodName":"resumeWrites","lineNumber":["974","1021","1067","1164"],"fullExpression":"result.getRequestChannel().resumeWrites()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"borrow(java.net.URI, org.xnio.XnioWorker, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"borrow","lineNumber":["253"],"fullExpression":"borrow(uri, worker, bufferPool, isHttp2 ? OptionMap.create(UndertowOptions.ENABLE_HTTP2, true) : OptionMap.EMPTY)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.InetSocketAddress, java.net.URI, org.xnio.XnioIoThread, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["513"],"fullExpression":"connect(listener, bindAddress, uri, ioThread, null, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["658","659","660"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"connect(java.net.URI, org.xnio.XnioWorker, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["243","266"],"fullExpression":"connect(uri, worker, null, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientProvider","methodSignature":"connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.InetSocketAddress, java.net.URI, org.xnio.XnioIoThread, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["468","526"],"fullExpression":"provider.connect(new ClientCallback<ClientConnection>() {\n\n    @Override\n    public void completed(ClientConnection r) {\n        if (logger.isDebugEnabled())\n            logger.debug(\"Adding the new connection: {} to FutureResult and cache it for uri: {}\", r, uri);\n        result.setResult(r);\n        http2ClientConnectionPool.cacheConnection(uri, r);\n    }\n\n    @Override\n    public void failed(IOException e) {\n        if (logger.isDebugEnabled())\n            logger.debug(\"Failed to get new connection for uri: {}\", uri);\n        result.setException(e);\n    }\n}, bindAddress, uri, ioThread, ssl, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getConnection()","methodName":"getConnection","lineNumber":["945","1132"],"fullExpression":"result.getConnection()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"getDefaultXnioSsl()","methodName":"getDefaultXnioSsl","lineNumber":["330","349","354","375","443","456","465","495","501","518","524","1345","1357","1363"],"fullExpression":"getDefaultXnioSsl()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"getClientProvider(java.net.URI)","methodName":"getClientProvider","lineNumber":["376","466","496","502","519","525"],"fullExpression":"getClientProvider(uri)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"connect(java.net.InetSocketAddress, java.net.URI, org.xnio.XnioIoThread, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["396","408","422","434","444","457"],"fullExpression":"connect((InetSocketAddress) null, uri, ioThread, null, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getResponse()","methodName":"getResponse","lineNumber":["944","952","995","1041","1089","1096","1139","1197"],"fullExpression":"result.getResponse()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String)","methodName":"warn","lineNumber":["896"],"fullExpression":"logger.warn(\"Cannot find system default trust store\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"contains(io.undertow.util.HttpString)","methodName":"contains","lineNumber":["1412"],"fullExpression":"request.getRequestHeaders().contains(Headers.HOST)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap.Builder","methodSignature":"set(org.xnio.Option<T>, T)","methodName":"set","lineNumber":["98"],"fullExpression":"OptionMap.builder().set(Options.WORKER_IO_THREADS, 8).set(Options.TCP_NODELAY, true).set(Options.KEEP_ALIVE, true).set(Options.WORKER_NAME, \"Client\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["949","1093","1136","1194"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["248","253","336","366","417","1347","1359"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ChannelListeners","methodSignature":"flushingChannelListener(org.xnio.ChannelListener<? super T>, org.xnio.ChannelExceptionHandler<? super T>)","methodName":"flushingChannelListener","lineNumber":["973","1020","1066","1163"],"fullExpression":"ChannelListeners.<StreamSinkChannel>flushingChannelListener(null, null)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoFuture","methodSignature":"await(long, java.util.concurrent.TimeUnit)","methodName":"await","lineNumber":["225"],"fullExpression":"future.await(timeoutSeconds, TimeUnit.SECONDS)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getPath()","methodName":"getPath","lineNumber":["623","640","690"],"fullExpression":"request.getPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"borrowConnection(java.net.InetSocketAddress, java.net.URI, org.xnio.XnioIoThread, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"borrowConnection","lineNumber":["438"],"fullExpression":"borrowConnection(bindAddress, uri, ioThread, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.InetSocketAddress, java.net.URI, org.xnio.XnioWorker, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["490"],"fullExpression":"connect(listener, bindAddress, uri, worker, null, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Xnio","methodSignature":"createWorker(java.lang.ThreadGroup, org.xnio.OptionMap)","methodName":"createWorker","lineNumber":["179"],"fullExpression":"xnio.createWorker(null, Http2Client.DEFAULT_OPTIONS)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"callService(java.net.URI, io.undertow.client.ClientRequest, java.util.Optional<java.lang.String>)","methodName":"callService","lineNumber":["1230","1306"],"fullExpression":"callService(uri, request, requestBody)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"createSSLContext()","methodName":"createSSLContext","lineNumber":["310"],"fullExpression":"createSSLContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableWriteChannel","methodSignature":"shutdownWrites()","methodName":"shutdownWrites","lineNumber":["971","1018","1064","1161"],"fullExpression":"result.getRequestChannel().shutdownWrites()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"debug","lineNumber":["381","471","1249","1275","1399"],"fullExpression":"logger.debug(\"Adding the new connection: {} to FutureResult and cache it for uri: {}\", r, uri)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientProvider","methodSignature":"connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.InetSocketAddress, java.net.URI, org.xnio.XnioWorker, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["378","503","1367"],"fullExpression":"provider.connect(new ClientCallback<ClientConnection>() {\n\n    @Override\n    public void completed(ClientConnection r) {\n        if (logger.isDebugEnabled())\n            logger.debug(\"Adding the new connection: {} to FutureResult and cache it for uri: {}\", r, uri);\n        result.setResult(r);\n        http2ClientConnectionPool.cacheConnection(uri, r);\n    }\n\n    @Override\n    public void failed(IOException e) {\n        if (logger.isDebugEnabled())\n            logger.debug(\"Failed to get new connection for uri: {}\", uri);\n        result.setException(e);\n    }\n}, bindAddress, uri, worker, ssl, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"borrowConnection(java.net.URI, org.xnio.XnioWorker, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"borrowConnection","lineNumber":["336","366","371"],"fullExpression":"borrowConnection(uri, worker, ssl, bufferPool, isHttp2 ? OptionMap.create(UndertowOptions.ENABLE_HTTP2, true) : OptionMap.EMPTY)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["95"],"fullExpression":"LoggerFactory.getLogger(Http2Client.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object)","methodName":"error","lineNumber":["1308","1334"],"fullExpression":"logger.error(\"Failed to call service: {}\", serviceId)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"connectAsync(java.net.InetSocketAddress, java.net.URI, org.xnio.XnioWorker, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connectAsync","lineNumber":["1346","1358"],"fullExpression":"this.connectAsync(null, uri, WORKER, SSL, com.networknt.client.Http2Client.BUFFER_POOL, config.getRequestEnableHttp2() ? OptionMap.create(UndertowOptions.ENABLE_HTTP2, true) : OptionMap.EMPTY)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"builder()","methodName":"builder","lineNumber":["98"],"fullExpression":"OptionMap.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["779","786","818"],"fullExpression":"logger.info(\"Loading key store from system property at \" + Encode.forJava(keyStoreName))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["559","580","581","623","623","625","640","640","642","643","690","690","696","698","705","1388","1399","1412","1413"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"borrowConnection(java.net.URI, org.xnio.XnioWorker, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"borrowConnection","lineNumber":["248","281"],"fullExpression":"borrowConnection(uri, worker, bufferPool, isHttp2 ? OptionMap.create(UndertowOptions.ENABLE_HTTP2, true) : OptionMap.EMPTY)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object...)","methodName":"debug","lineNumber":["1388"],"fullExpression":"logger.debug(\"The request sent to {} = request header: {}, request body: {}\", uri.toString(), request.getRequestHeaders().toString(), requestBody.get())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"connect(java.net.InetSocketAddress, java.net.URI, org.xnio.XnioWorker, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["287","299","331","350"],"fullExpression":"connect(bindAddress, uri, worker, null, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getRequestChannel()","methodName":"getRequestChannel","lineNumber":["971","972","973","974","1018","1019","1020","1021","1038","1064","1065","1066","1067","1085","1161","1162","1163","1164","1187"],"fullExpression":"result.getRequestChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"callService(java.net.URI, io.undertow.client.ClientRequest, java.util.Optional<java.lang.String>, boolean)","methodName":"callService","lineNumber":["1234","1332"],"fullExpression":"callService(uri, request, requestBody, isHttp2)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.StringWriteChannelListener","methodSignature":"setup(org.xnio.channels.StreamSinkChannel)","methodName":"setup","lineNumber":["1085","1187"],"fullExpression":"new StringWriteChannelListener(requestBody).setup(result.getRequestChannel())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["658"],"fullExpression":"exchange.getRequestHeaders().getFirst(Headers.AUTHORIZATION)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"getFutureClientResponse(io.undertow.client.ClientConnection, java.net.URI, io.undertow.client.ClientRequest, java.util.Optional<java.lang.String>)","methodName":"getFutureClientResponse","lineNumber":["1250","1255","1276","1281"],"fullExpression":"getFutureClientResponse(currentConnection.get(), uri, request, requestBody)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getResponseChannel()","methodName":"getResponseChannel","lineNumber":["961","1010","1056","1105","1150","1208"],"fullExpression":"result.getResponseChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap.Builder","methodSignature":"getMap()","methodName":"getMap","lineNumber":["98"],"fullExpression":"OptionMap.builder().set(Options.WORKER_IO_THREADS, 8).set(Options.TCP_NODELAY, true).set(Options.KEEP_ALIVE, true).set(Options.WORKER_NAME, \"Client\").getMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"addAuthTokenTrace(io.undertow.client.ClientRequest, java.lang.String, java.lang.String)","methodName":"addAuthTokenTrace","lineNumber":["700"],"fullExpression":"addAuthTokenTrace(request, authToken, traceabilityId)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientProvider","methodSignature":"connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.URI, org.xnio.XnioIoThread, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["520"],"fullExpression":"provider.connect(listener, uri, ioThread, ssl, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"populateHeader(io.undertow.client.ClientRequest, java.lang.String, java.lang.String, java.lang.String)","methodName":"populateHeader","lineNumber":["661"],"fullExpression":"populateHeader(request, token, cid, tid)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"connect(io.undertow.client.ClientCallback<io.undertow.client.ClientConnection>, java.net.URI, org.xnio.XnioIoThread, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"connect","lineNumber":["507"],"fullExpression":"connect(listener, uri, ioThread, null, bufferPool, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["950","1094","1137","1195"],"fullExpression":"logger.trace(\"Service call response = {}\", string)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"error","lineNumber":["1303","1329"],"fullExpression":"logger.error(\"Failed to discover service with serviceID: {}, and tag: {}\", serviceId, envTag)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AttachmentKey","methodSignature":"create(java.lang.Class<? super T>)","methodName":"create","lineNumber":["110","111"],"fullExpression":"AttachmentKey.create(String.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.StringReadChannelListener","methodSignature":"setup(org.xnio.channels.StreamSourceChannel)","methodName":"setup","lineNumber":["945","1090","1132","1191"],"fullExpression":"new StringReadChannelListener(result.getConnection().getBufferPool()) {\n\n    @Override\n    protected void stringDone(String string) {\n        if (logger.isTraceEnabled()) {\n            logger.trace(\"Service call response = {}\", string);\n        }\n        result.getResponse().putAttachment(RESPONSE_BODY, string);\n        latch.countDown();\n    }\n\n    @Override\n    protected void error(IOException e) {\n        logger.error(\"IOException:\", e);\n        latch.countDown();\n    }\n}.setup(result.getResponseChannel())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"getFutureConnection(long, org.xnio.IoFuture<io.undertow.client.ClientConnection>)","methodName":"getFutureConnection","lineNumber":["282","304","367","372","413","418","439","462"],"fullExpression":"getFutureConnection(timeoutSeconds, future)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2Client","methodSignature":"borrowConnection(java.net.URI, org.xnio.XnioIoThread, org.xnio.ssl.XnioSsl, io.undertow.connector.ByteBufferPool, org.xnio.OptionMap)","methodName":"borrowConnection","lineNumber":["461"],"fullExpression":"borrowConnection(uri, ioThread, ssl, bufferPool, options)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/http-string/src/main/java/com/networknt/httpstring/AttachmentConstants.java":[{"declaringType":"io.undertow.util.AttachmentKey","methodSignature":"create(java.lang.Class<? super T>)","methodName":"create","lineNumber":["20","21","22","23","24","25","27","28","30","31","32"],"fullExpression":"AttachmentKey.create(Map.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/mask/src/main/java/com/networknt/mask/Mask.java":[{"declaringType":"org.owasp.encoder.Encode","methodSignature":"forJava(java.lang.String)","methodName":"forJava","lineNumber":["191"],"fullExpression":"Encode.forJava(key)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.Configuration.ConfigurationBuilder","methodSignature":"options(com.jayway.jsonpath.Option...)","methodName":"options","lineNumber":["223"],"fullExpression":"Configuration.builder().options(Option.AS_PATH_LIST)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.JsonPath","methodSignature":"parse(java.io.InputStream)","methodName":"parse","lineNumber":["159"],"fullExpression":"JsonPath.parse(input)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.Configuration.ConfigurationBuilder","methodSignature":"build()","methodName":"build","lineNumber":["223"],"fullExpression":"Configuration.builder().options(Option.AS_PATH_LIST).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.ReadContext","methodSignature":"read(java.lang.String, com.jayway.jsonpath.Predicate...)","methodName":"read","lineNumber":["201","225","236","241","249"],"fullExpression":"ctx.read(jsonPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.Configuration","methodSignature":"addOptions(com.jayway.jsonpath.Option...)","methodName":"addOptions","lineNumber":["222"],"fullExpression":"ctx.configuration().addOptions(Option.AS_PATH_LIST)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.JsonPath","methodSignature":"parse(java.lang.Object)","methodName":"parse","lineNumber":["172"],"fullExpression":"JsonPath.parse(input)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.mask.Mask","methodSignature":"applyMask(java.util.Map.Entry<java.lang.String, com.fasterxml.jackson.databind.JsonNode>, com.jayway.jsonpath.DocumentContext)","methodName":"applyMask","lineNumber":["187"],"fullExpression":"applyMask(entry, ctx)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.mask.Mask","methodSignature":"maskList(com.jayway.jsonpath.DocumentContext, java.lang.String, java.lang.String)","methodName":"maskList","lineNumber":["214"],"fullExpression":"maskList(ctx, jsonPath, entry.getValue().asText())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.ParseContext","methodSignature":"parse(java.lang.String)","methodName":"parse","lineNumber":["224"],"fullExpression":"JsonPath.using(conf).parse(ctx.jsonString())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.ReadContext","methodSignature":"configuration()","methodName":"configuration","lineNumber":["222"],"fullExpression":"ctx.configuration()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.JsonNode","methodSignature":"asText()","methodName":"asText","lineNumber":["206","214"],"fullExpression":"entry.getValue().asText()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.Configuration","methodSignature":"builder()","methodName":"builder","lineNumber":["223"],"fullExpression":"Configuration.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.mask.Mask","methodSignature":"maskJson(com.jayway.jsonpath.DocumentContext, java.lang.String)","methodName":"maskJson","lineNumber":["147","160","173"],"fullExpression":"maskJson(ctx, key)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Object)","methodName":"warn","lineNumber":["191","218"],"fullExpression":"logger.warn(\"mask.json doesn't contain the key {} \", Encode.forJava(key))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.JsonPath","methodSignature":"using(com.jayway.jsonpath.Configuration)","methodName":"using","lineNumber":["224"],"fullExpression":"JsonPath.using(conf)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["49"],"fullExpression":"LoggerFactory.getLogger(Mask.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.ReadContext","methodSignature":"jsonString()","methodName":"jsonString","lineNumber":["189","194","224"],"fullExpression":"ctx.jsonString()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object)","methodName":"error","lineNumber":["203","210"],"fullExpression":"logger.error(\"The value specified by path {} cannot be masked\", jsonPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.WriteContext","methodSignature":"set(java.lang.String, java.lang.Object, com.jayway.jsonpath.Predicate...)","methodName":"set","lineNumber":["206","250"],"fullExpression":"ctx.set(jsonPath, replaceWithMask(value.toString(), MASK_REPLACEMENT_CHAR.charAt(0), entry.getValue().asText()))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.mask.Mask","methodSignature":"replaceWithMask(java.lang.String, char, java.lang.String)","methodName":"replaceWithMask","lineNumber":["98","206","245","250"],"fullExpression":"replaceWithMask(input, MASK_REPLACEMENT_CHAR.charAt(0), regex)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.jayway.jsonpath.JsonPath","methodSignature":"parse(java.lang.String)","methodName":"parse","lineNumber":["146"],"fullExpression":"JsonPath.parse(input)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.JsonNode","methodSignature":"fields()","methodName":"fields","lineNumber":["184"],"fullExpression":"configNode.fields()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/SharedMetricRegistriesTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Throwable)","methodName":"assertThat","lineNumber":["95","106"],"fullExpression":"assertThat(e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["96","107"],"fullExpression":"assertThat(e.getMessage())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["96","107"],"fullExpression":"assertThat(e.getMessage()).isEqualTo(\"Default registry name has not been set.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["95","106"],"fullExpression":"assertThat(e).isInstanceOf(IllegalStateException.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/http-entity/src/main/java/com/networknt/http/MimeType.java":[{"declaringType":"com.networknt.http.MimeType.SpecificityComparator","methodSignature":"compareParameters(T, T)","methodName":"compareParameters","lineNumber":["643"],"fullExpression":"compareParameters(mimeType1, mimeType2)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"isQuotedString(java.lang.String)","methodName":"isQuotedString","lineNumber":["224","239"],"fullExpression":"isQuotedString(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"getParameter(java.lang.String)","methodName":"getParameter","lineNumber":["588"],"fullExpression":"getParameter(PARAM_CHARSET)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"isWildcardType()","methodName":"isWildcardType","lineNumber":["267","338","382","382","623","623","626","626"],"fullExpression":"isWildcardType()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"getSubtype()","methodName":"getSubtype","lineNumber":["148","160","258","258","343","343","348","354","356","357","358","386","386","392","392","396","399","528","528","639","639"],"fullExpression":"other.getSubtype()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"isWildcardSubtype()","methodName":"isWildcardSubtype","lineNumber":["267","346","389","389","395","398","633","633","636","636"],"fullExpression":"isWildcardSubtype()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"appendTo(java.util.Map<java.lang.String, java.lang.String>, java.lang.StringBuilder)","methodName":"appendTo","lineNumber":["505"],"fullExpression":"appendTo(this.parameters, builder)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"equalsTypeAndSubtype(com.networknt.http.MimeType)","methodName":"equalsTypeAndSubtype","lineNumber":["430"],"fullExpression":"mimeType.equalsTypeAndSubtype(this)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"appendTo(java.lang.StringBuilder)","methodName":"appendTo","lineNumber":["494"],"fullExpression":"appendTo(builder)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"parametersAreEqual(com.networknt.http.MimeType)","methodName":"parametersAreEqual","lineNumber":["449"],"fullExpression":"parametersAreEqual(otherType)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"checkParameters(java.lang.String, java.lang.String)","methodName":"checkParameters","lineNumber":["178"],"fullExpression":"checkParameters(parameter, value)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"unquote(java.lang.String)","methodName":"unquote","lineNumber":["221","590"],"fullExpression":"unquote(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"checkToken(java.lang.String)","methodName":"checkToken","lineNumber":["171","172","218","225"],"fullExpression":"checkToken(type)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"getType()","methodName":"getType","lineNumber":["148","160","248","342","342","385","385","524","524","629","629"],"fullExpression":"other.getType()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"addCharsetParameter(java.nio.charset.Charset, java.util.Map<java.lang.String, java.lang.String>)","methodName":"addCharsetParameter","lineNumber":["148"],"fullExpression":"addCharsetParameter(charset, other.getParameters())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"getParameters()","methodName":"getParameters","lineNumber":["148","532","532","538","540","568","569","649","650"],"fullExpression":"other.getParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"getCharset()","methodName":"getCharset","lineNumber":["469","469","552","553"],"fullExpression":"getCharset()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeType","methodSignature":"getSubtypeSuffix()","methodName":"getSubtypeSuffix","lineNumber":["390","391"],"fullExpression":"getSubtypeSuffix()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/body/src/test/java/com/networknt/body/BodyConverterTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["51","55","76","79"],"fullExpression":"Assert.assertTrue(aConvertedListvalue instanceof String)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["32","48","71","74"],"fullExpression":"Assert.assertEquals(0, bodyMap.size())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.form.FormData","methodSignature":"add(java.lang.String, java.lang.String)","methodName":"add","lineNumber":["43","44","66","67"],"fullExpression":"formData.add(aKey, aValue)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["52","56","77","80"],"fullExpression":"Assert.assertEquals(aValue, aConvertedListvalue)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/main/java/com/networknt/proxy/ProxyHealthGetHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["41"],"fullExpression":"logger.trace(\"ProxyHealthGetHandler is constructed.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["46","55","59","96","112"],"fullExpression":"logger.debug(\"ProxyHealthGetHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["94"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["91"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.ProxyHealthGetHandler","methodSignature":"backendHealth()","methodName":"backendHealth","lineNumber":["50"],"fullExpression":"backendHealth()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["41"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["56","60"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["76"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["91"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["81","103","107"],"fullExpression":"logger.error(\"Could not create connection to the backend:\", ex)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["90"],"fullExpression":"new ClientRequest().setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"isOpen()","methodName":"isOpen","lineNumber":["73","106"],"fullExpression":"connection.isOpen()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["56","60"],"fullExpression":"exchange.getResponseSender().send(HEALTH_RESULT_ERROR)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["46","55","59","96","112"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["34"],"fullExpression":"LoggerFactory.getLogger(ProxyHealthGetHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setStatusCode(int)","methodName":"setStatusCode","lineNumber":["54","58"],"fullExpression":"exchange.setStatusCode(400)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["99"],"fullExpression":"logger.error(\"Error due to error response from backend with status code = \" + statusCode + \" body = \" + body)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/audit/src/test/java/com/networknt/audit/AuditHandlerTestBase.java":[{"declaringType":"ch.qos.logback.classic.Logger","methodSignature":"addAppender(ch.qos.logback.core.Appender<ch.qos.logback.classic.spi.ILoggingEvent>)","methodName":"addAppender","lineNumber":["141"],"fullExpression":"auditLogger.addAppender(mockAppender)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["108"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["124"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["108"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["132","135"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["212"],"fullExpression":"Assert.assertEquals(expectStatus, reference.get().getResponseCode())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["192","193","195","197","199"],"fullExpression":"request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"text/plain\")","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Logger","methodSignature":"detachAppender(ch.qos.logback.core.Appender<ch.qos.logback.classic.spi.ILoggingEvent>)","methodName":"detachAppender","lineNumber":["148"],"fullExpression":"auditLogger.detachAppender(mockAppender)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["112"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodSignature":"getValue()","methodName":"getValue","lineNumber":["154","166"],"fullExpression":"captorLoggingEvent.getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["131"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["132"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"times(int)","methodName":"times","lineNumber":["153","165"],"fullExpression":"times(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["210"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNull(java.lang.Object)","methodName":"assertNull","lineNumber":["169"],"fullExpression":"Assert.assertNull(mapValue.get(key))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["108"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["191"],"fullExpression":"new ClientRequest().setMethod(Methods.POST).setPath(path)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["69"],"fullExpression":"LoggerFactory.getLogger(AuditHandlerTestBase.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["131","131","131"],"fullExpression":"Handlers.routing().add(Methods.POST, \"/pet\", exchange -> exchange.getResponseSender().send(\"OK\")).add(Methods.POST, \"/error\", exchange -> new ErrorStatusTestHandler().handleRequest(exchange)).add(Methods.POST, \"/error/{petId}\", exchange -> new ErrorStatusTestHandler().handleRequest(exchange))","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.spi.ILoggingEvent","methodSignature":"getLevel()","methodName":"getLevel","lineNumber":["157"],"fullExpression":"event.getLevel()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["188"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(path);\n        request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"text/plain\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(HttpStringConstants.TRACEABILITY_ID, \"tid\");\n        request.getRequestHeaders().put(Headers.AUTHORIZATION, \"Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5MDAzNTcwOSwianRpIjoiSTJnSmdBSHN6NzJEV2JWdUFMdUU2QSIsImlhdCI6MTQ3NDY3NTcwOSwibmJmIjoxNDc0Njc1NTg5LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.mue6eh70kGS3Nt2BCYz7ViqwO7lh_4JSFwcHYdJMY6VfgKTHhsIGKq2uEDt3zwT56JFAePwAxENMGUTGvgceVneQzyfQsJeVGbqw55E9IfM_uSM-YcHwTfR7eSLExN4pbqzVDI353sSOvXxA98ZtJlUZKgXNE1Ngun3XFORCRIB_eH8B0FY_nT_D1Dq2WJrR-re-fbR6_va95vwoUdCofLRa4IpDfXXx19ZlAtfiVO44nw6CS8O87eGfAm7rCMZIzkWlCOFWjNHnCeRsh7CVdEH34LF-B48beiG5lM7h4N12-EME8_VDefgMjZ8eqs1ICvJMxdIut58oYbdnkwTjkA\");\n        request.getRequestHeaders().put(HttpStringConstants.SCOPE_TOKEN, \"Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5MDAzNTcwOSwianRpIjoiSTJnSmdBSHN6NzJEV2JWdUFMdUU2QSIsImlhdCI6MTQ3NDY3NTcwOSwibmJmIjoxNDc0Njc1NTg5LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.mue6eh70kGS3Nt2BCYz7ViqwO7lh_4JSFwcHYdJMY6VfgKTHhsIGKq2uEDt3zwT56JFAePwAxENMGUTGvgceVneQzyfQsJeVGbqw55E9IfM_uSM-YcHwTfR7eSLExN4pbqzVDI353sSOvXxA98ZtJlUZKgXNE1Ngun3XFORCRIB_eH8B0FY_nT_D1Dq2WJrR-re-fbR6_va95vwoUdCofLRa4IpDfXXx19ZlAtfiVO44nw6CS8O87eGfAm7rCMZIzkWlCOFWjNHnCeRsh7CVdEH34LF-B48beiG5lM7h4N12-EME8_VDefgMjZ8eqs1ICvJMxdIut58oYbdnkwTjkA\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        if (cookies != null) {\n            request.getRequestHeaders().put(Headers.COOKIE, cookies);\n        }\n        connection.sendRequest(request, client.createClientCallback(reference, latch, post));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["89","125"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["212"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["192","193","194","195","196","197","199"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.audit.AuditHandlerTestBase","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["90"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["191"],"fullExpression":"new ClientRequest().setMethod(Methods.POST)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["207"],"fullExpression":"logger.error(\"IOException: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.spi.ILoggingEvent","methodSignature":"getFormattedMessage()","methodName":"getFormattedMessage","lineNumber":["155","167"],"fullExpression":"event.getFormattedMessage()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["188"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"verify(T, org.mockito.verification.VerificationMode)","methodName":"verify","lineNumber":["153","165"],"fullExpression":"verify(mockAppender, times(1))","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.core.Appender","methodSignature":"doAppend(E)","methodName":"doAppend","lineNumber":["153","165"],"fullExpression":"verify(mockAppender, times(1)).doAppend(captorLoggingEvent.capture())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodSignature":"capture()","methodName":"capture","lineNumber":["153","165"],"fullExpression":"captorLoggingEvent.capture()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["108"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["157","171"],"fullExpression":"Assert.assertEquals(Level.INFO, event.getLevel())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/cache-manager/src/main/java/com/networknt/cache/CacheManager.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["19"],"fullExpression":"LoggerFactory.getLogger(CacheManager.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["31","35"],"fullExpression":"logger.error(\"CacheManager implementation is not found in the service.yml\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/encode-decode/src/main/java/com/networknt/decode/RequestDecodeConfig.java":[{"declaringType":"com.networknt.decode.RequestDecodeConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["44","61","67"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["109"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["109"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["31"],"fullExpression":"LoggerFactory.getLogger(RequestDecodeConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.decode.RequestDecodeConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["96","97"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.decode.RequestDecodeConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["45","62","68"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/audit/src/test/java/com/networknt/audit/ParameterHandler.java":[{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"get(io.undertow.util.HttpString)","methodName":"get","lineNumber":["35"],"fullExpression":"exchange.getRequestHeaders().get(Headers.COOKIE)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"addPathParam(java.lang.String, java.lang.String)","methodName":"addPathParam","lineNumber":["51"],"fullExpression":"exchange.addPathParam(entry.getKey(), entry.getValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["65"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.PathTemplateMatcher","methodSignature":"match(java.lang.String)","methodName":"match","lineNumber":["43"],"fullExpression":"pathTemplateMatcher.match(exchange.getRequestPath())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.PathTemplateMatch","methodSignature":"getMatchedTemplate()","methodName":"getMatchedTemplate","lineNumber":["47"],"fullExpression":"result.getMatchedTemplate()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestCookies()","methodName":"getRequestCookies","lineNumber":["40"],"fullExpression":"exchange.getRequestCookies()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AbstractAttachable","methodSignature":"putAttachment(io.undertow.util.AttachmentKey<T>, T)","methodName":"putAttachment","lineNumber":["46"],"fullExpression":"exchange.putAttachment(ATTACHMENT_KEY, new io.undertow.util.PathTemplateMatch(result.getMatchedTemplate(), result.getParameters()))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["35"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["43"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.PathTemplateMatch","methodSignature":"getParameters()","methodName":"getParameters","lineNumber":["47","48"],"fullExpression":"result.getParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"addQueryParam(java.lang.String, java.lang.String)","methodName":"addQueryParam","lineNumber":["49"],"fullExpression":"exchange.addQueryParam(entry.getKey(), entry.getValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.PathTemplateMatcher","methodSignature":"add(java.lang.String, T)","methodName":"add","lineNumber":["27","28","29"],"fullExpression":"pathTemplateMatcher.add(\"/pet\", \"0\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/info-config/src/main/java/com/networknt/info/ServerInfoConfig.java":[{"declaringType":"com.networknt.info.ServerInfoConfig","methodSignature":"setData()","methodName":"setData","lineNumber":["53","67"],"fullExpression":"setData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["130"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.info.ServerInfoConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["118","120","122","142"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["130"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["30"],"fullExpression":"LoggerFactory.getLogger(ServerInfoConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.info.ServerInfoConfig","methodSignature":"setList()","methodName":"setList","lineNumber":["54","68"],"fullExpression":"setList()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/Counter.java":[{"declaringType":"io.dropwizard.metrics.Counter","methodSignature":"dec(long)","methodName":"dec","lineNumber":["51"],"fullExpression":"dec(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Counter","methodSignature":"inc(long)","methodName":"inc","lineNumber":["35"],"fullExpression":"inc(1)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server/src/test/java/com/networknt/server/TestHandlerProvider.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["30"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/JmxAttributeGauge.java":[{"declaringType":"io.dropwizard.metrics.JmxAttributeGauge","methodSignature":"getObjectName()","methodName":"getObjectName","lineNumber":["62"],"fullExpression":"getObjectName()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/service/src/test/java/com/networknt/service/TestServiceUtil.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["37"],"fullExpression":"Assert.assertNotNull(object)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/balance/src/test/java/com/networknt/balance/RoundRobinLoadBalanceTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotEquals(long, long)","methodName":"assertNotEquals","lineNumber":["77"],"fullExpression":"Assert.assertNotEquals(r1, r2)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/data-source/src/test/java/com/networknt/db/factory/DataSourceFactoryTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["18","19"],"fullExpression":"assertNotNull(dataSource1)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/dump/src/main/java/com/networknt/dump/StoreResponseStreamSinkConduit.java":[{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseContentLength()","methodName":"getResponseContentLength","lineNumber":["44"],"fullExpression":"exchange.getResponseContentLength()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.AbstractSinkConduit","methodSignature":"terminateWrites()","methodName":"terminateWrites","lineNumber":["129"],"fullExpression":"super.terminateWrites()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.AbstractStreamSinkConduit","methodSignature":"write(java.nio.ByteBuffer[], int, int)","methodName":"write","lineNumber":["71","107"],"fullExpression":"super.write(srcs, offs, len)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AbstractAttachable","methodSignature":"putAttachment(io.undertow.util.AttachmentKey<T>, T)","methodName":"putAttachment","lineNumber":["127"],"fullExpression":"exchange.putAttachment(RESPONSE, outputStream.toByteArray())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AttachmentKey","methodSignature":"create(java.lang.Class<? super T>)","methodName":"create","lineNumber":["37"],"fullExpression":"AttachmentKey.create(byte[].class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.AbstractStreamSinkConduit","methodSignature":"write(java.nio.ByteBuffer)","methodName":"write","lineNumber":["58"],"fullExpression":"super.write(src)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.AbstractStreamSinkConduit","methodSignature":"writeFinal(java.nio.ByteBuffer)","methodName":"writeFinal","lineNumber":["91"],"fullExpression":"super.writeFinal(src)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.UndertowMessages","methodSignature":"responseTooLargeToBuffer(java.lang.Long)","methodName":"responseTooLargeToBuffer","lineNumber":["49"],"fullExpression":"UndertowMessages.MESSAGES.responseTooLargeToBuffer(length)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/registry/src/test/java/com/networknt/registry/URLTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["74","77","99"],"fullExpression":"Assert.assertTrue(b1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["80","83"],"fullExpression":"Assert.assertEquals(10, i1.intValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["69","71","92","95","102"],"fullExpression":"Assert.assertEquals(\"value1\", p1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"fail(java.lang.String)","methodName":"fail","lineNumber":["49"],"fullExpression":"fail(String.format(\"URL.%s should not return primitive type\", m.getName()))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/encode-decode/src/main/java/com/networknt/encode/ResponseEncodeHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["72"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.encoding.AllowedContentEncodings","methodSignature":"isNoEncodingsAllowed()","methodName":"isNoEncodingsAllowed","lineNumber":["92"],"fullExpression":"encodings.isNoEncodingsAllowed()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.encoding.ContentEncodingRepository","methodSignature":"addEncodingHandler(java.lang.String, io.undertow.server.handlers.encoding.ContentEncodingProvider, int)","methodName":"addEncodingHandler","lineNumber":["56","58"],"fullExpression":"contentEncodingRepository.addEncodingHandler(encoder, new GzipEncodingProvider(), 100)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"addResponseWrapper(io.undertow.server.ConduitWrapper<org.xnio.conduits.StreamSinkConduit>)","methodName":"addResponseWrapper","lineNumber":["96"],"fullExpression":"exchange.addResponseWrapper(encodings)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AbstractAttachable","methodSignature":"putAttachment(io.undertow.util.AttachmentKey<T>, T)","methodName":"putAttachment","lineNumber":["97"],"fullExpression":"exchange.putAttachment(AllowedContentEncodings.ATTACHMENT_KEY, encodings)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.encoding.ContentEncodingRepository","methodSignature":"getContentEncodings(io.undertow.server.HttpServerExchange)","methodName":"getContentEncodings","lineNumber":["89"],"fullExpression":"contentEncodingRepository.getContentEncodings(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isResponseChannelAvailable()","methodName":"isResponseChannelAvailable","lineNumber":["90"],"fullExpression":"exchange.isResponseChannelAvailable()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/listener/ByteBufferWriteChannelListener.java":[{"declaringType":"org.xnio.ChannelListener.Setter","methodSignature":"set(org.xnio.ChannelListener<? super T>)","methodName":"set","lineNumber":["35","83"],"fullExpression":"channel.getWriteSetter().set(this)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ChannelListeners","methodSignature":"closingChannelExceptionHandler()","methodName":"closingChannelExceptionHandler","lineNumber":["87"],"fullExpression":"ChannelListeners.closingChannelExceptionHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableWriteChannel","methodSignature":"shutdownWrites()","methodName":"shutdownWrites","lineNumber":["81"],"fullExpression":"channel.shutdownWrites()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.listener.ByteBufferWriteChannelListener","methodSignature":"writeDone(org.xnio.channels.StreamSinkChannel)","methodName":"writeDone","lineNumber":["38","66"],"fullExpression":"this.writeDone(channel)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["50","85"],"fullExpression":"IoUtils.safeClose(channel)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableWriteChannel","methodSignature":"resumeWrites()","methodName":"resumeWrites","lineNumber":["36","62","88"],"fullExpression":"channel.resumeWrites()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.StreamSinkChannel","methodSignature":"getWriteSetter()","methodName":"getWriteSetter","lineNumber":["35","83"],"fullExpression":"channel.getWriteSetter()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.listener.ByteBufferWriteChannelListener","methodSignature":"handleError(org.xnio.channels.StreamSinkChannel, java.io.IOException)","methodName":"handleError","lineNumber":["41","68","91"],"fullExpression":"this.handleError(channel, var3)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ChannelListeners","methodSignature":"flushingChannelListener(org.xnio.ChannelListener<? super T>, org.xnio.ChannelExceptionHandler<? super T>)","methodName":"flushingChannelListener","lineNumber":["83"],"fullExpression":"ChannelListeners.flushingChannelListener(new ChannelListener<StreamSinkChannel>() {\n\n    public void handleEvent(StreamSinkChannel o) {\n        IoUtils.safeClose(channel);\n    }\n}, ChannelListeners.closingChannelExceptionHandler())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.UndertowLogger","methodSignature":"ioException(java.io.IOException)","methodName":"ioException","lineNumber":["49"],"fullExpression":"UndertowLogger.REQUEST_IO_LOGGER.ioException(e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableWriteChannel","methodSignature":"flush()","methodName":"flush","lineNumber":["82"],"fullExpression":"channel.flush()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/body/src/main/java/com/networknt/body/RequestBodyInterceptor.java":[{"declaringType":"com.networknt.body.RequestBodyInterceptor","methodSignature":"attachJsonBody(io.undertow.server.HttpServerExchange, java.lang.String)","methodName":"attachJsonBody","lineNumber":["114"],"fullExpression":"this.attachJsonBody(ex, body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["180"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["55","200"],"fullExpression":"LOG.info(\"RequestBodyInterceptor is loaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["70","107"],"fullExpression":"LOG.debug(\"RequestBodyInterceptor.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["82","100","103"],"fullExpression":"LOG.trace(\"Attach request body requirement is met and the byte buffer pool exists.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.body.RequestBodyInterceptor","methodSignature":"attachXmlBody(io.undertow.server.HttpServerExchange, java.lang.String)","methodName":"attachXmlBody","lineNumber":["117"],"fullExpression":"this.attachXmlBody(ex, body)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.body.RequestBodyInterceptor","methodSignature":"cacheRequestBody(io.undertow.server.HttpServerExchange, java.lang.String)","methodName":"cacheRequestBody","lineNumber":["137","141","151","164"],"fullExpression":"this.cacheRequestBody(ex, str)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["76","81","87","99","102"],"fullExpression":"LOG.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isErrorEnabled()","methodName":"isErrorEnabled","lineNumber":["96"],"fullExpression":"LOG.isErrorEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["85"],"fullExpression":"exchange.getRequestHeaders().getFirst(Headers.CONTENT_TYPE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["54","199"],"fullExpression":"LOG.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["69","106"],"fullExpression":"LOG.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.body.RequestBodyInterceptor","methodSignature":"attachFormDataBody(io.undertow.server.HttpServerExchange, java.lang.String)","methodName":"attachFormDataBody","lineNumber":["120"],"fullExpression":"this.attachFormDataBody(ex, body)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["77"],"fullExpression":"LOG.trace(\"request body exists in exchange attachment = {}\", existing != null)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["46"],"fullExpression":"LoggerFactory.getLogger(RequestBodyInterceptor.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["72","85"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["97"],"fullExpression":"LOG.error(\"Failed to attach the request body to the exchange!\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/security-config/src/main/java/com/networknt/security/SecurityConfig.java":[{"declaringType":"com.networknt.security.SecurityConfig","methodSignature":"setSkipPathPrefixes()","methodName":"setSkipPathPrefixes","lineNumber":["83","95"],"fullExpression":"setSkipPathPrefixes()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["182","249","277"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.SecurityConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["177","178","198","199","201","203","205","207","209","211","213","215","217","219","221","223","225","227","229","231","233"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["182","249","277"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["23"],"fullExpression":"LoggerFactory.getLogger(SecurityConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.SecurityConfig","methodSignature":"setCertificate()","methodName":"setCertificate","lineNumber":["81","93"],"fullExpression":"setCertificate()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["283"],"fullExpression":"logger.error(\"IOException:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["295"],"fullExpression":"logger.error(\"passThroughClaims is the wrong type. Only JSON map or YAML map is supported.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.SecurityConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["82","94"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.SecurityConfig","methodSignature":"setPassThroughClaims()","methodName":"setPassThroughClaims","lineNumber":["84","96"],"fullExpression":"setPassThroughClaims()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/simplepool/mockexample/MockTimeoutLeakedConnection.java":[{"declaringType":"com.networknt.client.simplepool.mockexample.MockTimeoutLeakedConnection","methodSignature":"randomCreationDelay()","methodName":"randomCreationDelay","lineNumber":["39"],"fullExpression":"randomCreationDelay()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/org/apache/hc/core5/util/copied/Args.java":[{"declaringType":"org.apache.hc.core5.util.copied.Args","methodSignature":"illegalArgumentExceptionNotNull(java.lang.String)","methodName":"illegalArgumentExceptionNotNull","lineNumber":["81","106","116","126","150"],"fullExpression":"illegalArgumentExceptionNotNull(name)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.hc.core5.util.copied.Args","methodSignature":"illegalArgumentException(java.lang.String, java.lang.Object...)","methodName":"illegalArgumentException","lineNumber":["64","73","136","143","157","164"],"fullExpression":"illegalArgumentException(\"%s: %,d is out of range [%,d, %,d]\", message, Integer.valueOf(value), Integer.valueOf(lowInclusive), Integer.valueOf(highInclusive))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.hc.core5.util.copied.Args","methodSignature":"illegalArgumentExceptionNotEmpty(java.lang.String)","methodName":"illegalArgumentExceptionNotEmpty","lineNumber":["84","119","129"],"fullExpression":"illegalArgumentExceptionNotEmpty(name)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler/src/main/java/com/networknt/handler/RequestInterceptorInjectionHandler.java":[{"declaringType":"org.xnio.ChannelListener.Setter","methodSignature":"set(org.xnio.ChannelListener<? super T>)","methodName":"set","lineNumber":["184","250"],"fullExpression":"c.getReadSetter().set(new ChannelListener<StreamSourceChannel>() {\n\n    PooledByteBuffer buffer = cPooledBuffer;\n\n    int readBuffers = cRead;\n\n    @Override\n    public void handleEvent(StreamSourceChannel channel) {\n        try {\n            for (; ; ) {\n                int r;\n                var b = buffer.getBuffer();\n                r = channel.read(b);\n                if (r == -1) {\n                    handleEndOfStream(b, bufferedData, readBuffers, buffer);\n                    suspendReads(ex, bufferedData, channel, next);\n                    return;\n                } else if (r == 0)\n                    return;\n                else if (!b.hasRemaining()) {\n                    b.flip();\n                    bufferedData[readBuffers++] = buffer;\n                    if (readBuffers == config.getMaxBuffers()) {\n                        suspendReads(ex, bufferedData, channel, next);\n                        return;\n                    }\n                    buffer = ex.getConnection().getByteBufferPool().allocate();\n                }\n            }\n        } catch (Throwable e) {\n            safeCloseBuffers(bufferedData, buffer);\n            ex.endExchange();\n        }\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["56"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.protocol.http.HttpContinue","methodSignature":"requiresContinueResponse(io.undertow.util.HeaderMap)","methodName":"requiresContinueResponse","lineNumber":["89"],"fullExpression":"HttpContinue.requiresContinueResponse(httpServerExchange.getRequestHeaders())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.Connectors","methodSignature":"resetRequestChannel(io.undertow.server.HttpServerExchange)","methodName":"resetRequestChannel","lineNumber":["271"],"fullExpression":"Connectors.resetRequestChannel(ex)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getConnection()","methodName":"getConnection","lineNumber":["97","121","214"],"fullExpression":"httpServerExchange.getConnection()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["70","253"],"fullExpression":"LOG.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ServerConnection","methodSignature":"getByteBufferPool()","methodName":"getByteBufferPool","lineNumber":["97","121","214"],"fullExpression":"httpServerExchange.getConnection().getByteBufferPool()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["89","151"],"fullExpression":"httpServerExchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"endExchange()","methodName":"endExchange","lineNumber":["130","219"],"fullExpression":"httpServerExchange.endExchange()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.RequestInterceptorInjectionHandler","methodSignature":"injectorContentRequired()","methodName":"injectorContentRequired","lineNumber":["89","153"],"fullExpression":"this.injectorContentRequired()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["236"],"fullExpression":"IoUtils.safeClose(buf)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.connector.PooledByteBuffer","methodSignature":"getBuffer()","methodName":"getBuffer","lineNumber":["194"],"fullExpression":"buffer.getBuffer()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["84","150"],"fullExpression":"httpServerExchange.getRequestMethod().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["32"],"fullExpression":"LoggerFactory.getLogger(RequestInterceptorInjectionHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.connector.PooledByteBuffer","methodSignature":"close()","methodName":"close","lineNumber":["291"],"fullExpression":"buffer.close()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String, java.lang.Object)","methodName":"info","lineNumber":["254"],"fullExpression":"LOG.info(\"Next is: {}\", next.getClass())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, long)","methodName":"put","lineNumber":["284"],"fullExpression":"ex.getRequestHeaders().put(Headers.CONTENT_LENGTH, length)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["39","45"],"fullExpression":"LOG.info(\"RequestInterceptorInjectionHandler is loaded!\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["71"],"fullExpression":"LOG.trace(\"request-injection.yml is reloaded\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.RequestInterceptorInjectionHandler","methodSignature":"shouldReadBody(io.undertow.server.HttpServerExchange)","methodName":"shouldReadBody","lineNumber":["91"],"fullExpression":"this.shouldReadBody(httpServerExchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.connector.PooledByteBuffer","methodSignature":"isOpen()","methodName":"isOpen","lineNumber":["235"],"fullExpression":"buf.isOpen()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isRequestComplete()","methodName":"isRequestComplete","lineNumber":["89","156"],"fullExpression":"httpServerExchange.isRequestComplete()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.StreamSourceChannel","methodSignature":"getReadSetter()","methodName":"getReadSetter","lineNumber":["184","250"],"fullExpression":"c.getReadSetter()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableReadChannel","methodSignature":"suspendReads()","methodName":"suspendReads","lineNumber":["251"],"fullExpression":"c.suspendReads()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["84","150"],"fullExpression":"httpServerExchange.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.RequestInterceptorInjectionHandler","methodSignature":"invokeInterceptors(io.undertow.server.HttpServerExchange)","methodName":"invokeInterceptors","lineNumber":["136","272"],"fullExpression":"this.invokeInterceptors(httpServerExchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isResponseStarted()","methodName":"isResponseStarted","lineNumber":["141","143","313"],"fullExpression":"httpServerExchange.isResponseStarted()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["317"],"fullExpression":"LOG.error(e.getMessage(), e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestChannel()","methodName":"getRequestChannel","lineNumber":["93"],"fullExpression":"httpServerExchange.getRequestChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["276","277"],"fullExpression":"ex.getRequestHeaders().getFirst(Headers.CONTENT_LENGTH)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.RequestInterceptorInjectionHandler","methodSignature":"updateContentLength(io.undertow.server.HttpServerExchange, io.undertow.connector.PooledByteBuffer[])","methodName":"updateContentLength","lineNumber":["269"],"fullExpression":"this.updateContentLength(ex, bufferedData)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.RequestInterceptorInjectionHandler","methodSignature":"isAppliedBodyInjectionPathPrefix(java.lang.String)","methodName":"isAppliedBodyInjectionPathPrefix","lineNumber":["89"],"fullExpression":"this.isAppliedBodyInjectionPathPrefix(httpServerExchange.getRequestPath())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.RequestInterceptorInjectionHandler","methodSignature":"suspendReads(io.undertow.server.HttpServerExchange, io.undertow.connector.PooledByteBuffer[], org.xnio.channels.StreamSourceChannel, io.undertow.server.HttpHandler)","methodName":"suspendReads","lineNumber":["199","210"],"fullExpression":"suspendReads(ex, bufferedData, channel, next)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.Connectors","methodSignature":"ungetRequestBytes(io.undertow.server.HttpServerExchange, io.undertow.connector.PooledByteBuffer...)","methodName":"ungetRequestBytes","lineNumber":["270"],"fullExpression":"Connectors.ungetRequestBytes(ex, bufferedData)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["89","149","276","277","284"],"fullExpression":"httpServerExchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.RequestInterceptorInjectionHandler","methodSignature":"safeCloseBuffers(io.undertow.connector.PooledByteBuffer[], io.undertow.connector.PooledByteBuffer)","methodName":"safeCloseBuffers","lineNumber":["218"],"fullExpression":"safeCloseBuffers(bufferedData, buffer)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.RequestInterceptorInjectionHandler","methodSignature":"saveBufferAndResetUndertowConnector(io.undertow.server.HttpServerExchange, io.undertow.connector.PooledByteBuffer[])","methodName":"saveBufferAndResetUndertowConnector","lineNumber":["248"],"fullExpression":"saveBufferAndResetUndertowConnector(ex, bufferedData)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.Connectors","methodSignature":"executeRootHandler(io.undertow.server.HttpHandler, io.undertow.server.HttpServerExchange)","methodName":"executeRootHandler","lineNumber":["256"],"fullExpression":"Connectors.executeRootHandler(next, ex)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.connector.ByteBufferPool","methodSignature":"allocate()","methodName":"allocate","lineNumber":["97","121","214"],"fullExpression":"httpServerExchange.getConnection().getByteBufferPool().allocate()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/test/java/com/networknt/proxy/salesforce/SalesforceHandlerTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["33","56"],"fullExpression":"logger.info(\"starting serverconfig\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["38"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["55"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["93","127"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["38"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["84","116","117","118"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["63","66"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["95","130"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["38"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["77","108"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["84","116","117","118"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["83","115"],"fullExpression":"new ClientRequest().setPath(\"/salesforce\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["88","122"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["43"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["61"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["63","66"],"fullExpression":"exchange.getResponseSender().send(\"POST OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["91","125"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["38"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.salesforce.SalesforceHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["34"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["83","115"],"fullExpression":"new ClientRequest().setPath(\"/salesforce\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["26"],"fullExpression":"LoggerFactory.getLogger(SalesforceHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["38"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["97"],"fullExpression":"Assert.assertEquals(\"GET OK\", body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["61","61"],"fullExpression":"Handlers.routing().add(Methods.POST, \"/\", exchange -> {\n    exchange.getResponseSender().send(\"POST OK\");\n}).add(Methods.GET, \"/\", exchange -> {\n    exchange.getResponseSender().send(\"GET OK\");\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler/src/main/java/com/networknt/handler/OrchestrationHandler.java":[{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["49"],"fullExpression":"exchange.getRequestMethod().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["49"],"fullExpression":"exchange.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["49"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/content/src/test/java/com/networknt/content/ContentHandlerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["135","173","211","246"],"fullExpression":"Assert.assertNotNull(header)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["64"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["80"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["64"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["88","91","97"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["134","172","210","245"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["119","120","157","158","195","196","231"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["68"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["86"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["88","91","97"],"fullExpression":"exchange.getResponseSender().send(\"This is just a proof\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["127","165","203","238"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.content.ContentHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["58"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["64"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["118","156","194","230"],"fullExpression":"new ClientRequest().setPath(\"/\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["49"],"fullExpression":"LoggerFactory.getLogger(ContentHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(java.lang.String)","methodName":"getFirst","lineNumber":["132","170","208","243"],"fullExpression":"headerMap.getFirst(defaultHeader)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["86","86","86"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/\", exchange -> {\n    exchange.getResponseSender().send(\"This is just a proof\");\n}).add(Methods.GET, \"/xml\", exchange -> {\n    exchange.getResponseSender().send(\"<bookstore><book><title>The best of Light-4j</title>\" + \"<author>Steve Hu</author><year>2018</year></book></bookstore>\");\n}).add(Methods.GET, \"/json\", exchange -> {\n    exchange.getResponseSender().send(\"{\\\"bookstore\\\":{\\\"book\\\":{\\\"title\\\":\\\"The best of Light-4j\\\",\\\"author\\\":\\\"Steve Hu\\\"}}}\");\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["57","81"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["130","168","206","241"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["119","120","157","158","195","196","231"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["131","169","207","242"],"fullExpression":"reference.get().getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["118","156","194","230"],"fullExpression":"new ClientRequest().setPath(\"/\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["124","162","200","235"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["64"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["136","174","212","247"],"fullExpression":"Assert.assertEquals(header, defaultContentType)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/circuitbreaker/CircuitBreaker.java":[{"declaringType":"com.networknt.client.circuitbreaker.CircuitBreaker","methodSignature":"recordTimeout()","methodName":"recordTimeout","lineNumber":["61"],"fullExpression":"recordTimeout()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.circuitbreaker.CircuitBreaker","methodSignature":"checkState()","methodName":"checkState","lineNumber":["47"],"fullExpression":"checkState()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/main/java/com/networknt/router/middleware/PathPrefixServiceConfig.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["81"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.PathPrefixServiceConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["43","57"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["81"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["20"],"fullExpression":"LoggerFactory.getLogger(PathPrefixServiceConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.PathPrefixServiceConfig","methodSignature":"setMap()","methodName":"setMap","lineNumber":["42","56"],"fullExpression":"setMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["88"],"fullExpression":"logger.error(\"IOException:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["102"],"fullExpression":"logger.error(\"Mapping is the wrong type. Only JSON string and YAML map are supported.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.PathPrefixServiceConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["108"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/health/src/test/java/com/networknt/health/HealthGetHandlerTest.java":[{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"get(io.undertow.util.HttpString)","methodName":"get","lineNumber":["122"],"fullExpression":"reference.get().getResponseHeaders().get(Headers.CONTENT_TYPE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["53","72"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["55"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["71"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["115"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["55"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["106"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["117"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["106"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["122"],"fullExpression":"reference.get().getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["105"],"fullExpression":"new ClientRequest().setPath(\"/server/health\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["110"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["59"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["77"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"getFirst()","methodName":"getFirst","lineNumber":["122"],"fullExpression":"reference.get().getResponseHeaders().get(Headers.CONTENT_TYPE).getFirst()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["113"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.health.HealthGetHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["54"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["55"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["105"],"fullExpression":"new ClientRequest().setPath(\"/server/health\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["44"],"fullExpression":"LoggerFactory.getLogger(HealthGetHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.health.HealthGetHandlerTest","methodSignature":"testHealth(boolean)","methodName":"testHealth","lineNumber":["82","88"],"fullExpression":"testHealth(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["55"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["121"],"fullExpression":"Assert.assertEquals(\"application/json\", reference.get().getResponseHeaders().get(Headers.CONTENT_TYPE).getFirst())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/logger-handler/src/main/java/com/networknt/logging/handler/LoggerGetLogContentsHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["65"],"fullExpression":"logger.debug(\"startTime = \" + requestTimeRangeStart + \" endTime = \" + requestTimeRangeEnd + \" loggerName = \" + loggerName + \" loggerLevel = \" + loggerLevel + \" offset = \" + offset + \" limit = \" + limit)","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Level","methodSignature":"isGreaterOrEqual(ch.qos.logback.classic.Level)","methodName":"isGreaterOrEqual","lineNumber":["145"],"fullExpression":"logLevel.isGreaterOrEqual(loggerLevel)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.logging.handler.LoggerGetLogContentsHandler","methodSignature":"parseAppenderFile(java.io.BufferedReader, long, long, ch.qos.logback.classic.Logger, ch.qos.logback.classic.Level, int, int)","methodName":"parseAppenderFile","lineNumber":["113"],"fullExpression":"this.parseAppenderFile(bufferedReader, startTime, endTime, log, loggerLevel, offset, limit)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["95"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Level","methodSignature":"valueOf(java.lang.String)","methodName":"valueOf","lineNumber":["143"],"fullExpression":"Level.valueOf(levelStr.trim())","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Logger","methodSignature":"getName()","methodName":"getName","lineNumber":["89","92","145","145"],"fullExpression":"log.getName()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["96"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.LoggerContext","methodSignature":"getLoggerList()","methodName":"getLoggerList","lineNumber":["87"],"fullExpression":"lc.getLoggerList()","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Level","methodSignature":"toLevel(java.lang.String, ch.qos.logback.classic.Level)","methodName":"toLevel","lineNumber":["54"],"fullExpression":"Level.toLevel(parameters.get(\"loggerLevel\").getFirst(), Level.ERROR)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.logging.handler.LoggerGetLogContentsHandler","methodSignature":"parseLogContents(long, long, ch.qos.logback.classic.Logger, ch.qos.logback.classic.Level, int, int)","methodName":"parseLogContents","lineNumber":["90"],"fullExpression":"this.parseLogContents(startTime, endTime, log, loggerLevel, offset, limit)","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.core.rolling.RollingFileAppender","methodSignature":"getFile()","methodName":"getFile","lineNumber":["111"],"fullExpression":"((RollingFileAppender<ILoggingEvent>) logEvent).getFile()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["96"],"fullExpression":"exchange.getResponseSender().send(mapper.writeValueAsString(logContent))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["65"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getILoggerFactory()","methodName":"getILoggerFactory","lineNumber":["86"],"fullExpression":"LoggerFactory.getILoggerFactory()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getQueryParameters()","methodName":"getQueryParameters","lineNumber":["52"],"fullExpression":"exchange.getQueryParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["30"],"fullExpression":"LoggerFactory.getLogger(LoggerGetLogContentsHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.logging.handler.LoggerGetLogContentsHandler","methodSignature":"getLogEntries(long, long, io.undertow.server.HttpServerExchange, java.lang.String, ch.qos.logback.classic.Level, int, int)","methodName":"getLogEntries","lineNumber":["66"],"fullExpression":"this.getLogEntries(requestTimeRangeStart, requestTimeRangeEnd, exchange, loggerName, loggerLevel, offset, limit)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"writeValueAsString(java.lang.Object)","methodName":"writeValueAsString","lineNumber":["96"],"fullExpression":"mapper.writeValueAsString(logContent)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["68"],"fullExpression":"logger.error(\"Logging is disabled in logging.yml\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"readValue(java.lang.String, java.lang.Class<T>)","methodName":"readValue","lineNumber":["137"],"fullExpression":"mapper.readValue(currentLine, Map.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Logger","methodSignature":"iteratorForAppenders()","methodName":"iteratorForAppenders","lineNumber":["108"],"fullExpression":"log.iteratorForAppenders()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/cache-manager/src/main/java/com/networknt/cache/CacheConfig.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["76"],"fullExpression":"logger.trace(\"caches s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.cache.CacheConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["41","54"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["76"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["17"],"fullExpression":"LoggerFactory.getLogger(CacheConfig.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/api-key/src/test/java/com/networknt/apikey/ApiKeyHandlerTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["38","59"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["58"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["97","132","161","196","235"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["42"],"fullExpression":"Undertow.builder().addHttpListener(17352, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["88","122","123","151","152","186","187","225","226"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["65","66","67"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["99","134","163","198","237"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["88","122","123","151","152","186","187","225","226"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["87","121","150","185","224"],"fullExpression":"new ClientRequest().setPath(\"/test3\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["92","127","156","191","230"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["46"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["64"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["65","66","67"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["95","130","159","194","233"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["87","121","150","185","224"],"fullExpression":"new ClientRequest().setPath(\"/test3\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["31"],"fullExpression":"LoggerFactory.getLogger(ApiKeyHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["42"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.apikey.ApiKeyHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["39"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["100","135","164"],"fullExpression":"Assert.assertEquals(\"OK\", responseBody)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["64","64","64"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/test1\", exchange -> exchange.getResponseSender().send(\"OK\")).add(Methods.GET, \"/test2\", exchange -> exchange.getResponseSender().send(\"OK\")).add(Methods.GET, \"/test3\", exchange -> exchange.getResponseSender().send(\"OK\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/main/java/com/networknt/router/OAuthServerConfig.java":[{"declaringType":"com.networknt.router.OAuthServerConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["95"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.OAuthServerConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["39","53"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.OAuthServerConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["38","52"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["105"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["105"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["15"],"fullExpression":"LoggerFactory.getLogger(OAuthServerConfig.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sanitizer/src/main/java/com/networknt/sanitizer/SanitizerHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["128"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["69","76","77","82","83","91"],"fullExpression":"exchange.getRequestMethod().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"listIterator()","methodName":"listIterator","lineNumber":["84","92"],"fullExpression":"values.listIterator()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["69"],"fullExpression":"exchange.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["71"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"getHeaderName()","methodName":"getHeaderName","lineNumber":["76","77","82","83","91"],"fullExpression":"values.getHeaderName()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/HdrHistogramReservoir.java":[{"declaringType":"io.dropwizard.metrics.HdrHistogramReservoir","methodSignature":"getSnapshot()","methodName":"getSnapshot","lineNumber":["90"],"fullExpression":"getSnapshot()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.Recorder","methodSignature":"recordValue(long)","methodName":"recordValue","lineNumber":["95"],"fullExpression":"recorder.recordValue(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.Recorder","methodSignature":"getIntervalHistogram()","methodName":"getIntervalHistogram","lineNumber":["83"],"fullExpression":"recorder.getIntervalHistogram()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.AbstractHistogram","methodSignature":"getNumberOfSignificantValueDigits()","methodName":"getNumberOfSignificantValueDigits","lineNumber":["84"],"fullExpression":"intervalHistogram.getNumberOfSignificantValueDigits()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.AbstractHistogram","methodSignature":"add(org.HdrHistogram.AbstractHistogram)","methodName":"add","lineNumber":["112"],"fullExpression":"runningTotals.add(intervalHistogram)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.Recorder","methodSignature":"getIntervalHistogram(org.HdrHistogram.Histogram)","methodName":"getIntervalHistogram","lineNumber":["111"],"fullExpression":"recorder.getIntervalHistogram(intervalHistogram)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.Histogram","methodSignature":"copy()","methodName":"copy","lineNumber":["113"],"fullExpression":"runningTotals.copy()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.HdrHistogramReservoir","methodSignature":"updateRunningTotals()","methodName":"updateRunningTotals","lineNumber":["103"],"fullExpression":"updateRunningTotals()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/main/java/com/networknt/router/middleware/ServiceDictConfig.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["83"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.ServiceDictConfig","methodSignature":"setMap()","methodName":"setMap","lineNumber":["43","57"],"fullExpression":"setMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.ServiceDictConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["44","58"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["83"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["21"],"fullExpression":"LoggerFactory.getLogger(ServiceDictConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["89"],"fullExpression":"logger.error(\"IOException:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["102"],"fullExpression":"logger.error(\"mapping is the wrong type. Only JSON string and YAML map are supported.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.ServiceDictConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["114"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/http-entity/src/main/java/com/networknt/http/ResponseEntity.java":[{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"remove(io.undertow.util.HttpString)","methodName":"remove","lineNumber":["306"],"fullExpression":"this.headers.remove(Headers.CONTENT_TYPE)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.ResponseEntity","methodSignature":"ok()","methodName":"ok","lineNumber":["230"],"fullExpression":"ok()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.ResponseEntity.BodyBuilder","methodSignature":"body(T)","methodName":"body","lineNumber":["230"],"fullExpression":"ok().body(body)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/main/java/com/networknt/router/middleware/PathPrefixServiceHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["112"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["65","131"],"fullExpression":"logger.info(\"PathServiceHandler is constructed\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["71","73"],"fullExpression":"logger.debug(\"PathPrefixServiceHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["87","94","98"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"trace","lineNumber":["95"],"fullExpression":"logger.trace(\"serviceEntry found and endpoint is set to = '{}@{}'\", serviceEntry[0], exchange.getRequestMethod().toString().toLowerCase())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["95","96","99","101"],"fullExpression":"exchange.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.PathPrefixServiceHandler","methodSignature":"pathPrefixService(io.undertow.server.HttpServerExchange)","methodName":"pathPrefixService","lineNumber":["72"],"fullExpression":"pathPrefixService(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["131"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestURI()","methodName":"getRequestURI","lineNumber":["78"],"fullExpression":"exchange.getRequestURI()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["95","96","99","101"],"fullExpression":"exchange.getRequestMethod().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["88"],"fullExpression":"logger.trace(\"serviceEntry found and header is set for service_id = '{}'\", serviceEntry[1])","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["60"],"fullExpression":"LoggerFactory.getLogger(PathPrefixServiceHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"peekFirst()","methodName":"peekFirst","lineNumber":["83"],"fullExpression":"serviceIdHeader.peekFirst()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["82","90"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/utility/src/main/java/com/networknt/utility/NetUtils.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["150","154","159","194","342"],"fullExpression":"logger.error(\"Failed to retriving ip address, \" + e.getMessage(), e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["33"],"fullExpression":"LoggerFactory.getLogger(NetUtils.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["103","128"],"fullExpression":"logger.error(\"Failed to retriving local address by hostname:\" + e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/info/src/main/java/com/networknt/info/ServerInfoGetHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["44"],"fullExpression":"logger.debug(\"ServerInfoGetHandler is constructed\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["44"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["53"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["54"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["41"],"fullExpression":"LoggerFactory.getLogger(ServerInfoGetHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["53"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/caffeine-cache/src/main/java/com/networknt/cache/CaffeineCacheManager.java":[{"declaringType":"com.github.benmanes.caffeine.cache.Caffeine","methodSignature":"newBuilder()","methodName":"newBuilder","lineNumber":["19"],"fullExpression":"Caffeine.newBuilder()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.github.benmanes.caffeine.cache.Caffeine","methodSignature":"build()","methodName":"build","lineNumber":["19"],"fullExpression":"Caffeine.newBuilder().maximumSize(maximumSize).expireAfterWrite(expiryInMinutes, TimeUnit.MINUTES).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.github.benmanes.caffeine.cache.Cache","methodSignature":"invalidateAll()","methodName":"invalidateAll","lineNumber":["55"],"fullExpression":"cache.invalidateAll()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.github.benmanes.caffeine.cache.Cache","methodSignature":"estimatedSize()","methodName":"estimatedSize","lineNumber":["64"],"fullExpression":"cache.estimatedSize()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.github.benmanes.caffeine.cache.Caffeine","methodSignature":"expireAfterWrite(long, java.util.concurrent.TimeUnit)","methodName":"expireAfterWrite","lineNumber":["19"],"fullExpression":"Caffeine.newBuilder().maximumSize(maximumSize).expireAfterWrite(expiryInMinutes, TimeUnit.MINUTES)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.github.benmanes.caffeine.cache.Cache","methodSignature":"getIfPresent(K)","methodName":"getIfPresent","lineNumber":["38"],"fullExpression":"cache.getIfPresent(key)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.github.benmanes.caffeine.cache.Caffeine","methodSignature":"maximumSize(long)","methodName":"maximumSize","lineNumber":["19"],"fullExpression":"Caffeine.newBuilder().maximumSize(maximumSize)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.github.benmanes.caffeine.cache.Cache","methodSignature":"put(K, V)","methodName":"put","lineNumber":["30"],"fullExpression":"cache.put(key, value)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.github.benmanes.caffeine.cache.Cache","methodSignature":"invalidate(K)","methodName":"invalidate","lineNumber":["47"],"fullExpression":"cache.invalidate(key)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/dump/src/main/java/com/networknt/dump/DumpHelper.java":[{"declaringType":"com.networknt.dump.DumpHelper","methodSignature":"logResultUsingJson(java.util.Map<java.lang.String, java.lang.Object>, java.util.function.Consumer<java.lang.String>)","methodName":"logResultUsingJson","lineNumber":["42"],"fullExpression":"logResultUsingJson(result, loggerFunc)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.dump.DumpHelper","methodSignature":"getTabBasedOnLevel(int, int)","methodName":"getTabBasedOnLevel","lineNumber":["60","72"],"fullExpression":"getTabBasedOnLevel(finalLevel, indentSize)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Object)","methodName":"warn","lineNumber":["72"],"fullExpression":"logger.warn(getTabBasedOnLevel(level, indentSize) + \"{}\", result)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object)","methodName":"error","lineNumber":["74"],"fullExpression":"logger.error(\"Cannot handle this type: {}\", result.getClass().getTypeName())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"writerWithDefaultPrettyPrinter()","methodName":"writerWithDefaultPrettyPrinter","lineNumber":["88"],"fullExpression":"mapper.writerWithDefaultPrettyPrinter()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectWriter","methodSignature":"writeValueAsString(java.lang.Object)","methodName":"writeValueAsString","lineNumber":["88"],"fullExpression":"mapper.writerWithDefaultPrettyPrinter().writeValueAsString(result)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["90"],"fullExpression":"logger.error(e.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.core.JsonProcessingException","methodSignature":"toString()","methodName":"toString","lineNumber":["90"],"fullExpression":"e.toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.dump.DumpHelper","methodSignature":"_logResult(T, int, int, java.lang.StringBuilder)","methodName":"_logResult","lineNumber":["63","67"],"fullExpression":"_logResult(v, finalLevel, indentSize, info)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sanitizer/src/test/java/com/networknt/sanitizer/EncoderWrapperTest.java":[{"declaringType":"org.owasp.encoder.Encode","methodSignature":"forJavaScriptBlock(java.lang.String)","methodName":"forJavaScriptBlock","lineNumber":["156"],"fullExpression":"Encode.forJavaScriptBlock(s)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"never()","methodName":"never","lineNumber":["86","87","102","104","105","119","121","122","136","138","139"],"fullExpression":"Mockito.never()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.sanitizer.EncoderWrapperTest","methodSignature":"testEncodingFor(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"testEncodingFor","lineNumber":["17","28","39","51","63"],"fullExpression":"testEncodingFor(createMapOfString())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.owasp.encoder.Encode","methodSignature":"forJavaScript(java.lang.String)","methodName":"forJavaScript","lineNumber":["144"],"fullExpression":"Encode.forJavaScript(s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.sanitizer.EncoderWrapperTest","methodSignature":"createMapOfMap()","methodName":"createMapOfMap","lineNumber":["28"],"fullExpression":"createMapOfMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.ArgumentMatchers","methodSignature":"any()","methodName":"any","lineNumber":["88","172"],"fullExpression":"Mockito.any()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"times(int)","methodName":"times","lineNumber":["88"],"fullExpression":"Mockito.times(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.sanitizer.EncoderWrapperTest","methodSignature":"createMapOfList()","methodName":"createMapOfList","lineNumber":["39"],"fullExpression":"createMapOfList()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.owasp.encoder.Encoders","methodSignature":"forName(java.lang.String)","methodName":"forName","lineNumber":["80","98","115","132","167"],"fullExpression":"Encoders.forName(\"java\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.owasp.encoder.Encode","methodSignature":"forJavaScriptSource(java.lang.String)","methodName":"forJavaScriptSource","lineNumber":["162"],"fullExpression":"Encode.forJavaScriptSource(s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.sanitizer.EncoderWrapperTest","methodSignature":"createMapOfString()","methodName":"createMapOfString","lineNumber":["17","33","57"],"fullExpression":"createMapOfString()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.sanitizer.EncoderWrapperTest","methodSignature":"createMapOfListOfList()","methodName":"createMapOfListOfList","lineNumber":["63"],"fullExpression":"createMapOfListOfList()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.sanitizer.EncoderWrapperTest","methodSignature":"createMapOfListOfMap()","methodName":"createMapOfListOfMap","lineNumber":["51"],"fullExpression":"createMapOfListOfMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.owasp.encoder.Encode","methodSignature":"forJavaScriptAttribute(java.lang.String)","methodName":"forJavaScriptAttribute","lineNumber":["150"],"fullExpression":"Encode.forJavaScriptAttribute(s)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/http-url/src/main/java/com/networknt/url/QueryString.java":[{"declaringType":"com.networknt.url.QueryString","methodSignature":"addString(java.lang.String, java.lang.String...)","methodName":"addString","lineNumber":["116"],"fullExpression":"addString(URLDecoder.decode(key, this.encoding), URLDecoder.decode(value, this.encoding))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.QueryString","methodSignature":"applyOnURL(java.lang.String)","methodName":"applyOnURL","lineNumber":["187"],"fullExpression":"applyOnURL(url.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.QueryString","methodSignature":"toString()","methodName":"toString","lineNumber":["174"],"fullExpression":"toString()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/influxdb/data/InfluxDbWriteObject.java":[{"declaringType":"io.dropwizard.metrics.influxdb.data.InfluxDbWriteObject","methodSignature":"toTimePrecision(java.util.concurrent.TimeUnit)","methodName":"toTimePrecision","lineNumber":["35"],"fullExpression":"toTimePrecision(timeUnit)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ip-whitelist/src/test/java/com/networknt/whitelist/WhitelistHandlerDefaultAllowTrueTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["175","213"],"fullExpression":"Assert.assertTrue(body.contains(\"ERR10049\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistHandlerDefaultAllowTrueTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["62"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["61","85"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["68"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["84"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["133","171","209","246"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["68"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["124","162","200","237"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["92","95","98","101"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["135","173","211","248"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["117","155","193","230"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["124","162","200","237"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["123","161","199","236"],"fullExpression":"new ClientRequest().setPath(\"/health/com.networknt.petstore-1.0.0\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["128","166","204","241"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["72"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["90"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["92","95","98","101"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["131","169","207","244"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["68"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["123","161","199","236"],"fullExpression":"new ClientRequest().setPath(\"/health/com.networknt.petstore-1.0.0\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["54"],"fullExpression":"LoggerFactory.getLogger(WhitelistHandlerDefaultAllowTrueTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["68"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["137","250"],"fullExpression":"Assert.assertEquals(\"OK\", body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["90","90","90","90"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/data\", exchange -> {\n    exchange.getResponseSender().send(\"OK\");\n}).add(Methods.GET, \"/default\", exchange -> {\n    exchange.getResponseSender().send(\"OK\");\n}).add(Methods.GET, \"/data/extra\", exchange -> {\n    exchange.getResponseSender().send(\"OK\");\n}).add(Methods.GET, \"/health/com.networknt.petstore-1.0.0\", exchange -> {\n    exchange.getResponseSender().send(\"OK\");\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/ssl/Light4jALPNClientSelector.java":[{"declaringType":"org.xnio.ChannelListener.Setter","methodSignature":"set(org.xnio.ChannelListener<? super T>)","methodName":"set","lineNumber":["86","96","108"],"fullExpression":"sslConnection.getHandshakeSetter().set(new ChannelListener<SslConnection>() {\n\n    @Override\n    public void handleEvent(SslConnection channel) {\n        if (handshakeDone.get()) {\n            return;\n        }\n        handshakeDone.set(true);\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.ConduitStreamSourceChannel","methodSignature":"resumeReads()","methodName":"resumeReads","lineNumber":["165"],"fullExpression":"sslConnection.getSourceChannel().resumeReads()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientCallback","methodSignature":"failed(java.io.IOException)","methodName":"failed","lineNumber":["125","137","159","167","169"],"fullExpression":"failedListener.failed(new ClosedChannelException())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.ConduitStreamSourceChannel","methodSignature":"getReadSetter()","methodName":"getReadSetter","lineNumber":["108"],"fullExpression":"sslConnection.getSourceChannel().getReadSetter()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ChannelListener","methodSignature":"handleEvent(T)","methodName":"handleEvent","lineNumber":["71","132","145","152","157"],"fullExpression":"fallback.handleEvent(sslConnection)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ssl.SslConnection","methodSignature":"startHandshake()","methodName":"startHandshake","lineNumber":["106"],"fullExpression":"sslConnection.startHandshake()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.protocols.ssl.SslConduit","methodSignature":"getSSLEngine()","methodName":"getSSLEngine","lineNumber":["69","80"],"fullExpression":"conduit.getSSLEngine()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.ConduitStreamSourceChannel","methodSignature":"setConduit(org.xnio.conduits.StreamSourceConduit)","methodName":"setConduit","lineNumber":["123"],"fullExpression":"sslConnection.getSourceChannel().setConduit(pb)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ALPNClientSelector.ALPNProtocol","methodSignature":"getSelected()","methodName":"getSelected","lineNumber":["157"],"fullExpression":"details.getSelected()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.protocols.ssl.SslConduit","methodSignature":"setSslEngine(javax.net.ssl.SSLEngine)","methodName":"setSslEngine","lineNumber":["81"],"fullExpression":"conduit.setSslEngine(sslEngine)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.protocols.alpn.ALPNProvider","methodSignature":"getSelectedProtocol(javax.net.ssl.SSLEngine)","methodName":"getSelectedProtocol","lineNumber":["112","127"],"fullExpression":"provider.getSelectedProtocol(sslEngine)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.protocols.alpn.ALPNManager","methodSignature":"getProvider(javax.net.ssl.SSLEngine)","methodName":"getProvider","lineNumber":["69"],"fullExpression":"ALPNManager.INSTANCE.getProvider(conduit.getSSLEngine())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.StreamConnection","methodSignature":"getSourceChannel()","methodName":"getSourceChannel","lineNumber":["108","121","123","131","144","151","156","165"],"fullExpression":"sslConnection.getSourceChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.ConduitStreamSourceChannel","methodSignature":"getConduit()","methodName":"getConduit","lineNumber":["121"],"fullExpression":"sslConnection.getSourceChannel().getConduit()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.ssl.Light4jALPNClientSelector.Anonymous-85317c1a-804a-46fc-8624-e9dcb49dca17","methodSignature":"handleSelected(java.lang.String)","methodName":"handleSelected","lineNumber":["114","129"],"fullExpression":"handleSelected(selectedProtocol)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.PushBackStreamSourceConduit","methodSignature":"pushBack(org.xnio.Pooled<java.nio.ByteBuffer>)","methodName":"pushBack","lineNumber":["122"],"fullExpression":"pb.pushBack(new ImmediatePooled<>(buf))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ALPNClientSelector.ALPNProtocol","methodSignature":"getProtocol()","methodName":"getProtocol","lineNumber":["77","78"],"fullExpression":"details[i].getProtocol()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.protocols.alpn.ALPNProvider","methodSignature":"setProtocols(javax.net.ssl.SSLEngine, java.lang.String[])","methodName":"setProtocols","lineNumber":["80"],"fullExpression":"provider.setProtocols(conduit.getSSLEngine(), protocols)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ssl.SslConnection","methodSignature":"getHandshakeSetter()","methodName":"getHandshakeSetter","lineNumber":["86"],"fullExpression":"sslConnection.getHandshakeSetter()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.protocols.ssl.UndertowXnioSsl","methodSignature":"getSslConduit(org.xnio.ssl.SslConnection)","methodName":"getSslConduit","lineNumber":["67"],"fullExpression":"UndertowXnioSsl.getSslConduit(sslConnection)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ssl.SslConnection","methodSignature":"getCloseSetter()","methodName":"getCloseSetter","lineNumber":["96"],"fullExpression":"sslConnection.getCloseSetter()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.conduits.ConduitStreamSourceChannel","methodSignature":"suspendReads()","methodName":"suspendReads","lineNumber":["131","144","151","156"],"fullExpression":"sslConnection.getSourceChannel().suspendReads()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/test/java/com/networknt/config/TlsUtilTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["21","43","59","65"],"fullExpression":"Assert.assertNotNull(keyStore)","currentLayer":0,"declarationInfo":null},{"declaringType":"junit.framework.TestCase","methodSignature":"fail()","methodName":"fail","lineNumber":["28","34","50"],"fullExpression":"fail()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["30","36","52"],"fullExpression":"Assert.assertEquals(e.getMessage(), \"Unable to load stream for keystore \" + INVALID_KEYSTORE_NAME)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/HistogramSnapshot.java":[{"declaringType":"org.HdrHistogram.HistogramIterationValue","methodSignature":"getCountAddedInThisIterationStep()","methodName":"getCountAddedInThisIterationStep","lineNumber":["76","122"],"fullExpression":"value.getCountAddedInThisIterationStep()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.AbstractHistogram","methodSignature":"getValueAtPercentile(double)","methodName":"getValueAtPercentile","lineNumber":["65"],"fullExpression":"histogram.getValueAtPercentile(quantile * 100.0)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.AbstractHistogram","methodSignature":"getMean()","methodName":"getMean","lineNumber":["103"],"fullExpression":"histogram.getMean()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.Histogram","methodSignature":"getTotalCount()","methodName":"getTotalCount","lineNumber":["70","85","93"],"fullExpression":"histogram.getTotalCount()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.AbstractHistogram","methodSignature":"recordedValues()","methodName":"recordedValues","lineNumber":["73","121"],"fullExpression":"histogram.recordedValues()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.AbstractHistogram","methodSignature":"getMinValue()","methodName":"getMinValue","lineNumber":["108"],"fullExpression":"histogram.getMinValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["55"],"fullExpression":"LoggerFactory.getLogger(HistogramSnapshot.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.HistogramIterationValue","methodSignature":"getValueIteratedTo()","methodName":"getValueIteratedTo","lineNumber":["74","123"],"fullExpression":"value.getValueIteratedTo()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["128"],"fullExpression":"logger.error(\"Exception:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.AbstractHistogram","methodSignature":"getMaxValue()","methodName":"getMaxValue","lineNumber":["98"],"fullExpression":"histogram.getMaxValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.AbstractHistogram","methodSignature":"getStdDeviation()","methodName":"getStdDeviation","lineNumber":["113"],"fullExpression":"histogram.getStdDeviation()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/deref-token/src/main/java/com/networknt/deref/DerefMiddlewareHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["56","116"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["97"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["56","116"],"fullExpression":"logger.info(\"DerefMiddlewareHandler is constructed.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["44"],"fullExpression":"LoggerFactory.getLogger(DerefMiddlewareHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["83"],"fullExpression":"exchange.getRequestHeaders().put(Headers.AUTHORIZATION, \"Bearer \" + response)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["62","83"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["62"],"fullExpression":"exchange.getRequestHeaders().getFirst(Headers.AUTHORIZATION)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/service/src/main/java/com/networknt/service/SingletonServiceFactory.java":[{"declaringType":"com.networknt.service.SingletonServiceFactory","methodSignature":"handleSingleImpl(java.util.List<java.lang.String>, java.util.List<java.lang.Object>)","methodName":"handleSingleImpl","lineNumber":["227"],"fullExpression":"handleSingleImpl(interfaceClasses, value)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.service.SingletonServiceFactory","methodSignature":"handleSingletonList(java.lang.String, java.util.List<java.lang.Object>)","methodName":"handleSingletonList","lineNumber":["57"],"fullExpression":"handleSingletonList(key, (List) value)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["43","97"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.service.SingletonServiceFactory","methodSignature":"handleMultipleImpl(java.util.List<java.lang.String>, java.util.List<java.lang.Object>)","methodName":"handleMultipleImpl","lineNumber":["229"],"fullExpression":"handleMultipleImpl(interfaceClasses, value)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.service.SingletonServiceFactory","methodSignature":"handleValue(java.lang.String)","methodName":"handleValue","lineNumber":["185"],"fullExpression":"handleValue(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["37"],"fullExpression":"LoggerFactory.getLogger(SingletonServiceFactory.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.service.SingletonServiceFactory","methodSignature":"construct(java.lang.Class)","methodName":"construct","lineNumber":["78","110","161","201"],"fullExpression":"construct(implClass)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["68"],"fullExpression":"logger.error(\"Exception:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.service.SingletonServiceFactory","methodSignature":"handleSingletonClass(java.lang.String, java.lang.String)","methodName":"handleSingletonClass","lineNumber":["59"],"fullExpression":"handleSingletonClass(key, (String) value)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.service.SingletonServiceFactory","methodSignature":"constructAndAddToServiceMap(java.util.List<java.lang.String>, java.util.Map)","methodName":"constructAndAddToServiceMap","lineNumber":["88","165"],"fullExpression":"constructAndAddToServiceMap(interfaceClasses, map)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.service.SingletonServiceFactory","methodSignature":"getBean(java.lang.Class<T>)","methodName":"getBean","lineNumber":["247"],"fullExpression":"getBean(pType[j])","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/rest/RestClientTemplateTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["130","144"],"fullExpression":"assertNotNull(str)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["136"],"fullExpression":"assertTrue(pet.getId() == 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["70"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(\"/message\", exchange -> {\n    exchange.setStatusCode(StatusCodes.OK);\n    exchange.getResponseHeaders().put(Headers.CONTENT_LENGTH, \"Hello\".length() + \"\");\n    final Sender sender = exchange.getResponseSender();\n    sender.send(\"Hello\");\n}).addExactPath(\"/api\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(\"OK\"));\n}).addExactPath(\"/v1/pets/1\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(pet));\n}).addExactPath(\"post\", exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(message));\n        } catch (Exception e) {\n        }\n    }\n}))).setWorkerThreads(200).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["120"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["61"],"fullExpression":"builder.addHttpListener(9990, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["80","85","90"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["81","86","91","98"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["63","70","70","70"],"fullExpression":"builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["80","85","90"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_LENGTH, \"Hello\".length() + \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpsListener(int, java.lang.String, javax.net.ssl.SSLContext)","methodName":"addHttpsListener","lineNumber":["60"],"fullExpression":"builder.addHttpsListener(9991, \"localhost\", sslContext)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.PathHandler","methodSignature":"addExactPath(java.lang.String, io.undertow.server.HttpHandler)","methodName":"addExactPath","lineNumber":["77","77","77","77"],"fullExpression":"new PathHandler().addExactPath(\"/message\", exchange -> {\n    exchange.setStatusCode(StatusCodes.OK);\n    exchange.getResponseHeaders().put(Headers.CONTENT_LENGTH, \"Hello\".length() + \"\");\n    final Sender sender = exchange.getResponseSender();\n    sender.send(\"Hello\");\n}).addExactPath(\"/api\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(\"OK\"));\n}).addExactPath(\"/v1/pets/1\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(pet));\n}).addExactPath(\"post\", exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(message));\n        } catch (Exception e) {\n        }\n    }\n}))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["107"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["82"],"fullExpression":"sender.send(\"Hello\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["160"],"fullExpression":"IoUtils.safeClose(stream)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.rest.RestClientTemplateTest","methodSignature":"loadKeyStore(java.lang.String)","methodName":"loadKeyStore","lineNumber":["59","59"],"fullExpression":"loadKeyStore(SERVER_KEY_STORE)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setIoThreads(int)","methodName":"setIoThreads","lineNumber":["70"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["70"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(\"/message\", exchange -> {\n    exchange.setStatusCode(StatusCodes.OK);\n    exchange.getResponseHeaders().put(Headers.CONTENT_LENGTH, \"Hello\".length() + \"\");\n    final Sender sender = exchange.getResponseSender();\n    sender.send(\"Hello\");\n}).addExactPath(\"/api\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(\"OK\"));\n}).addExactPath(\"/v1/pets/1\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(pet));\n}).addExactPath(\"post\", exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(message));\n        } catch (Exception e) {\n        }\n    }\n})))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["36"],"fullExpression":"LoggerFactory.getLogger(RestClientTemplateTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setStatusCode(int)","methodName":"setStatusCode","lineNumber":["79"],"fullExpression":"exchange.setStatusCode(StatusCodes.OK)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["121"],"fullExpression":"logger.info(\"The router server1 is stopped.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Xnio","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["51"],"fullExpression":"Xnio.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setWorkerThreads(int)","methodName":"setWorkerThreads","lineNumber":["70"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(\"/message\", exchange -> {\n    exchange.setStatusCode(StatusCodes.OK);\n    exchange.getResponseHeaders().put(Headers.CONTENT_LENGTH, \"Hello\".length() + \"\");\n    final Sender sender = exchange.getResponseSender();\n    sender.send(\"Hello\");\n}).addExactPath(\"/api\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(\"OK\"));\n}).addExactPath(\"/v1/pets/1\", (exchange) -> {\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(pet));\n}).addExactPath(\"post\", exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(message));\n        } catch (Exception e) {\n        }\n    }\n}))).setWorkerThreads(200)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.rest.RestClientTemplateTest","methodSignature":"createSSLContext(java.security.KeyStore, java.security.KeyStore, boolean)","methodName":"createSSLContext","lineNumber":["59"],"fullExpression":"createSSLContext(loadKeyStore(SERVER_KEY_STORE), loadKeyStore(SERVER_TRUST_STORE), false)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setBufferSize(int)","methodName":"setBufferSize","lineNumber":["70"],"fullExpression":"builder.setBufferSize(1024 * 16)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setSocketOption(org.xnio.Option<T>, T)","methodName":"setSocketOption","lineNumber":["70"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["57"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestReceiver()","methodName":"getRequestReceiver","lineNumber":["94"],"fullExpression":"exchange.getRequestReceiver()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Receiver","methodSignature":"receiveFullString(io.undertow.io.Receiver.FullStringCallback)","methodName":"receiveFullString","lineNumber":["94"],"fullExpression":"exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(message));\n        } catch (Exception e) {\n        }\n    }\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/Meter.java":[{"declaringType":"io.dropwizard.metrics.Meter","methodSignature":"getMeanRate()","methodName":"getMeanRate","lineNumber":["131"],"fullExpression":"this.getMeanRate()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Meter","methodSignature":"getCount()","methodName":"getCount","lineNumber":["115","119"],"fullExpression":"getCount()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Meter","methodSignature":"mark(long)","methodName":"mark","lineNumber":["63"],"fullExpression":"mark(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.Meter","methodSignature":"tickIfNecessary()","methodName":"tickIfNecessary","lineNumber":["72","103","109","125"],"fullExpression":"tickIfNecessary()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/security/src/test/java/com/networknt/security/JwtVerifierMultipleJwkTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["81","118"],"fullExpression":"Assert.assertTrue(hasScopeToken)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["342","349","366","373","390","397"],"fullExpression":"Assert.assertNotNull(jwt)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["70","107","144","188"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors()).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(API_PETSTORE, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    String requestPath = exchange.getRequestPath();\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0).substring(7);\n    // verify the jwt token with JWK.\n    JwtVerifier jwtVerifier = new JwtVerifier(securityConfig);\n    JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, null, requestPath, null);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"Petstore OK!\"))));\n})).setWorkerThreads(20).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["233","246","259","272"],"fullExpression":"server1.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["86","123","153","165","197","209"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["87","124","154","166","198","210"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["68","70","70","70","105","107","107","107","142","144","144","144","186","188","188","188"],"fullExpression":"builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["286","312"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["86","123","153","165","197","209"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpsListener(int, java.lang.String, javax.net.ssl.SSLContext)","methodName":"addHttpsListener","lineNumber":["67","104","141","185"],"fullExpression":"builder.addHttpsListener(7771, \"localhost\", sslContext)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.PathHandler","methodSignature":"addExactPath(java.lang.String, io.undertow.server.HttpHandler)","methodName":"addExactPath","lineNumber":["77","114","151","151","195","195"],"fullExpression":"new PathHandler().addExactPath(API_PETSTORE, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    String requestPath = exchange.getRequestPath();\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0).substring(7);\n    // verify the jwt token with JWK.\n    JwtVerifier jwtVerifier = new JwtVerifier(securityConfig);\n    JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, null, requestPath, null);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"Petstore OK!\"))));\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["80","117"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["95","132","176","220"],"fullExpression":"server1.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setIoThreads(int)","methodName":"setIoThreads","lineNumber":["70","107","144","188"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["70","107","144","188"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors()).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(API_PETSTORE, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    String requestPath = exchange.getRequestPath();\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0).substring(7);\n    // verify the jwt token with JWK.\n    JwtVerifier jwtVerifier = new JwtVerifier(securityConfig);\n    JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, null, requestPath, null);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"Petstore OK!\"))));\n}))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["290","316"],"fullExpression":"new ClientRequest().setPath(API_PETSTORE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["33"],"fullExpression":"LoggerFactory.getLogger(JwtVerifierMultipleJwkTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"shutdown()","methodName":"shutdown","lineNumber":["227"],"fullExpression":"worker.shutdown()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["290","316"],"fullExpression":"new ClientRequest().setPath(API_PETSTORE).setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Xnio","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["57"],"fullExpression":"Xnio.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setWorkerThreads(int)","methodName":"setWorkerThreads","lineNumber":["70","107","144","188"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors()).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setHandler(new PathHandler().addExactPath(API_PETSTORE, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    String requestPath = exchange.getRequestPath();\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0).substring(7);\n    // verify the jwt token with JWK.\n    JwtVerifier jwtVerifier = new JwtVerifier(securityConfig);\n    JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, null, requestPath, null);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"Petstore OK!\"))));\n})).setWorkerThreads(20)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setBufferSize(int)","methodName":"setBufferSize","lineNumber":["70","107","144","188"],"fullExpression":"builder.setBufferSize(1024 * 16)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifierMultipleJwkTest","methodSignature":"callPetstoreApiAsync()","methodName":"callPetstoreApiAsync","lineNumber":["306"],"fullExpression":"callPetstoreApiAsync()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.security.JwtVerifierMultipleJwkTest","methodSignature":"callMarketApiAsync()","methodName":"callMarketApiAsync","lineNumber":["334"],"fullExpression":"callMarketApiAsync()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setSocketOption(org.xnio.Option<T>, T)","methodName":"setSocketOption","lineNumber":["70","107","144","188"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors()).setSocketOption(Options.BACKLOG, 10000)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["63","100","137","181"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["79","82","116","119"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestReceiver()","methodName":"getRequestReceiver","lineNumber":["156","200"],"fullExpression":"exchange.getRequestReceiver()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Receiver","methodSignature":"receiveFullString(io.undertow.io.Receiver.FullStringCallback)","methodName":"receiveFullString","lineNumber":["156","200"],"fullExpression":"exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5, \"7pGHLozGRXqv2g47T1HQag\");\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/test/java/com/networknt/proxy/salesforce/SalesforceConfigTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["16","17","18","19","20"],"fullExpression":"Assert.assertTrue(pathPrefixAuthList.get(0).getAuthAudience() != null)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/test/java/com/networknt/config/PluggableConfigLoaderTest.java":[{"declaringType":"junit.framework.TestCase","methodSignature":"setUp()","methodName":"setUp","lineNumber":["24"],"fullExpression":"super.setUp()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.PluggableConfigLoaderTest","methodSignature":"writeConfigFile(java.util.Map<java.lang.String, java.lang.Object>, java.lang.String)","methodName":"writeConfigFile","lineNumber":["44","64","84","104"],"fullExpression":"writeConfigFile(map, homeDir)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"fail()","methodName":"fail","lineNumber":["114"],"fullExpression":"Assert.fail()","currentLayer":0,"declarationInfo":null},{"declaringType":"junit.framework.TestCase","methodSignature":"tearDown()","methodName":"tearDown","lineNumber":["30"],"fullExpression":"super.tearDown()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["53","73"],"fullExpression":"Assert.assertEquals(mapConfig.get(\"ttlCheck\"), true)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"writeValue(java.io.File, java.lang.Object)","methodName":"writeValue","lineNumber":["121","124"],"fullExpression":"mapper.writeValue(new File(path), configMap)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/ExponentiallyDecayingReservoirTest.java":[{"declaringType":"org.assertj.core.api.AbstractDoubleAssert","methodSignature":"isLessThan(double)","methodName":"isLessThan","lineNumber":["205"],"fullExpression":"assertThat(i).isLessThan(max)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(double)","methodName":"assertThat","lineNumber":["205"],"fullExpression":"assertThat(i)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ip-whitelist/src/main/java/com/networknt/whitelist/WhitelistConfig.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["147"],"fullExpression":"logger.trace(\"paths = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Bits","methodSignature":"intBitMask(int, int)","methodName":"intBitMask","lineNumber":["214","232"],"fullExpression":"Bits.intBitMask(8 - maskLen, 7)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistConfig","methodSignature":"setPaths(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"setPaths","lineNumber":["163"],"fullExpression":"setPaths(paths)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistConfig","methodSignature":"addIpV6SlashPrefix(java.lang.String, java.lang.String, boolean)","methodName":"addIpV6SlashPrefix","lineNumber":["188"],"fullExpression":"addIpV6SlashPrefix(pathPrefix, peer, deny)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["147"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistConfig","methodSignature":"addIpV4ExactMatch(java.lang.String, java.lang.String, boolean)","methodName":"addIpV4ExactMatch","lineNumber":["178"],"fullExpression":"addIpV4ExactMatch(pathPrefix, peer, deny)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistConfig","methodSignature":"addIpV4WildcardMatch(java.lang.String, java.lang.String, boolean)","methodName":"addIpV4WildcardMatch","lineNumber":["180"],"fullExpression":"addIpV4WildcardMatch(pathPrefix, peer, deny)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistConfig","methodSignature":"setConfigMap()","methodName":"setConfigMap","lineNumber":["91","104"],"fullExpression":"setConfigMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistConfig","methodSignature":"addIpV4SlashPrefix(java.lang.String, java.lang.String, boolean)","methodName":"addIpV4SlashPrefix","lineNumber":["182"],"fullExpression":"addIpV4SlashPrefix(pathPrefix, peer, deny)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistConfig","methodSignature":"addRule(java.lang.String, java.lang.String, boolean)","methodName":"addRule","lineNumber":["171"],"fullExpression":"addRule(entry.getKey(), peer, !this.defaultAllow)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["35"],"fullExpression":"LoggerFactory.getLogger(WhitelistConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["90","103"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistConfig","methodSignature":"addIpV6WildcardMatch(java.lang.String, java.lang.String, boolean)","methodName":"addIpV6WildcardMatch","lineNumber":["186"],"fullExpression":"addIpV6WildcardMatch(pathPrefix, peer, deny)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.whitelist.WhitelistConfig","methodSignature":"addIpV6ExactMatch(java.lang.String, java.lang.String, boolean)","methodName":"addIpV6ExactMatch","lineNumber":["184"],"fullExpression":"addIpV6ExactMatch(pathPrefix, peer, deny)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/http-entity/src/main/java/com/networknt/http/MimeTypeUtils.java":[{"declaringType":"com.networknt.http.MimeTypeUtils","methodSignature":"initRandom()","methodName":"initRandom","lineNumber":["381"],"fullExpression":"initRandom()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeTypeUtils","methodSignature":"generateMultipartBoundary()","methodName":"generateMultipartBoundary","lineNumber":["394"],"fullExpression":"generateMultipartBoundary()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeTypeUtils","methodSignature":"parseMimeTypeInternal(java.lang.String)","methodName":"parseMimeTypeInternal","lineNumber":["185"],"fullExpression":"parseMimeTypeInternal(mimeType)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.MimeTypeUtils","methodSignature":"tokenize(java.lang.String)","methodName":"tokenize","lineNumber":["267"],"fullExpression":"tokenize(mimeTypes)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/common/src/main/java/com/networknt/common/DecryptUtil.java":[{"declaringType":"com.networknt.common.DecryptUtil","methodSignature":"decryptNode(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"decryptNode","lineNumber":["27","38","50"],"fullExpression":"decryptNode(map)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.common.DecryptUtil","methodSignature":"decryptList(java.util.List)","methodName":"decryptList","lineNumber":["40","52"],"fullExpression":"decryptList((List) value)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.common.DecryptUtil","methodSignature":"decryptObject(java.lang.Object)","methodName":"decryptObject","lineNumber":["36","48"],"fullExpression":"decryptObject(value)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/balance/src/main/java/com/networknt/balance/ConsistentHashLoadBalance.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["49"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["49"],"fullExpression":"logger.info(\"A ConsistentHashLoadBalance instance is started\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["40"],"fullExpression":"LoggerFactory.getLogger(ConsistentHashLoadBalance.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.balance.ConsistentHashLoadBalance","methodSignature":"getHash(java.lang.String)","methodName":"getHash","lineNumber":["65"],"fullExpression":"getHash(requestKey)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/test/java/com/networknt/config/ConfigDefaultTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["57","215"],"fullExpression":"Assert.assertNotNull(content)","currentLayer":0,"declarationInfo":null},{"declaringType":"junit.framework.TestCase","methodSignature":"setUp()","methodName":"setUp","lineNumber":["42"],"fullExpression":"super.setUp()","currentLayer":0,"declarationInfo":null},{"declaringType":"junit.framework.TestCase","methodSignature":"tearDown()","methodName":"tearDown","lineNumber":["51"],"fullExpression":"super.tearDown()","currentLayer":0,"declarationInfo":null},{"declaringType":"junit.framework.TestCase","methodSignature":"fail()","methodName":"fail","lineNumber":["209"],"fullExpression":"fail()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["64","67","70","72","74","76","78","106","109","112","114","116","118","120","148","151","154","156","158","160","162","189","195","202"],"fullExpression":"Assert.assertEquals(\"default config\", configMap.get(\"value\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/body/src/main/java/com/networknt/body/BodyHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["199"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["72","82","218"],"fullExpression":"logger.info(\"BodyHandler is loaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["97","118","135","139"],"fullExpression":"logger.debug(\"BodyHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.body.BodyHandler","methodSignature":"attachJsonBody(io.undertow.server.HttpServerExchange, java.lang.String)","methodName":"attachJsonBody","lineNumber":["115"],"fullExpression":"attachJsonBody(exchange, unparsedRequestBody)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"startBlocking()","methodName":"startBlocking","lineNumber":["105"],"fullExpression":"exchange.startBlocking()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.form.FormDataParser","methodSignature":"parseBlocking()","methodName":"parseBlocking","lineNumber":["154"],"fullExpression":"parser.parseBlocking()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getInputStream()","methodName":"getInputStream","lineNumber":["108","122","129","158"],"fullExpression":"exchange.getInputStream()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["133"],"fullExpression":"logger.error(\"IOException: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["99"],"fullExpression":"exchange.getRequestHeaders().getFirst(Headers.CONTENT_TYPE)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.body.BodyHandler","methodSignature":"attachFormDataBody(io.undertow.server.HttpServerExchange)","methodName":"attachFormDataBody","lineNumber":["127"],"fullExpression":"attachFormDataBody(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["72","82","218"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.form.FormParserFactory.Builder","methodSignature":"build()","methodName":"build","lineNumber":["151"],"fullExpression":"FormParserFactory.builder().build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["97","118","135","139"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.form.FormParserFactory","methodSignature":"builder()","methodName":"builder","lineNumber":["151"],"fullExpression":"FormParserFactory.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["59"],"fullExpression":"LoggerFactory.getLogger(BodyHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["99"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.form.FormParserFactory","methodSignature":"createParser(io.undertow.server.HttpServerExchange)","methodName":"createParser","lineNumber":["152"],"fullExpression":"formParserFactory.createParser(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isInIoThread()","methodName":"isInIoThread","lineNumber":["101"],"fullExpression":"exchange.isInIoThread()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/main/java/com/networknt/router/middleware/TokenConfig.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["80"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.TokenConfig","methodSignature":"getMappedConfig()","methodName":"getMappedConfig","lineNumber":["53"],"fullExpression":"getMappedConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.TokenConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["36","50"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["80"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["17"],"fullExpression":"LoggerFactory.getLogger(TokenConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.TokenConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["35","49"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/simplepool/SimpleConnectionHolder.java":[{"declaringType":"com.networknt.client.simplepool.SimpleConnectionHolder","methodSignature":"borrowable(long)","methodName":"borrowable","lineNumber":["217","402"],"fullExpression":"borrowable(now)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.SimpleConnectionHolder","methodSignature":"closed()","methodName":"closed","lineNumber":["234","270","400"],"fullExpression":"closed()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.SimpleConnectionHolder","methodSignature":"borrowed()","methodName":"borrowed","lineNumber":["278","401"],"fullExpression":"borrowed()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.SimpleConnectionHolder","methodSignature":"connection()","methodName":"connection","lineNumber":["181"],"fullExpression":"connection()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.SimpleConnectionHolder","methodSignature":"expired(long)","methodName":"expired","lineNumber":["278","337","402","403"],"fullExpression":"expired(now)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.SimpleConnectionHolder","methodSignature":"maxBorrowed()","methodName":"maxBorrowed","lineNumber":["337"],"fullExpression":"maxBorrowed()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.SimpleConnectionHolder","methodSignature":"state(long)","methodName":"state","lineNumber":["372"],"fullExpression":"state(now)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["94"],"fullExpression":"LoggerFactory.getLogger(SimpleConnectionHolder.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server-config/src/main/java/com/networknt/server/ServerOption.java":[{"declaringType":"com.networknt.server.ServerOption","methodSignature":"values()","methodName":"values","lineNumber":["46"],"fullExpression":"ServerOption.values()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.ServerOption","methodSignature":"value()","methodName":"value","lineNumber":["47","49"],"fullExpression":"serverOption.value()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/email-sender/src/main/java/com/networknt/email/EmailSender.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["92","153"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["92","153"],"fullExpression":"logger.info(\"An email has been sent to \" + to + \" with subject \" + subject)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["45"],"fullExpression":"LoggerFactory.getLogger(EmailSender.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/response-transformer/src/main/java/com/networknt/restrans/ResponseTransformerConfig.java":[{"declaringType":"com.networknt.restrans.ResponseTransformerConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["36","50"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["96"],"fullExpression":"logger.trace(\"s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.restrans.ResponseTransformerConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["35","49"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["96"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["16"],"fullExpression":"LoggerFactory.getLogger(ResponseTransformerConfig.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/ScheduledReporter.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String)","methodName":"warn","lineNumber":["150"],"fullExpression":"LOG.warn(getClass().getSimpleName() + \": ScheduledExecutorService did not terminate\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["40"],"fullExpression":"LoggerFactory.getLogger(ScheduledReporter.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"error","lineNumber":["132"],"fullExpression":"LOG.error(\"RuntimeException thrown from {}#report. Exception was suppressed.\", ScheduledReporter.this.getClass().getSimpleName(), ex)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.ScheduledReporter","methodSignature":"stop()","methodName":"stop","lineNumber":["166"],"fullExpression":"stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.ScheduledReporter","methodSignature":"calculateRateUnit(java.util.concurrent.TimeUnit)","methodName":"calculateRateUnit","lineNumber":["116"],"fullExpression":"calculateRateUnit(rateUnit)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/JvmAttributeGaugeSetTest.java":[{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodSignature":"thenReturn(T)","methodName":"thenReturn","lineNumber":["38","40","41","42","43","44"],"fullExpression":"when(runtime.getName()).thenReturn(\"9928@example.com\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"when(T)","methodName":"when","lineNumber":["38","40","41","42","43","44"],"fullExpression":"when(runtime.getName())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Long)","methodName":"assertThat","lineNumber":["84"],"fullExpression":"assertThat((Long) gauge.getValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isPositive()","methodName":"isPositive","lineNumber":["84"],"fullExpression":"assertThat((Long) gauge.getValue()).isPositive()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"mock(java.lang.Class<T>)","methodName":"mock","lineNumber":["33"],"fullExpression":"mock(RuntimeMXBean.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/http-url/src/test/java/com/networknt/url/URLNormalizerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["73"],"fullExpression":"assertTrue(res, t.equals(res) || t1.equals(res))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.url.URLNormalizerTest","methodSignature":"n(java.lang.String)","methodName":"n","lineNumber":["80","84","88","92","96","100","104","108","116","123","129","136","143","150","162","169","172","175","178","181","184","187","194","197","200","203","206","210","217","220","223","226","229","232","235","238","245","248","251","258","261","265","307","314","317","320","323","326","329","336","339","348","351","354","361","364","367","374","377","380","387","390","394","401","404","411","414","417","425","429","432","435","439","442","449","456","459","462","470","473","476","479","482","487","490","496","501","504","507","510","513","526","530","534","538"],"fullExpression":"n(s)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/api-key/src/main/java/com/networknt/apikey/ApiKeyConfig.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["98"],"fullExpression":"logger.trace(\"pathPrefixAuth s = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.apikey.ApiKeyConfig","methodSignature":"populatePathPrefixAuths(java.util.List<java.util.Map<java.lang.String, java.lang.Object>>)","methodName":"populatePathPrefixAuths","lineNumber":["103","113"],"fullExpression":"populatePathPrefixAuths(values)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["98"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.apikey.ApiKeyConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["43","56"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["14"],"fullExpression":"LoggerFactory.getLogger(ApiKeyConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["105"],"fullExpression":"logger.error(\"Exception:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.apikey.ApiKeyConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["42","55"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/traceability/src/main/java/com/networknt/traceability/TraceabilityHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["101"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["82"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["62","71"],"fullExpression":"logger.trace(\"TraceabilityHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["101"],"fullExpression":"logger.info(\"TraceabilityHandler is reloaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["62","71"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["65"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["49"],"fullExpression":"LoggerFactory.getLogger(TraceabilityHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["63"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.MDC","methodSignature":"put(java.lang.String, java.lang.String)","methodName":"put","lineNumber":["67"],"fullExpression":"MDC.put(TID, tid)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.MDC","methodSignature":"remove(java.lang.String)","methodName":"remove","lineNumber":["69"],"fullExpression":"MDC.remove(TID)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/info-config/src/main/java/com/networknt/info/ServerInfoUtil.java":[{"declaringType":"com.networknt.info.ServerInfoUtil","methodSignature":"getSystem()","methodName":"getSystem","lineNumber":["45"],"fullExpression":"getSystem()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.info.ServerInfoUtil","methodSignature":"getDeployment()","methodName":"getDeployment","lineNumber":["137"],"fullExpression":"getDeployment()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.info.ServerInfoUtil","methodSignature":"getServerTlsFingerPrint()","methodName":"getServerTlsFingerPrint","lineNumber":["131"],"fullExpression":"getServerTlsFingerPrint()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.info.ServerInfoUtil","methodSignature":"getEnvironment()","methodName":"getEnvironment","lineNumber":["138"],"fullExpression":"getEnvironment()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.info.ServerInfoUtil","methodSignature":"getSecurity()","methodName":"getSecurity","lineNumber":["139"],"fullExpression":"getSecurity()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["19"],"fullExpression":"LoggerFactory.getLogger(ServerInfoUtil.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.info.ServerInfoUtil","methodSignature":"getRuntime()","methodName":"getRuntime","lineNumber":["44"],"fullExpression":"getRuntime()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["111"],"fullExpression":"logger.error(\"Unable to load server keystore \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["108"],"fullExpression":"logger.error(\"Unable to find the certificate with alias name as server in the keystore\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.info.ServerInfoUtil","methodSignature":"getFrameworkVersion()","methodName":"getFrameworkVersion","lineNumber":["37"],"fullExpression":"getFrameworkVersion()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.info.ServerInfoUtil","methodSignature":"getHost()","methodName":"getHost","lineNumber":["43"],"fullExpression":"getHost()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/monad-result/src/main/java/com/networknt/monad/Success.java":[{"declaringType":"com.networknt.monad.Success","methodSignature":"ofOptional(T)","methodName":"ofOptional","lineNumber":["28"],"fullExpression":"Success.ofOptional(null)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/dump/src/main/java/com/networknt/dump/DumperFactory.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["33"],"fullExpression":"LoggerFactory.getLogger(DumperFactory.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object)","methodName":"error","lineNumber":["100","128"],"fullExpression":"logger.error(\"unsupported dump type: {}\", dumperName)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server/src/main/java/com/networknt/server/handler/ServerShutdownHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["22","36"],"fullExpression":"logger.info(\"ServerShutdownHandler constructed\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["34"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["19"],"fullExpression":"LoggerFactory.getLogger(ServerShutdownHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String, java.lang.Throwable)","methodName":"info","lineNumber":["41"],"fullExpression":"logger.info(\"ServerShutdownHandler - Unable to kill the Server!\", e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/portal-registry/src/main/java/com/networknt/portal/registry/client/PortalRegistryWebSocketClient.java":[{"declaringType":"io.undertow.websockets.core.WebSocketChannel","methodSignature":"sendClose()","methodName":"sendClose","lineNumber":["39"],"fullExpression":"this.channel.sendClose()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ChannelListener.Setter","methodSignature":"set(org.xnio.ChannelListener<? super T>)","methodName":"set","lineNumber":["91"],"fullExpression":"channel.getReceiveSetter().set(new AbstractReceiveListener() {\n\n    @Override\n    protected void onFullTextMessage(WebSocketChannel ws, BufferedTextMessage message) throws IOException {\n        client.onMessage(message.getData());\n    }\n\n    @Override\n    protected void onError(WebSocketChannel ws, Throwable error) {\n        super.onError(ws, error);\n        client.onError(new Exception(error));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.websockets.core.WebSocketChannel","methodSignature":"getCloseReason()","methodName":"getCloseReason","lineNumber":["105"],"fullExpression":"ws.getCloseReason()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.websockets.core.BufferedTextMessage","methodSignature":"getData()","methodName":"getData","lineNumber":["94"],"fullExpression":"message.getData()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.protocol.framed.AbstractFramedChannel","methodSignature":"isOpen()","methodName":"isOpen","lineNumber":["48","65"],"fullExpression":"this.channel.isOpen()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.websockets.core.WebSocketChannel","methodSignature":"getCloseCode()","methodName":"getCloseCode","lineNumber":["105"],"fullExpression":"ws.getCloseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.protocol.framed.AbstractFramedChannel","methodSignature":"resumeReceives()","methodName":"resumeReceives","lineNumber":["104"],"fullExpression":"channel.resumeReceives()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Xnio","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["26"],"fullExpression":"Xnio.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.websockets.core.WebSockets","methodSignature":"sendText(java.lang.String, io.undertow.websockets.core.WebSocketChannel, io.undertow.websockets.core.WebSocketCallback<java.lang.Void>)","methodName":"sendText","lineNumber":["66"],"fullExpression":"WebSockets.sendText(text, this.channel, callback)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.websockets.client.WebSocketClient.ConnectionBuilder","methodSignature":"connect()","methodName":"connect","lineNumber":["28"],"fullExpression":"connectionBuilder.connect()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoFuture","methodSignature":"get()","methodName":"get","lineNumber":["29"],"fullExpression":"future.get()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.protocol.framed.AbstractFramedChannel","methodSignature":"getReceiveSetter()","methodName":"getReceiveSetter","lineNumber":["91"],"fullExpression":"channel.getReceiveSetter()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.websockets.core.AbstractReceiveListener","methodSignature":"onError(io.undertow.websockets.core.WebSocketChannel, java.lang.Throwable)","methodName":"onError","lineNumber":["99"],"fullExpression":"super.onError(ws, error)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoFuture","methodSignature":"addNotifier(org.xnio.IoFuture.Notifier<? super T, A>, A)","methodName":"addNotifier","lineNumber":["30"],"fullExpression":"future.addNotifier(futureNotifier, null)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.portal.registry.client.PortalRegistryWebSocketClient","methodSignature":"send(java.lang.String, io.undertow.websockets.core.WebSocketCallback<java.lang.Void>)","methodName":"send","lineNumber":["56"],"fullExpression":"this.send(text, null)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.protocol.framed.AbstractFramedChannel","methodSignature":"addCloseTask(org.xnio.ChannelListener<C>)","methodName":"addCloseTask","lineNumber":["105"],"fullExpression":"channel.addCloseTask(ws -> client.onClose(ws.getCloseCode(), ws.getCloseReason()))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/consul/src/test/java/com/networknt/consul/ConsulUtilsTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["65"],"fullExpression":"assertTrue(testServiceName.equals(tempServiceName))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["91","93"],"fullExpression":"Assert.assertEquals(600, w)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["71","77","83"],"fullExpression":"assertEquals(testGroup, tempGroup)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/proxy-handler/src/main/java/com/networknt/handler/ProxyHandler.java":[{"declaringType":"io.undertow.util.WorkerUtils","methodSignature":"executeAfter(org.xnio.XnioIoThread, java.lang.Runnable, long, java.util.concurrent.TimeUnit)","methodName":"executeAfter","lineNumber":["187"],"fullExpression":"WorkerUtils.executeAfter(exchange.getIoThread(), () -> clientHandler.cancel(exchange), maxRequestTime, TimeUnit.MILLISECONDS)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.Certificates","methodSignature":"toPem(java.security.cert.Certificate)","methodName":"toPem","lineNumber":["903"],"fullExpression":"Certificates.toPem(peerCertificates[0])","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ProxyHandler.ProxyClientHandler","methodSignature":"failed(io.undertow.server.HttpServerExchange)","methodName":"failed","lineNumber":["346","922"],"fullExpression":"failed(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getConnection()","methodName":"getConnection","lineNumber":["353","383","587","752","802","817","861","878","895","919","963","1082"],"fullExpression":"ex.getConnection()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["579","581","583","588","593","594","600","736","772","781"],"fullExpression":"r.getRequestHeaders().put(Headers.X_FORWARDED_FOR, remoteHost)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.UndertowLogger","methodSignature":"ioException(java.io.IOException)","methodName":"ioException","lineNumber":["844","1085"],"fullExpression":"UndertowLogger.REQUEST_IO_LOGGER.ioException(exception)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableWriteChannel","methodSignature":"suspendWrites()","methodName":"suspendWrites","lineNumber":["1031"],"fullExpression":"flushedChannel.suspendWrites()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ProxyHandler.ProxyAction.Anonymous-324069d0-d650-476e-abcd-f109617d7590","methodSignature":"handleServerPush(io.undertow.client.ClientExchange)","methodName":"handleServerPush","lineNumber":["803"],"fullExpression":"this.handleServerPush(result)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["353","378","383","842","919","1072","1073","1082","1103"],"fullExpression":"IoUtils.safeClose(ex.getConnection())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"dispatch(java.util.concurrent.Executor, java.lang.Runnable)","methodName":"dispatch","lineNumber":["198"],"fullExpression":"exchange.dispatch(exchange.getIoThread(), clientHandler)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["149","301","466","629","792","831","873","949","979"],"fullExpression":"LOG.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"toString()","methodName":"toString","lineNumber":["609"],"fullExpression":"r.getRequestHeaders().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.StreamSinkChannel","methodSignature":"getWriteSetter()","methodName":"getWriteSetter","lineNumber":["853","1030","1032","1038"],"fullExpression":"ce.getRequestChannel().getWriteSetter()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ProxyHandler.HTTPTrailerChannelListener","methodSignature":"handleEvent(org.xnio.channels.StreamSinkChannel)","methodName":"handleEvent","lineNumber":["819"],"fullExpression":"trailerListener.handleEvent(result.getRequestChannel())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["156"],"fullExpression":"LOG.error(\"Cannot proxy a request that has already started.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isUpgrade()","methodName":"isUpgrade","lineNumber":["958"],"fullExpression":"exchange.isUpgrade()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["150"],"fullExpression":"LOG.debug(\"No proxy target for request to {}\", exchange.getRequestURL())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getPeerAddress()","methodName":"getPeerAddress","lineNumber":["377","467","832"],"fullExpression":"clientConnection.getPeerAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getMethod()","methodName":"getMethod","lineNumber":["878"],"fullExpression":"req.getMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ProxyHandler.ProxyAction.Anonymous-144b4c33-fff4-499d-9f64-ef5ed82150b6","methodSignature":"prepRequestChannelForContinue(io.undertow.client.ClientExchange, com.networknt.handler.ProxyHandler.IoExceptionHandler)","methodName":"prepRequestChannelForContinue","lineNumber":["810"],"fullExpression":"this.prepRequestChannelForContinue(result, handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["952"],"fullExpression":"response.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.ProxyClient.MaxRetriesProxyTarget","methodSignature":"getMaxRetries()","methodName":"getMaxRetries","lineNumber":["182"],"fullExpression":"((ProxyClient.MaxRetriesProxyTarget) target).getMaxRetries()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ServerConnection","methodSignature":"getLocalAddress(java.lang.Class<A>)","methodName":"getLocalAddress","lineNumber":["752"],"fullExpression":"this.exchange.getConnection().getLocalAddress(InetSocketAddress.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["1045","1052"],"fullExpression":"LOG.error(\"IOException: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestChannel()","methodName":"getRequestChannel","lineNumber":["817","855"],"fullExpression":"exchange.getRequestChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"fiCurrent(long)","methodName":"fiCurrent","lineNumber":["212"],"fullExpression":"from.fiCurrent(f)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ProxyHandler.ProxyClientHandler","methodSignature":"couldNotResolveBackend(io.undertow.server.HttpServerExchange)","methodName":"couldNotResolveBackend","lineNumber":["332","340"],"fullExpression":"couldNotResolveBackend(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getBufferPool()","methodName":"getBufferPool","lineNumber":["988","989"],"fullExpression":"result.getConnection().getBufferPool()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable...)","methodName":"safeClose","lineNumber":["992","1104"],"fullExpression":"IoUtils.safeClose(streamConnection, clientChannel)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ProxyHandler.ProxyAction.Anonymous-c97f80d3-2de2-4304-9320-59c7a4a9cac6","methodSignature":"prepContinueHandler(io.undertow.client.ClientExchange)","methodName":"prepContinueHandler","lineNumber":["800"],"fullExpression":"this.prepContinueHandler(result)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.NetworkUtils","methodSignature":"formatPossibleIpv6Address(java.lang.String)","methodName":"formatPossibleIpv6Address","lineNumber":["781"],"fullExpression":"NetworkUtils.formatPossibleIpv6Address(host)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableWriteChannel","methodSignature":"resumeWrites()","methodName":"resumeWrites","lineNumber":["863","1035"],"fullExpression":"ce.getRequestChannel().resumeWrites()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ProxyHandler.ResponseCallback","methodSignature":"handleUpgradeChannelOnComplete(io.undertow.client.ClientExchange)","methodName":"handleUpgradeChannelOnComplete","lineNumber":["959"],"fullExpression":"this.handleUpgradeChannelOnComplete(result)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jboss.logging.BasicLogger","methodSignature":"debug(java.lang.Object, java.lang.Throwable)","methodName":"debug","lineNumber":["1076"],"fullExpression":"UndertowLogger.REQUEST_IO_LOGGER.debug(\"Exception reading from target server\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.ProxyClient","methodSignature":"findTarget(io.undertow.server.HttpServerExchange)","methodName":"findTarget","lineNumber":["146","315"],"fullExpression":"proxyClient.findTarget(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"setPushHandler(io.undertow.client.PushCallback)","methodName":"setPushHandler","lineNumber":["871"],"fullExpression":"ce.setPushHandler((originalRequest, pushedRequest) -> {\n    if (LOG.isDebugEnabled())\n        LOG.debug(\"Sending push request {} received from {} to target {} for exchange {}\", pushedRequest.getRequest(), r, host, exchange);\n    final ClientRequest req = pushedRequest.getRequest();\n    exchange.getConnection().pushResource(req.getPath(), req.getMethod(), req.getRequestHeaders(), exchange -> {\n        String path = req.getPath();\n        int i = path.indexOf(\"?\");\n        if (i > 0)\n            path = path.substring(0, i);\n        exchange.dispatch(lightThreadExecutor, new ProxyAction(new ProxyConnection(pushedRequest.getConnection(), path), exchange, requestHeaders, rewriteHostHeader, reuseXForwarded, null, idempotentPredicate, urlRewriteRules, methodRewriteRules, queryParamRewriteRules, headerRewriteRules));\n    });\n    return true;\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isInIoThread()","methodName":"isInIoThread","lineNumber":["196"],"fullExpression":"exchange.isInIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.StreamConnection","methodSignature":"getSinkChannel()","methodName":"getSinkChannel","lineNumber":["988","989"],"fullExpression":"streamConnection.getSinkChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getQueryString()","methodName":"getQueryString","lineNumber":["719"],"fullExpression":"exchange.getQueryString()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getResponse()","methodName":"getResponse","lineNumber":["947"],"fullExpression":"result.getResponse()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpHandler","methodSignature":"handleRequest(io.undertow.server.HttpServerExchange)","methodName":"handleRequest","lineNumber":["151"],"fullExpression":"next.handleRequest(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.UndertowLogger","methodSignature":"cannotProxyStartedRequest(io.undertow.server.HttpServerExchange)","methodName":"cannotProxyStartedRequest","lineNumber":["158"],"fullExpression":"UndertowLogger.REQUEST_LOGGER.cannotProxyStartedRequest(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"contains(io.undertow.util.HttpString)","methodName":"contains","lineNumber":["213","575","599","599","731","745","767","777"],"fullExpression":"to.contains(values.getHeaderName())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["953"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["172","310","317","323","329","337","449","608"],"fullExpression":"LOG.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ServerConnection","methodSignature":"getByteBufferPool()","methodName":"getByteBufferPool","lineNumber":["817","861","963"],"fullExpression":"exchange.getConnection().getByteBufferPool()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ChannelListeners","methodSignature":"flushingChannelListener(org.xnio.ChannelListener<? super T>, org.xnio.ChannelExceptionHandler<? super T>)","methodName":"flushingChannelListener","lineNumber":["853","988","989","1030"],"fullExpression":"ChannelListeners.flushingChannelListener((ChannelListener<StreamSinkChannel>) flushedChannel -> Transfer.initiateTransfer(exchange.getRequestChannel(), ce.getRequestChannel(), ChannelListeners.closingChannelListener(), new HTTPTrailerChannelListener(exchange, ce, exchange, proxyClientHandler, idempotentPredicate), io, io, exchange.getConnection().getByteBufferPool()), io)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"sendRequest(io.undertow.client.ClientRequest, io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>)","methodName":"sendRequest","lineNumber":["787"],"fullExpression":"this.clientConnection.getConnection().sendRequest(r, new ClientCallback<>() {\n\n    @Override\n    public void completed(final ClientExchange result) {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Sent request {} to target {} for exchange {}\", r, host, exchange);\n        result.putAttachment(EXCHANGE, exchange);\n        boolean requiresContinueResponse = HttpContinue.requiresContinueResponse(exchange);\n        if (requiresContinueResponse)\n            this.prepContinueHandler(result);\n        if (exchange.getConnection().isPushSupported() && result.getConnection().isPushSupported())\n            this.handleServerPush(result);\n        result.setResponseListener(new ResponseCallback(exchange, proxyClientHandler, idempotentPredicate, headerRewriteRules));\n        final IoExceptionHandler handler = new IoExceptionHandler(exchange, clientConnection.getConnection());\n        if (requiresContinueResponse) {\n            this.prepRequestChannelForContinue(result, handler);\n            return;\n        }\n        HTTPTrailerChannelListener trailerListener = new HTTPTrailerChannelListener(exchange, result, exchange, proxyClientHandler, idempotentPredicate);\n        if (!exchange.isRequestComplete())\n            Transfer.initiateTransfer(exchange.getRequestChannel(), result.getRequestChannel(), ChannelListeners.closingChannelListener(), trailerListener, handler, handler, exchange.getConnection().getByteBufferPool());\n        else\n            trailerListener.handleEvent(result.getRequestChannel());\n    }\n\n    @Override\n    public void failed(IOException e) {\n        handleFailure(exchange, proxyClientHandler, idempotentPredicate, e);\n    }\n\n    private void prepContinueHandler(ClientExchange result) {\n        result.setContinueHandler(clientExchange -> {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Received continue response to request {} to target {} for exchange {}\", r, clientConnection.getConnection().getPeerAddress(), exchange);\n            HttpContinue.sendContinueResponse(exchange, new IoCallback() {\n\n                @Override\n                public void onComplete(final HttpServerExchange exchange, final Sender sender) {\n                    //don't care\n                }\n\n                @Override\n                public void onException(final HttpServerExchange exchange, final Sender sender, final IOException exception) {\n                    IoUtils.safeClose(clientConnection.getConnection());\n                    exchange.endExchange();\n                    UndertowLogger.REQUEST_IO_LOGGER.ioException(exception);\n                }\n            });\n        });\n    }\n\n    private void prepRequestChannelForContinue(ClientExchange ce, IoExceptionHandler io) {\n        try {\n            if (!ce.getRequestChannel().flush()) {\n                ce.getRequestChannel().getWriteSetter().set(ChannelListeners.flushingChannelListener((ChannelListener<StreamSinkChannel>) flushedChannel -> Transfer.initiateTransfer(exchange.getRequestChannel(), ce.getRequestChannel(), ChannelListeners.closingChannelListener(), new HTTPTrailerChannelListener(exchange, ce, exchange, proxyClientHandler, idempotentPredicate), io, io, exchange.getConnection().getByteBufferPool()), io));\n                ce.getRequestChannel().resumeWrites();\n            }\n        } catch (IOException e) {\n            io.handleException(ce.getRequestChannel(), e);\n        }\n    }\n\n    private void handleServerPush(ClientExchange ce) {\n        ce.setPushHandler((originalRequest, pushedRequest) -> {\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Sending push request {} received from {} to target {} for exchange {}\", pushedRequest.getRequest(), r, host, exchange);\n            final ClientRequest req = pushedRequest.getRequest();\n            exchange.getConnection().pushResource(req.getPath(), req.getMethod(), req.getRequestHeaders(), exchange -> {\n                String path = req.getPath();\n                int i = path.indexOf(\"?\");\n                if (i > 0)\n                    path = path.substring(0, i);\n                exchange.dispatch(lightThreadExecutor, new ProxyAction(new ProxyConnection(pushedRequest.getConnection(), path), exchange, requestHeaders, rewriteHostHeader, reuseXForwarded, null, idempotentPredicate, urlRewriteRules, methodRewriteRules, queryParamRewriteRules, headerRewriteRules));\n            });\n            return true;\n        });\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getPath()","methodName":"getPath","lineNumber":["878","879"],"fullExpression":"req.getPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"endExchange()","methodName":"endExchange","lineNumber":["160","366","396","843","926","1080","1087"],"fullExpression":"exchange.endExchange()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"remove(io.undertow.util.HttpString)","methodName":"remove","lineNumber":["560"],"fullExpression":"this.exchange.getRequestHeaders().remove(Headers.UPGRADE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableWriteChannel","methodSignature":"shutdownWrites()","methodName":"shutdownWrites","lineNumber":["1027","1039"],"fullExpression":"channel.shutdownWrites()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["187","198"],"fullExpression":"exchange.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestURI()","methodName":"getRequestURI","lineNumber":["377","380","520","916"],"fullExpression":"exchange.getRequestURI()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResolvedPath()","methodName":"getResolvedPath","lineNumber":["535","535","536"],"fullExpression":"this.exchange.getResolvedPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["216","600"],"fullExpression":"values.getHeaderName().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["91"],"fullExpression":"LoggerFactory.getLogger(ProxyHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor.Key","methodSignature":"remove()","methodName":"remove","lineNumber":["190"],"fullExpression":"key.remove()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"putAll(io.undertow.util.HttpString, java.util.Collection<java.lang.String>)","methodName":"putAll","lineNumber":["235","240"],"fullExpression":"to.putAll(key, values)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"fiNextNonEmpty(long)","methodName":"fiNextNonEmpty","lineNumber":["243"],"fullExpression":"from.fiNextNonEmpty(f)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ChannelListeners","methodSignature":"closingChannelExceptionHandler()","methodName":"closingChannelExceptionHandler","lineNumber":["988","988","989","989","1033"],"fullExpression":"ChannelListeners.closingChannelExceptionHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ProxyHandler.ProxyClientHandler","methodSignature":"cancel(io.undertow.server.HttpServerExchange)","methodName":"cancel","lineNumber":["187","313"],"fullExpression":"clientHandler.cancel(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["311","318","324","330","338","609"],"fullExpression":"LOG.trace(\"Current time = \" + time + \" passes timeout \" + this.timeout)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["550","575","576","579","581","583","588","593","594","599","599","600","604","605","609","736","753","759","772","781","878"],"fullExpression":"r.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object...)","methodName":"debug","lineNumber":["793","832","874","950"],"fullExpression":"LOG.debug(\"Sent request {} to target {} for exchange {}\", r, host, exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["623"],"fullExpression":"this.exchange.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getRequestChannel()","methodName":"getRequestChannel","lineNumber":["817","819","852","853","856","863","866"],"fullExpression":"result.getRequestChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isResponseStarted()","methodName":"isResponseStarted","lineNumber":["154","352","382","918","1075","1078"],"fullExpression":"exchange.isResponseStarted()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["559","576","594","732","748","768"],"fullExpression":"this.exchange.getRequestHeaders().getFirst(Headers.UPGRADE)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.protocol.http.HttpContinue","methodSignature":"requiresContinueResponse(io.undertow.server.HttpServerExchange)","methodName":"requiresContinueResponse","lineNumber":["797"],"fullExpression":"HttpContinue.requiresContinueResponse(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"setContinueHandler(io.undertow.client.ContinueNotification)","methodName":"setContinueHandler","lineNumber":["829"],"fullExpression":"result.setContinueHandler(clientExchange -> {\n    if (LOG.isDebugEnabled())\n        LOG.debug(\"Received continue response to request {} to target {} for exchange {}\", r, clientConnection.getConnection().getPeerAddress(), exchange);\n    HttpContinue.sendContinueResponse(exchange, new IoCallback() {\n\n        @Override\n        public void onComplete(final HttpServerExchange exchange, final Sender sender) {\n            //don't care\n        }\n\n        @Override\n        public void onException(final HttpServerExchange exchange, final Sender sender, final IOException exception) {\n            IoUtils.safeClose(clientConnection.getConnection());\n            exchange.endExchange();\n            UndertowLogger.REQUEST_IO_LOGGER.ioException(exception);\n        }\n    });\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getResponseChannel()","methodName":"getResponseChannel","lineNumber":["963"],"fullExpression":"result.getResponseChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"isPushSupported()","methodName":"isPushSupported","lineNumber":["587","802"],"fullExpression":"this.clientConnection.getConnection().isPushSupported()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ProxyHandler.ProxyAction","methodSignature":"createProxyRequestTargetURI()","methodName":"createProxyRequestTargetURI","lineNumber":["438"],"fullExpression":"this.createProxyRequestTargetURI()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.ProxyConnection","methodSignature":"getTargetPath()","methodName":"getTargetPath","lineNumber":["502","503","506"],"fullExpression":"this.clientConnection.getTargetPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getHostName()","methodName":"getHostName","lineNumber":["771","778"],"fullExpression":"this.exchange.getHostName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ChannelListener.Setter","methodSignature":"set(org.xnio.ChannelListener<? super T>)","methodName":"set","lineNumber":["853","1030","1032","1038"],"fullExpression":"ce.getRequestChannel().getWriteSetter().set(ChannelListeners.flushingChannelListener((ChannelListener<StreamSinkChannel>) flushedChannel -> Transfer.initiateTransfer(exchange.getRequestChannel(), ce.getRequestChannel(), ChannelListeners.closingChannelListener(), new HTTPTrailerChannelListener(exchange, ce, exchange, proxyClientHandler, idempotentPredicate), io, io, exchange.getConnection().getByteBufferPool()), io))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.ProxyClient","methodSignature":"getAllTargets()","methodName":"getAllTargets","lineNumber":["253"],"fullExpression":"proxyClient.getAllTargets()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["302"],"fullExpression":"LOG.debug(\"Failed calling backend with tries = \" + this.tries + \" maxRetryAttempts = \" + this.maxRetryAttempts)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ProxyHandler","methodSignature":"handleFailure(io.undertow.server.HttpServerExchange, com.networknt.handler.ProxyHandler.ProxyClientHandler, io.undertow.predicate.Predicate, java.io.IOException)","methodName":"handleFailure","lineNumber":["825","999","1047","1054"],"fullExpression":"handleFailure(exchange, proxyClientHandler, idempotentPredicate, e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.UndertowMessages","methodSignature":"argumentCannotBeNull(java.lang.String)","methodName":"argumentCannotBeNull","lineNumber":["1136","1217"],"fullExpression":"UndertowMessages.MESSAGES.argumentCannotBeNull(\"proxyClient\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.predicate.Predicate","methodSignature":"resolve(io.undertow.server.HttpServerExchange)","methodName":"resolve","lineNumber":["921"],"fullExpression":"idempotentRequestPredicate.resolve(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ChannelListeners","methodSignature":"writeShutdownChannelListener(org.xnio.ChannelListener<? super T>, org.xnio.ChannelExceptionHandler<? super T>)","methodName":"writeShutdownChannelListener","lineNumber":["988","989"],"fullExpression":"ChannelListeners.writeShutdownChannelListener(ChannelListeners.<StreamSinkChannel>flushingChannelListener(ChannelListeners.closingChannelListener(), ChannelListeners.closingChannelExceptionHandler()), ChannelListeners.closingChannelExceptionHandler())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"iterator()","methodName":"iterator","lineNumber":["225"],"fullExpression":"values.iterator()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ExchangeCompletionListener.NextListener","methodSignature":"proceed()","methodName":"proceed","lineNumber":["191"],"fullExpression":"nextListener.proceed()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestScheme()","methodName":"getRequestScheme","lineNumber":["735"],"fullExpression":"this.exchange.getRequestScheme()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["164","956"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"fastIterateNonEmpty()","methodName":"fastIterateNonEmpty","lineNumber":["209"],"fullExpression":"from.fastIterateNonEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.StreamConnection","methodSignature":"getSourceChannel()","methodName":"getSourceChannel","lineNumber":["988","989"],"fullExpression":"clientChannel.getSourceChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.ChannelListeners","methodSignature":"closingChannelListener()","methodName":"closingChannelListener","lineNumber":["817","857","963","988","988","989","989"],"fullExpression":"ChannelListeners.closingChannelListener()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"setResponseListener(io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>)","methodName":"setResponseListener","lineNumber":["805"],"fullExpression":"result.setResponseListener(new ResponseCallback(exchange, proxyClientHandler, idempotentPredicate, headerRewriteRules))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.Attachable","methodSignature":"putAttachment(io.undertow.util.AttachmentKey<T>, T)","methodName":"putAttachment","lineNumber":["795"],"fullExpression":"result.putAttachment(EXCHANGE, exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AbstractAttachable","methodSignature":"putAttachment(io.undertow.util.AttachmentKey<T>, T)","methodName":"putAttachment","lineNumber":["188","294","486","739","749","754","760","775","903"],"fullExpression":"exchange.putAttachment(TIMEOUT_KEY, key)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setStatusCode(int)","methodName":"setStatusCode","lineNumber":["159","356","386","925","954","1079","1086"],"fullExpression":"exchange.setStatusCode(StatusCodes.INTERNAL_SERVER_ERROR)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableWriteChannel","methodSignature":"flush()","methodName":"flush","lineNumber":["852","1029"],"fullExpression":"ce.getRequestChannel().flush()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getRequest()","methodName":"getRequest","lineNumber":["874","876","950","980"],"fullExpression":"pushedRequest.getRequest()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isPersistent()","methodName":"isPersistent","lineNumber":["555"],"fullExpression":"this.exchange.isPersistent()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.UndertowLogger","methodSignature":"proxyRequestFailed(java.lang.String, java.lang.Exception)","methodName":"proxyRequestFailed","lineNumber":["916"],"fullExpression":"UndertowLogger.PROXY_REQUEST_LOGGER.proxyRequestFailed(exchange.getRequestURI(), e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseChannel()","methodName":"getResponseChannel","lineNumber":["963"],"fullExpression":"exchange.getResponseChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ServerConnection","methodSignature":"pushResource(java.lang.String, io.undertow.util.HttpString, io.undertow.util.HeaderMap, io.undertow.server.HttpHandler)","methodName":"pushResource","lineNumber":["878"],"fullExpression":"exchange.getConnection().pushResource(req.getPath(), req.getMethod(), req.getRequestHeaders(), exchange -> {\n    String path = req.getPath();\n    int i = path.indexOf(\"?\");\n    if (i > 0)\n        path = path.substring(0, i);\n    exchange.dispatch(lightThreadExecutor, new ProxyAction(new ProxyConnection(pushedRequest.getConnection(), path), exchange, requestHeaders, rewriteHostHeader, reuseXForwarded, null, idempotentPredicate, urlRewriteRules, methodRewriteRules, queryParamRewriteRules, headerRewriteRules));\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isRequestComplete()","methodName":"isRequestComplete","lineNumber":["295","599","816"],"fullExpression":"exchange.isRequestComplete()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isErrorEnabled()","methodName":"isErrorEnabled","lineNumber":["155","1044","1051"],"fullExpression":"LOG.isErrorEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.ProxyClient","methodSignature":"getConnection(io.undertow.server.handlers.proxy.ProxyClient.ProxyTarget, io.undertow.server.HttpServerExchange, io.undertow.server.handlers.proxy.ProxyCallback<io.undertow.server.handlers.proxy.ProxyConnection>, long, java.util.concurrent.TimeUnit)","methodName":"getConnection","lineNumber":["289","326"],"fullExpression":"proxyClient.getConnection(this.target, this.exchange, this, -1, TimeUnit.MILLISECONDS)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isHostIncludedInRequestURI()","methodName":"isHostIncludedInRequestURI","lineNumber":["522"],"fullExpression":"this.exchange.isHostIncludedInRequestURI()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["549","559","560","594","731","732","745","748","767","768","777"],"fullExpression":"this.exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"getHeaderName()","methodName":"getHeaderName","lineNumber":["213","216","217","240"],"fullExpression":"values.getHeaderName()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getPeerAddress(java.lang.Class<A>)","methodName":"getPeerAddress","lineNumber":["592"],"fullExpression":"this.clientConnection.getConnection().getPeerAddress(InetSocketAddress.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getConnection()","methodName":"getConnection","lineNumber":["802","885","961","985","988","989"],"fullExpression":"result.getConnection()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.Transfer","methodSignature":"initiateTransfer(I, O, org.xnio.ChannelListener<? super I>, org.xnio.ChannelListener<? super O>, org.xnio.ChannelExceptionHandler<? super I>, org.xnio.ChannelExceptionHandler<? super O>, io.undertow.connector.ByteBufferPool)","methodName":"initiateTransfer","lineNumber":["817","854","963","988","989"],"fullExpression":"Transfer.initiateTransfer(exchange.getRequestChannel(), result.getRequestChannel(), ChannelListeners.closingChannelListener(), trailerListener, handler, handler, exchange.getConnection().getByteBufferPool())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.proxy.ProxyConnection","methodSignature":"getConnection()","methodName":"getConnection","lineNumber":["376","467","587","592","787","807","832","842"],"fullExpression":"connectionAttachment.getConnection()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"performUpgrade()","methodName":"performUpgrade","lineNumber":["985"],"fullExpression":"result.getConnection().performUpgrade()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ServerConnection","methodSignature":"getSslSessionInfo()","methodName":"getSslSessionInfo","lineNumber":["895"],"fullExpression":"this.exchange.getConnection().getSslSessionInfo()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getHostPort()","methodName":"getHostPort","lineNumber":["758"],"fullExpression":"this.exchange.getHostPort()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"debug","lineNumber":["980"],"fullExpression":"LOG.debug(\"Upgraded request {} to for exchange {}\", result.getRequest(), exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ServerConnection","methodSignature":"isPushSupported()","methodName":"isPushSupported","lineNumber":["587","802"],"fullExpression":"this.exchange.getConnection().isPushSupported()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, long)","methodName":"put","lineNumber":["753","759"],"fullExpression":"r.getRequestHeaders().put(Headers.X_FORWARDED_PORT, port)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"upgradeChannel(io.undertow.server.HttpUpgradeListener)","methodName":"upgradeChannel","lineNumber":["977"],"fullExpression":"exchange.upgradeChannel((streamConnection, exchange) -> {\n    if (LOG.isDebugEnabled())\n        LOG.debug(\"Upgraded request {} to for exchange {}\", result.getRequest(), exchange);\n    StreamConnection clientChannel = null;\n    try {\n        clientChannel = result.getConnection().performUpgrade();\n        final ClosingExceptionHandler handler = new ClosingExceptionHandler(streamConnection, clientChannel);\n        Transfer.initiateTransfer(clientChannel.getSourceChannel(), streamConnection.getSinkChannel(), ChannelListeners.closingChannelListener(), ChannelListeners.writeShutdownChannelListener(ChannelListeners.<StreamSinkChannel>flushingChannelListener(ChannelListeners.closingChannelListener(), ChannelListeners.closingChannelExceptionHandler()), ChannelListeners.closingChannelExceptionHandler()), handler, handler, result.getConnection().getBufferPool());\n        Transfer.initiateTransfer(streamConnection.getSourceChannel(), clientChannel.getSinkChannel(), ChannelListeners.closingChannelListener(), ChannelListeners.writeShutdownChannelListener(ChannelListeners.<StreamSinkChannel>flushingChannelListener(ChannelListeners.closingChannelListener(), ChannelListeners.closingChannelExceptionHandler()), ChannelListeners.closingChannelExceptionHandler()), handler, handler, result.getConnection().getBufferPool());\n    } catch (IOException e) {\n        IoUtils.safeClose(streamConnection, clientChannel);\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.ProxyHandler.IoExceptionHandler","methodSignature":"handleException(java.nio.channels.Channel, java.io.IOException)","methodName":"handleException","lineNumber":["866"],"fullExpression":"io.handleException(ce.getRequestChannel(), e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["954"],"fullExpression":"response.getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"trace","lineNumber":["173"],"fullExpression":"LOG.trace(\"Overwritten maxRequestTime {} and timeout {}.\", maxRequestTime, timeout)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestURL()","methodName":"getRequestURL","lineNumber":["150"],"fullExpression":"exchange.getRequestURL()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.protocol.http.HttpContinue","methodSignature":"sendContinueResponse(io.undertow.server.HttpServerExchange, io.undertow.io.IoCallback)","methodName":"sendContinueResponse","lineNumber":["834"],"fullExpression":"HttpContinue.sendContinueResponse(exchange, new IoCallback() {\n\n    @Override\n    public void onComplete(final HttpServerExchange exchange, final Sender sender) {\n        //don't care\n    }\n\n    @Override\n    public void onException(final HttpServerExchange exchange, final Sender sender, final IOException exception) {\n        IoUtils.safeClose(clientConnection.getConnection());\n        exchange.endExchange();\n        UndertowLogger.REQUEST_IO_LOGGER.ioException(exception);\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AbstractAttachable","methodSignature":"getAttachment(io.undertow.util.AttachmentKey<T>)","methodName":"getAttachment","lineNumber":["373"],"fullExpression":"exchange.getAttachment(CONNECTION)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getSourceAddress()","methodName":"getSourceAddress","lineNumber":["480"],"fullExpression":"this.exchange.getSourceAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.Attachable","methodSignature":"getAttachment(io.undertow.util.AttachmentKey<T>)","methodName":"getAttachment","lineNumber":["1021"],"fullExpression":"source.getAttachment(HttpAttachments.REQUEST_TRAILERS)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"addExchangeCompleteListener(io.undertow.server.ExchangeCompletionListener)","methodName":"addExchangeCompleteListener","lineNumber":["189"],"fullExpression":"exchange.addExchangeCompleteListener((exchange1, nextListener) -> {\n    key.remove();\n    nextListener.proceed();\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.UndertowLogger","methodSignature":"timingOutRequest(java.lang.String)","methodName":"timingOutRequest","lineNumber":["377","380"],"fullExpression":"UndertowLogger.PROXY_REQUEST_LOGGER.timingOutRequest(clientConnection.getPeerAddress() + \"\" + exchange.getRequestURI())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getQueryParameters()","methodName":"getQueryParameters","lineNumber":["678"],"fullExpression":"this.exchange.getQueryParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.AttachmentKey","methodSignature":"create(java.lang.Class<? super T>)","methodName":"create","lineNumber":["97","98","99"],"fullExpression":"AttachmentKey.create(ProxyConnection.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/test/java/com/networknt/config/ConfigPropertyPathTest.java":[{"declaringType":"com.networknt.config.ConfigPropertyPathTest","methodSignature":"writeConfigFile(java.lang.String, java.lang.String, java.lang.String)","methodName":"writeConfigFile","lineNumber":["44","45","46"],"fullExpression":"writeConfigFile(\"value\", \"default dir\", homeDir)","currentLayer":0,"declarationInfo":null},{"declaringType":"junit.framework.TestCase","methodSignature":"setUp()","methodName":"setUp","lineNumber":["36"],"fullExpression":"super.setUp()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.ConfigPropertyPathTest","methodSignature":"setExternalizedConfigDir(java.lang.String)","methodName":"setExternalizedConfigDir","lineNumber":["41","62","74","89","105"],"fullExpression":"setExternalizedConfigDir(homeDir)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["69","77","84","107"],"fullExpression":"Assert.assertEquals(\"default dir\", configMap.get(\"value\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/com/networknt/metrics/MetricsHandlerTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["54","78"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.metrics.MetricsHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["55"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["61"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["77"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["110"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["61"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["100","101"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["84"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["112"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["100","101"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["99"],"fullExpression":"new ClientRequest().setPath(\"/v2/pet/111\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["105"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["65"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["83"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["84"],"fullExpression":"exchange.getResponseSender().send(\"test\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["108"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["61"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["99"],"fullExpression":"new ClientRequest().setPath(\"/v2/pet/111\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["47"],"fullExpression":"LoggerFactory.getLogger(MetricsHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["61"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["113"],"fullExpression":"Assert.assertEquals(\"test\", body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["83"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/v2/pet/{petId}\", exchange -> exchange.getResponseSender().send(\"test\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/ConsoleReporterTest.java":[{"declaringType":"io.dropwizard.metrics.ConsoleReporterTest","methodSignature":"map()","methodName":"map","lineNumber":["73","74","75","76","95","97","98","99","132","133","135","136","169","170","171","173","215","216","217","218"],"fullExpression":"this.map()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["78","101","138","175","221"],"fullExpression":"assertThat(consoleOutput())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["78","101","138","175","221"],"fullExpression":"assertThat(consoleOutput()).isEqualTo(lines(\"3/17/13, 6:04:36 PM ============================================================\", \"\", \"-- Gauges ----------------------------------------------------------------------\", \"gauge\", \"             value = 1\", \"\", \"\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.ConsoleReporterTest","methodSignature":"consoleOutput()","methodName":"consoleOutput","lineNumber":["78","101","138","175","221"],"fullExpression":"consoleOutput()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.ConsoleReporterTest","methodSignature":"lines(java.lang.String...)","methodName":"lines","lineNumber":["79","102","139","176","222"],"fullExpression":"lines(\"3/17/13, 6:04:36 PM ============================================================\", \"\", \"-- Gauges ----------------------------------------------------------------------\", \"gauge\", \"             value = 1\", \"\", \"\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/monad-result/src/test/java/com/networknt/monad/ResultTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["30","31"],"fullExpression":"Assert.assertTrue(!Failure.of(status).isSuccess())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/service/src/main/java/com/networknt/service/ServiceConfig.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["77"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.service.ServiceConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["49"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["72"],"fullExpression":"logger.trace(\"singletons = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["77"],"fullExpression":"logger.info(\"singletons missing or wrong type.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["72"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["34"],"fullExpression":"LoggerFactory.getLogger(ServiceConfig.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/main/java/com/networknt/router/middleware/ServiceDictHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["78"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["35","97"],"fullExpression":"logger.info(\"ServiceDictHandler is constructed\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["41","43"],"fullExpression":"logger.debug(\"ServiceDictHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["55"],"fullExpression":"logger.trace(\"serviceEntry found and header is set for service_id = \" + serviceEntry[1])","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["55","60","64"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["49","65","67"],"fullExpression":"exchange.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["97"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.ServiceDictHandler","methodSignature":"serviceDict(io.undertow.server.HttpServerExchange)","methodName":"serviceDict","lineNumber":["42"],"fullExpression":"serviceDict(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["41","43"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestURI()","methodName":"getRequestURI","lineNumber":["48"],"fullExpression":"exchange.getRequestURI()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["49","65","67"],"fullExpression":"exchange.getRequestMethod().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["61"],"fullExpression":"logger.trace(\"serviceEntry found and endpoint is set to = '{}'\", serviceEntry[0])","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["30"],"fullExpression":"LoggerFactory.getLogger(ServiceDictHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"peekFirst()","methodName":"peekFirst","lineNumber":["53"],"fullExpression":"serviceIdHeader.peekFirst()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["52","56"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sanitizer/src/test/java/com/networknt/sanitizer/builder/HandlerBuilder.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["16"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["26","38"],"fullExpression":"exchange.getResponseSender().send(headerMap.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"toString()","methodName":"toString","lineNumber":["26","38"],"fullExpression":"headerMap.toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["20","26","32","38"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getQueryParameters()","methodName":"getQueryParameters","lineNumber":["18"],"fullExpression":"exchange.getQueryParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["24","36"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["16","16","16","16"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/parameter\", exchange -> {\n    Map<String, Deque<String>> parameter = exchange.getQueryParameters();\n    if (parameter != null) {\n        exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(parameter));\n    }\n}).add(Methods.GET, \"/header\", exchange -> {\n    HeaderMap headerMap = exchange.getRequestHeaders();\n    if (headerMap != null) {\n        exchange.getResponseSender().send(headerMap.toString());\n    }\n}).add(Methods.POST, \"/body\", exchange -> {\n    Object body = exchange.getAttachment(AttachmentConstants.REQUEST_BODY);\n    if (body != null) {\n        exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(body));\n    }\n}).add(Methods.POST, \"/header\", exchange -> {\n    HeaderMap headerMap = exchange.getRequestHeaders();\n    if (headerMap != null) {\n        exchange.getResponseSender().send(headerMap.toString());\n    }\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/db-provider/src/main/java/com/networknt/db/provider/DbProviderImpl.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["18"],"fullExpression":"LoggerFactory.getLogger(DbProviderImpl.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/influxdb/InfluxDbHttpSender.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["89"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["124"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["124"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(path);\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"text/plain\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, body));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["139"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["141"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["128","129","130"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["127"],"fullExpression":"new ClientRequest().setMethod(Methods.POST).setPath(path)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["128","129","130"],"fullExpression":"request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["127"],"fullExpression":"new ClientRequest().setMethod(Methods.POST)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["136"],"fullExpression":"logger.error(\"IOException: \", e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sanitizer/src/main/java/com/networknt/sanitizer/SanitizerConfig.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["228","252","276","300"],"fullExpression":"logger.trace(\"bodyAttributesToEncode = \" + s)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.sanitizer.SanitizerConfig","methodSignature":"setConfigList()","methodName":"setConfigList","lineNumber":["66"],"fullExpression":"setConfigList()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["228","252","276","300"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["37"],"fullExpression":"LoggerFactory.getLogger(SanitizerConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.sanitizer.SanitizerConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["67"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/com/networknt/metrics/AbstractMetricsHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["99","109"],"fullExpression":"logger.trace(\"auditInfo = \" + auditInfo)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["99","109","127","131","155"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"trace","lineNumber":["127"],"fullExpression":"logger.trace(\"Extracted issuer {} from Original issuer {] is sent.\", iss, issuer)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["131"],"fullExpression":"logger.trace(\"Original issuer {} is sent.\", issuer)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["49"],"fullExpression":"LoggerFactory.getLogger(AbstractMetricsHandler.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/basic-auth/src/main/java/com/networknt/basicauth/BasicAuthConfig.java":[{"declaringType":"com.networknt.basicauth.BasicAuthConfig","methodSignature":"setConfigUser()","methodName":"setConfigUser","lineNumber":["53","64","78"],"fullExpression":"setConfigUser()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.BasicAuthConfig","methodSignature":"setConfigData()","methodName":"setConfigData","lineNumber":["52","63","77"],"fullExpression":"setConfigData()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.BasicAuthConfig","methodSignature":"populateUsers(java.util.List<java.util.Map<java.lang.String, java.lang.Object>>)","methodName":"populateUsers","lineNumber":["129","139"],"fullExpression":"populateUsers(userList)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/main/java/com/networknt/config/TlsUtil.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["11"],"fullExpression":"LoggerFactory.getLogger(TlsUtil.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isErrorEnabled()","methodName":"isErrorEnabled","lineNumber":["19"],"fullExpression":"logger.isErrorEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["38","43","50"],"fullExpression":"logger.error(\"Unable to load keystore \" + name, e2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["20"],"fullExpression":"logger.error(message)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/security/src/main/java/com/networknt/security/TokenVerifier.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["17"],"fullExpression":"logger.trace(\"serviceId = \" + serviceId)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["16"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["14"],"fullExpression":"LoggerFactory.getLogger(TokenVerifier.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["60","61","62"],"fullExpression":"headerMap.getFirst(Headers.UPGRADE)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/integration/java/com/networknt/client/Http2ClientIT.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["137"],"fullExpression":"Assert.assertTrue(hasScopeToken)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientIT","methodSignature":"isTokenExpired(java.lang.String)","methodName":"isTokenExpired","lineNumber":["139"],"fullExpression":"isTokenExpired(scopeToken)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["769"],"fullExpression":"logger.debug(\"future = \" + future)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientIT","methodSignature":"getJwtFromAuthorization(java.lang.String)","methodName":"getJwtFromAuthorization","lineNumber":["883"],"fullExpression":"getJwtFromAuthorization(authorization)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["197"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setDisableRequireSignature()","methodName":"setDisableRequireSignature","lineNumber":["886"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["119"],"fullExpression":"builder.addHttpListener(7777, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["239","345","454","492","572","645"],"fullExpression":"Assert.assertEquals(10, references.size())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"getXnio()","methodName":"getXnio","lineNumber":["434","472","517","590"],"fullExpression":"worker.getXnio()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["101","141","170","230","299","300","445","483","526","527","599","600","661","682","704"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_LENGTH, message.length() + \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setIssuedAtToNow()","methodName":"setIssuedAtToNow","lineNumber":["921"],"fullExpression":"claims.setIssuedAtToNow()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"isOpen()","methodName":"isOpen","lineNumber":["668","690","712"],"fullExpression":"connection.isOpen()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["245","350","460","501","577","650","670","692","714","842"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipAllValidators()","methodName":"setSkipAllValidators","lineNumber":["886"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setStringListClaim(java.lang.String, java.util.List<java.lang.String>)","methodName":"setStringListClaim","lineNumber":["929"],"fullExpression":"claims.setStringListClaim(\"scope\", scope)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setIoThreads(int)","methodName":"setIoThreads","lineNumber":["124"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"now()","methodName":"now","lineNumber":["896"],"fullExpression":"NumericDate.now()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"close()","methodName":"close","lineNumber":["104"],"fullExpression":"sender.close()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientIT","methodSignature":"getJwt(int)","methodName":"getJwt","lineNumber":["166"],"fullExpression":"getJwt(5)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"setResponseListener(io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>)","methodName":"setResponseListener","lineNumber":["305","532","605"],"fullExpression":"result.setResponseListener(new ClientCallback<ClientExchange>() {\n\n    @Override\n    public void completed(ClientExchange result) {\n        new StringReadChannelListener(Http2Client.BUFFER_POOL) {\n\n            @Override\n            protected void stringDone(String string) {\n                responses.add(string);\n                latch.countDown();\n            }\n\n            @Override\n            protected void error(IOException e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n        }.setup(result.getResponseChannel());\n    }\n\n    @Override\n    public void failed(IOException e) {\n        e.printStackTrace();\n        latch.countDown();\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setExpirationTime(org.jose4j.jwt.NumericDate)","methodName":"setExpirationTime","lineNumber":["911"],"fullExpression":"claims.setExpirationTime(NumericDate.fromMilliseconds(System.currentTimeMillis() + expiredInSeconds * 1000))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["229","298","444","482","525","598","660","681","703"],"fullExpression":"new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setStatusCode(int)","methodName":"setStatusCode","lineNumber":["100"],"fullExpression":"exchange.setStatusCode(StatusCodes.OK)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["992"],"fullExpression":"logger.error(\"Failed to retrieve private key from keystore\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(boolean)","methodName":"assertFalse","lineNumber":["140"],"fullExpression":"Assert.assertFalse(expired)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"getExpirationTime()","methodName":"getExpirationTime","lineNumber":["896"],"fullExpression":"jwtClaims.getExpirationTime()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientIT","methodSignature":"sendMessage(io.undertow.server.HttpServerExchange)","methodName":"sendMessage","lineNumber":["133","134"],"fullExpression":"sendMessage(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientIT","methodSignature":"randInt(int, int)","methodName":"randInt","lineNumber":["157","750"],"fullExpression":"randInt(1, 3)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["229","298","444","482","525","598","660","681","703"],"fullExpression":"new ClientRequest().setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["900","988"],"fullExpression":"logger.error(\"MalformedClaimException:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientIT","methodSignature":"createClient(org.xnio.OptionMap)","methodName":"createClient","lineNumber":["207"],"fullExpression":"createClient(OptionMap.EMPTY)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientIT","methodSignature":"createClient()","methodName":"createClient","lineNumber":["217","287","429","467","511","584","655","676","698"],"fullExpression":"createClient()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setWorkerThreads(int)","methodName":"setWorkerThreads","lineNumber":["124"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setSocketOption(Options.SSL_ENABLED_PROTOCOLS, Sequence.of(\"TLSv1.2\")).setHandler(new PathHandler().addExactPath(MESSAGE, exchange -> sendMessage(exchange)).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n}))).setWorkerThreads(200)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setAudience(java.lang.String)","methodName":"setAudience","lineNumber":["918"],"fullExpression":"claims.setAudience(\"urn:com.networknt\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setBufferSize(int)","methodName":"setBufferSize","lineNumber":["124"],"fullExpression":"builder.setBufferSize(1024 * 16)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"setPayload(java.lang.String)","methodName":"setPayload","lineNumber":["961"],"fullExpression":"jws.setPayload(claims.toJson())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"add(io.undertow.util.HttpString, java.lang.String)","methodName":"add","lineNumber":["663","684","706"],"fullExpression":"request.getRequestHeaders().add(Headers.CONNECTION, Headers.CLOSE.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setClaim(java.lang.String, java.lang.Object)","methodName":"setClaim","lineNumber":["923","925","926","927"],"fullExpression":"claims.setClaim(\"version\", \"1.0\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["136","138"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["242","347","457","495","574","647","668","690","712"],"fullExpression":"Assert.assertEquals(\"HTTP/1.1\", reference.get().getProtocol().toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumer","methodSignature":"process(java.lang.String)","methodName":"process","lineNumber":["892"],"fullExpression":"consumer.process(jwt)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientIT","methodSignature":"getTestClaims()","methodName":"getTestClaims","lineNumber":["910"],"fullExpression":"getTestClaims()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["124"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setSocketOption(Options.SSL_ENABLED_PROTOCOLS, Sequence.of(\"TLSv1.2\")).setHandler(new PathHandler().addExactPath(MESSAGE, exchange -> sendMessage(exchange)).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n}))).setWorkerThreads(200).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKey(java.security.Key)","methodName":"setKey","lineNumber":["964"],"fullExpression":"jws.setKey(privateKey)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKeyIdHeaderValue(java.lang.String)","methodName":"setKeyIdHeaderValue","lineNumber":["965"],"fullExpression":"jws.setKeyIdHeaderValue(\"100\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["101","141","170"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["102","142","150","171","181"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["121","124","124","124"],"fullExpression":"builder.setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["474","592"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"sendRequest(io.undertow.client.ClientRequest, io.undertow.client.ClientCallback<io.undertow.client.ClientExchange>)","methodName":"sendRequest","lineNumber":["301","528","601"],"fullExpression":"connection.sendRequest(request, new ClientCallback<ClientExchange>() {\n\n    @Override\n    public void completed(ClientExchange result) {\n        new StringWriteChannelListener(postMessage).setup(result.getRequestChannel());\n        result.setResponseListener(new ClientCallback<ClientExchange>() {\n\n            @Override\n            public void completed(ClientExchange result) {\n                new StringReadChannelListener(Http2Client.BUFFER_POOL) {\n\n                    @Override\n                    protected void stringDone(String string) {\n                        responses.add(string);\n                        latch.countDown();\n                    }\n\n                    @Override\n                    protected void error(IOException e) {\n                        e.printStackTrace();\n                        latch.countDown();\n                    }\n                }.setup(result.getResponseChannel());\n            }\n\n            @Override\n            public void failed(IOException e) {\n                e.printStackTrace();\n                latch.countDown();\n            }\n        });\n    }\n\n    @Override\n    public void failed(IOException e) {\n        e.printStackTrace();\n        latch.countDown();\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpsListener(int, java.lang.String, javax.net.ssl.SSLContext)","methodName":"addHttpsListener","lineNumber":["118"],"fullExpression":"builder.addHttpsListener(7778, \"localhost\", sslContext)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.handlers.PathHandler","methodSignature":"addExactPath(java.lang.String, io.undertow.server.HttpHandler)","methodName":"addExactPath","lineNumber":["132","132","132","132","132","132"],"fullExpression":"new PathHandler().addExactPath(MESSAGE, exchange -> sendMessage(exchange)).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n}))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientIT","methodSignature":"callApiAsyncMultiThread(int)","methodName":"callApiAsyncMultiThread","lineNumber":["722","734","746"],"fullExpression":"callApiAsyncMultiThread(4)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["187"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientIT","methodSignature":"createSSLContext(java.security.KeyStore, java.security.KeyStore, boolean)","methodName":"createSSLContext","lineNumber":["117"],"fullExpression":"createSSLContext(loadKeyStore(SERVER_KEY_STORE), loadKeyStore(SERVER_TRUST_STORE), false)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["103","150","181"],"fullExpression":"sender.send(message)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtContext","methodSignature":"getJwtClaims()","methodName":"getJwtClaims","lineNumber":["893"],"fullExpression":"jwtContext.getJwtClaims()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"fromMilliseconds(long)","methodName":"fromMilliseconds","lineNumber":["911"],"fullExpression":"NumericDate.fromMilliseconds(System.currentTimeMillis() + expiredInSeconds * 1000)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientIT","methodSignature":"loadKeyStore(java.lang.String)","methodName":"loadKeyStore","lineNumber":["117","117"],"fullExpression":"loadKeyStore(SERVER_KEY_STORE)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["124"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setSocketOption(Options.SSL_ENABLED_PROTOCOLS, Sequence.of(\"TLSv1.2\")).setHandler(new PathHandler().addExactPath(MESSAGE, exchange -> sendMessage(exchange)).addExactPath(KEY, exchange -> sendMessage(exchange)).addExactPath(API, (exchange) -> {\n    boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);\n    Assert.assertTrue(hasScopeToken);\n    String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);\n    boolean expired = isTokenExpired(scopeToken);\n    Assert.assertFalse(expired);\n    exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n    exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(Collections.singletonMap(\"message\", \"OK!\"))));\n}).addExactPath(FORM, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})).addExactPath(TOKEN, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        try {\n            int sleepTime = randInt(1, 3) * 1000;\n            if (sleepTime >= 2000) {\n                sleepTime = 3000;\n            } else {\n                sleepTime = 1000;\n            }\n            Thread.sleep(sleepTime);\n            // create a token that expired in 5 seconds.\n            Map<String, Object> map = new HashMap<>();\n            String token = getJwt(5);\n            map.put(\"access_token\", token);\n            map.put(\"token_type\", \"Bearer\");\n            map.put(\"expires_in\", 5);\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n            exchange.getResponseSender().send(ByteBuffer.wrap(Config.getInstance().getMapper().writeValueAsBytes(map)));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n})).addExactPath(POST, exchange -> exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["242","457","495","663","684","706"],"fullExpression":"reference.get().getProtocol().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["66"],"fullExpression":"LoggerFactory.getLogger(Http2ClientIT.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["886"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification().build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["223","294","438","476","498","521","594"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        for (int i = 0; i < 10; i++) {\n            AtomicReference<ClientResponse> reference = new AtomicReference<>();\n            references.add(i, reference);\n            final ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(MESSAGE);\n            request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n            connection.sendRequest(request, client.createClientCallback(reference, latch));\n        }\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["723","735","748"],"fullExpression":"logger.info(\"called times: \" + i)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setNotBeforeMinutesInThePast(float)","methodName":"setNotBeforeMinutesInThePast","lineNumber":["922"],"fullExpression":"claims.setNotBeforeMinutesInThePast(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["230","299","300","445","483","526","527","599","600","661","663","682","684","704","706"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"getValue()","methodName":"getValue","lineNumber":["896","896"],"fullExpression":"NumericDate.now().getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioWorker","methodSignature":"shutdown()","methodName":"shutdown","lineNumber":["193"],"fullExpression":"worker.shutdown()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getRequestChannel()","methodName":"getRequestChannel","lineNumber":["304","531","604"],"fullExpression":"result.getRequestChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.StringWriteChannelListener","methodSignature":"setup(org.xnio.channels.StreamSinkChannel)","methodName":"setup","lineNumber":["304","531","604"],"fullExpression":"new StringWriteChannelListener(postMessage).setup(result.getRequestChannel())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Xnio","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["110"],"fullExpression":"Xnio.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientExchange","methodSignature":"getResponseChannel()","methodName":"getResponseChannel","lineNumber":["321","548","621"],"fullExpression":"result.getResponseChannel()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setIssuer(java.lang.String)","methodName":"setIssuer","lineNumber":["917"],"fullExpression":"claims.setIssuer(\"urn:com:networknt:oauth2:v1\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientIT","methodSignature":"getJwt(org.jose4j.jwt.JwtClaims)","methodName":"getJwt","lineNumber":["912"],"fullExpression":"getJwt(claims)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["223","294","438","476","498","521","594"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipSignatureVerification()","methodName":"setSkipSignatureVerification","lineNumber":["886"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"toJson()","methodName":"toJson","lineNumber":["961"],"fullExpression":"claims.toJson()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setExpirationTimeMinutesInTheFuture(float)","methodName":"setExpirationTimeMinutesInTheFuture","lineNumber":["919"],"fullExpression":"claims.setExpirationTimeMinutesInTheFuture(10)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setGeneratedJwtId()","methodName":"setGeneratedJwtId","lineNumber":["920"],"fullExpression":"claims.setGeneratedJwtId()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setSocketOption(org.xnio.Option<T>, T)","methodName":"setSocketOption","lineNumber":["124","124"],"fullExpression":"builder.setBufferSize(1024 * 16).setIoThreads(//this seems slightly faster in some configurations\nRuntime.getRuntime().availableProcessors() * 2).setSocketOption(Options.BACKLOG, 10000).setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, //don't send a keep-alive header for HTTP/1.1 requests, as it is not required\nfalse).setServerOption(UndertowOptions.ALWAYS_SET_DATE, true).setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false).setSocketOption(Options.SSL_ENABLED_PROTOCOLS, Sequence.of(\"TLSv1.2\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getProtocol()","methodName":"getProtocol","lineNumber":["242","457","495"],"fullExpression":"reference.get().getProtocol()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"getCompactSerialization()","methodName":"getCompactSerialization","lineNumber":["973"],"fullExpression":"jws.getCompactSerialization()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientIT","methodSignature":"getPrivateKey(java.lang.String, java.lang.String, java.lang.String)","methodName":"getPrivateKey","lineNumber":["952"],"fullExpression":"getPrivateKey(\"/config/primary.jks\", \"password\", \"selfsigned\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["115"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestReceiver()","methodName":"getRequestReceiver","lineNumber":["147","153","178"],"fullExpression":"exchange.getRequestReceiver()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Receiver","methodSignature":"receiveFullString(io.undertow.io.Receiver.FullStringCallback)","methodName":"receiveFullString","lineNumber":["147","153","178"],"fullExpression":"exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n\n    @Override\n    public void handle(HttpServerExchange exchange, String message) {\n        exchange.getResponseSender().send(message);\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.StringReadChannelListener","methodSignature":"setup(org.xnio.channels.StreamSourceChannel)","methodName":"setup","lineNumber":["308","535","608"],"fullExpression":"new StringReadChannelListener(Http2Client.BUFFER_POOL) {\n\n    @Override\n    protected void stringDone(String string) {\n        responses.add(string);\n        latch.countDown();\n    }\n\n    @Override\n    protected void error(IOException e) {\n        e.printStackTrace();\n        latch.countDown();\n    }\n}.setup(result.getResponseChannel())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setAlgorithmHeaderValue(java.lang.String)","methodName":"setAlgorithmHeaderValue","lineNumber":["968"],"fullExpression":"jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client-config/src/main/java/com/networknt/client/ClientConfig.java":[{"declaringType":"com.networknt.client.ClientConfig","methodSignature":"load()","methodName":"load","lineNumber":["95","106"],"fullExpression":"load()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.ClientConfig","methodSignature":"setTlsConfig()","methodName":"setTlsConfig","lineNumber":["113","125"],"fullExpression":"setTlsConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.ClientConfig","methodSignature":"setRequestConfig()","methodName":"setRequestConfig","lineNumber":["112","124"],"fullExpression":"setRequestConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.ClientConfig","methodSignature":"setPathPrefixServices()","methodName":"setPathPrefixServices","lineNumber":["116","128"],"fullExpression":"setPathPrefixServices()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["13"],"fullExpression":"LoggerFactory.getLogger(ClientConfig.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.ClientConfig","methodSignature":"setOAuthConfig()","methodName":"setOAuthConfig","lineNumber":["114","126"],"fullExpression":"setOAuthConfig()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["211","214"],"fullExpression":"logger.error(\"The serviceIdAuthServers in client.yml is not a map or a JSON string.\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/EWMATest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"offset(java.lang.Double)","methodName":"offset","lineNumber":["35","39","43","47","51","55","59","63","67","71","75","79","83","87","91","95","104","108","112","116","120","124","128","132","136","140","144","148","152","156","160","164","173","177","181","185","189","193","197","201","205","209","213","217","221","225","229","233"],"fullExpression":"offset(0.000001)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server/src/test/java/com/networknt/server/RegistryTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["70","84"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["44"],"fullExpression":"LoggerFactory.getLogger(RegistryTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.server.RegistryTest","methodSignature":"addURL(java.net.URL)","methodName":"addURL","lineNumber":["66"],"fullExpression":"addURL(new File(homeDir).toURI().toURL())","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/correlation/src/main/java/com/networknt/correlation/CorrelationHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["58","73","126"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["107"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["58","74","127"],"fullExpression":"logger.info(\"CorrelationHandler is loaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["63","96"],"fullExpression":"logger.debug(\"CorrelationHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["93"],"fullExpression":"logger.trace(\"Request Headers: \" + sb)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["63","96"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["86"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["49"],"fullExpression":"LoggerFactory.getLogger(CorrelationHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["65","71","72","88"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.MDC","methodSignature":"put(java.lang.String, java.lang.String)","methodName":"put","lineNumber":["79"],"fullExpression":"MDC.put(CID, cId)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"getHeaderName()","methodName":"getHeaderName","lineNumber":["90"],"fullExpression":"header.getHeaderName()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/caffeine-cache/src/test/java/com/networknt/cache/DefaultCacheManagerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNull(java.lang.Object)","methodName":"assertNull","lineNumber":["16"],"fullExpression":"Assert.assertNull(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["13","25"],"fullExpression":"Assert.assertEquals(\"value\", value)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/MetricRegistry.java":[{"declaringType":"io.dropwizard.metrics.MetricRegistry","methodSignature":"name(java.lang.String, java.lang.String...)","methodName":"name","lineNumber":["48"],"fullExpression":"name(klass.getName(), names)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.MetricRegistry.MetricBuilder","methodSignature":"newMetric()","methodName":"newMetric","lineNumber":["404"],"fullExpression":"builder.newMetric()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/exception/src/test/java/com/networknt/exception/ExceptionHandlerTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["57","79"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["62"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["78"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["121","149","181","207"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["62"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["112","140","172"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["86"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["123","151","183","209"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["112","140","172"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["111","139","171","198"],"fullExpression":"new ClientRequest().setPath(\"/normal\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["116","144","176","202"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["66"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["85"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["86"],"fullExpression":"exchange.getResponseSender().send(\"normal\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["119","147","179","205"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["62"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["111","139","171","198"],"fullExpression":"new ClientRequest().setPath(\"/normal\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["50"],"fullExpression":"LoggerFactory.getLogger(ExceptionHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["62"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.exception.ExceptionHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["58"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["124"],"fullExpression":"Assert.assertEquals(\"normal\", body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["85","85","85","85"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/normal\", exchange -> exchange.getResponseSender().send(\"normal\")).add(Methods.GET, \"/runtime\", exchange -> {\n    int i = 1 / 0;\n}).add(Methods.GET, \"/api\", exchange -> {\n    Status error = new Status(\"ERR10001\");\n    throw new ApiException(error);\n}).add(Methods.GET, \"/uncaught\", exchange -> {\n    String content = new Scanner(new File(\"djfkjoiwejjhh9032d\")).useDelimiter(\"\\\\Z\").next();\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/traceability/src/test/java/com/networknt/traceability/TraceabilityHandlerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["114","148","192"],"fullExpression":"Assert.assertNotNull(body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["60"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.traceability.TraceabilityHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["56"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["76"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["60"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["83","84"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["111","145","189"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["100","134","173","174","176"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["64"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["82"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["83","84"],"fullExpression":"exchange.getResponseSender().send(\"get\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["108","142","186"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNull(java.lang.Object)","methodName":"assertNull","lineNumber":["151"],"fullExpression":"Assert.assertNull(tid)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["60"],"fullExpression":"Undertow.builder().addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["99","133","172"],"fullExpression":"new ClientRequest().setPath(\"/get\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["48"],"fullExpression":"LoggerFactory.getLogger(TraceabilityHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["82","82"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/get\", exchange -> exchange.getResponseSender().send(\"get\")).add(Methods.POST, \"/post\", exchange -> exchange.getResponseSender().send(\"post\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["169"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(\"/post\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n        request.getRequestHeaders().put(HttpStringConstants.TRACEABILITY_ID, \"12345\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, post));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["55","77"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["110","144","188"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["100","101","134","173","174","175","176"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["116","150","194"],"fullExpression":"reference.get().getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["99","133","172"],"fullExpression":"new ClientRequest().setPath(\"/get\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["105","139","183"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["169"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["60"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["115","117","149","193","195"],"fullExpression":"Assert.assertEquals(\"get\", body)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/Http2ClientBase.java":[{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKey(java.security.Key)","methodName":"setKey","lineNumber":["140"],"fullExpression":"jws.setKey(privateKey)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setKeyIdHeaderValue(java.lang.String)","methodName":"setKeyIdHeaderValue","lineNumber":["141"],"fullExpression":"jws.setKeyIdHeaderValue(\"100\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setDisableRequireSignature()","methodName":"setDisableRequireSignature","lineNumber":["86"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientBase","methodSignature":"getPrivateKey(java.lang.String, java.lang.String, java.lang.String)","methodName":"getPrivateKey","lineNumber":["128"],"fullExpression":"getPrivateKey(\"/config/primary.jks\", \"password\", \"selfsigned\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setIssuedAtToNow()","methodName":"setIssuedAtToNow","lineNumber":["186"],"fullExpression":"claims.setIssuedAtToNow()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientBase","methodSignature":"getTestClaims()","methodName":"getTestClaims","lineNumber":["175"],"fullExpression":"getTestClaims()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtContext","methodSignature":"getJwtClaims()","methodName":"getJwtClaims","lineNumber":["93"],"fullExpression":"jwtContext.getJwtClaims()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["47"],"fullExpression":"IoUtils.safeClose(stream)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipAllValidators()","methodName":"setSkipAllValidators","lineNumber":["86"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setStringListClaim(java.lang.String, java.util.List<java.lang.String>)","methodName":"setStringListClaim","lineNumber":["194"],"fullExpression":"claims.setStringListClaim(\"scope\", scope)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"fromMilliseconds(long)","methodName":"fromMilliseconds","lineNumber":["176"],"fullExpression":"NumericDate.fromMilliseconds(System.currentTimeMillis() + expiredInSeconds * 1000)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"now()","methodName":"now","lineNumber":["96"],"fullExpression":"NumericDate.now()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setExpirationTime(org.jose4j.jwt.NumericDate)","methodName":"setExpirationTime","lineNumber":["176"],"fullExpression":"claims.setExpirationTime(NumericDate.fromMilliseconds(System.currentTimeMillis() + expiredInSeconds * 1000))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["30"],"fullExpression":"LoggerFactory.getLogger(Http2ClientBase.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["86"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification().build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["168"],"fullExpression":"logger.error(\"Failed to retrieve private key from keystore\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientBase","methodSignature":"getJwtFromAuthorization(java.lang.String)","methodName":"getJwtFromAuthorization","lineNumber":["83"],"fullExpression":"getJwtFromAuthorization(authorization)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientBase","methodSignature":"getJwt(org.jose4j.jwt.JwtClaims)","methodName":"getJwt","lineNumber":["177"],"fullExpression":"getJwt(claims)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"getExpirationTime()","methodName":"getExpirationTime","lineNumber":["96"],"fullExpression":"jwtClaims.getExpirationTime()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.Http2ClientBase","methodSignature":"createClient(org.xnio.OptionMap)","methodName":"createClient","lineNumber":["199"],"fullExpression":"createClient(OptionMap.EMPTY)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setNotBeforeMinutesInThePast(float)","methodName":"setNotBeforeMinutesInThePast","lineNumber":["187"],"fullExpression":"claims.setNotBeforeMinutesInThePast(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.NumericDate","methodSignature":"getValue()","methodName":"getValue","lineNumber":["96","96"],"fullExpression":"NumericDate.now().getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["100","164"],"fullExpression":"logger.error(\"MalformedClaimException:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setIssuer(java.lang.String)","methodName":"setIssuer","lineNumber":["182"],"fullExpression":"claims.setIssuer(\"urn:com:networknt:oauth2:v1\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumerBuilder","methodSignature":"setSkipSignatureVerification()","methodName":"setSkipSignatureVerification","lineNumber":["86"],"fullExpression":"new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setAudience(java.lang.String)","methodName":"setAudience","lineNumber":["183"],"fullExpression":"claims.setAudience(\"urn:com.networknt\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"toJson()","methodName":"toJson","lineNumber":["137"],"fullExpression":"claims.toJson()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"setPayload(java.lang.String)","methodName":"setPayload","lineNumber":["137"],"fullExpression":"jws.setPayload(claims.toJson())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setExpirationTimeMinutesInTheFuture(float)","methodName":"setExpirationTimeMinutesInTheFuture","lineNumber":["184"],"fullExpression":"claims.setExpirationTimeMinutesInTheFuture(10)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setGeneratedJwtId()","methodName":"setGeneratedJwtId","lineNumber":["185"],"fullExpression":"claims.setGeneratedJwtId()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jws.JsonWebSignature","methodSignature":"getCompactSerialization()","methodName":"getCompactSerialization","lineNumber":["149"],"fullExpression":"jws.getCompactSerialization()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.JwtClaims","methodSignature":"setClaim(java.lang.String, java.lang.Object)","methodName":"setClaim","lineNumber":["188","190","191","192"],"fullExpression":"claims.setClaim(\"version\", \"1.0\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwt.consumer.JwtConsumer","methodSignature":"process(java.lang.String)","methodName":"process","lineNumber":["92"],"fullExpression":"consumer.process(jwt)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwx.JsonWebStructure","methodSignature":"setAlgorithmHeaderValue(java.lang.String)","methodName":"setAlgorithmHeaderValue","lineNumber":["144"],"fullExpression":"jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/health/src/main/java/com/networknt/health/HealthGetHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["89"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["63","65"],"fullExpression":"exchange.getResponseSender().send(HEALTH_RESULT_OK_JSON)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["56"],"fullExpression":"logger.trace(\"HealthGetHandler is constructed.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["89"],"fullExpression":"logger.info(\"HealthGetHandler is reloaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.health.HealthGetHandler.HealthResult","methodSignature":"setResult(java.lang.String)","methodName":"setResult","lineNumber":["74"],"fullExpression":"setResult(result)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["62"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["56"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["63","65"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["49"],"fullExpression":"LoggerFactory.getLogger(HealthGetHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["62"],"fullExpression":"exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server/src/test/java/com/networknt/server/ServerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["78"],"fullExpression":"Assert.assertNotNull(body)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["73"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["75"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["65"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["77"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["58"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["64"],"fullExpression":"new ClientRequest().setPath(\"/test\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["65"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["64"],"fullExpression":"new ClientRequest().setPath(\"/test\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["70"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/org/apache/hc/core5/http/message/copied/TokenParser.java":[{"declaringType":"org.apache.hc.core5.http.message.copied.TokenParser","methodSignature":"isWhitespace(char)","methodName":"isWhitespace","lineNumber":["88","111","146","174","204"],"fullExpression":"isWhitespace(current)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/listener/ByteBufferReadChannelListener.java":[{"declaringType":"org.xnio.ChannelListener.Setter","methodSignature":"set(org.xnio.ChannelListener<? super T>)","methodName":"set","lineNumber":["36"],"fullExpression":"channel.getReadSetter().set(this)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["40","73"],"fullExpression":"IoUtils.safeClose(channel)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.connector.PooledByteBuffer","methodSignature":"getBuffer()","methodName":"getBuffer","lineNumber":["29","62"],"fullExpression":"resource.getBuffer()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.StreamSourceChannel","methodSignature":"getReadSetter()","methodName":"getReadSetter","lineNumber":["36"],"fullExpression":"channel.getReadSetter()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.channels.SuspendableReadChannel","methodSignature":"resumeReads()","methodName":"resumeReads","lineNumber":["37"],"fullExpression":"channel.resumeReads()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.listener.ByteBufferReadChannelListener","methodSignature":"bufferDone(java.util.List<java.lang.Byte>)","methodName":"bufferDone","lineNumber":["39","72"],"fullExpression":"this.bufferDone(this.result)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.connector.PooledByteBuffer","methodSignature":"close()","methodName":"close","lineNumber":["55","88"],"fullExpression":"resource.close()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.connector.ByteBufferPool","methodSignature":"allocate()","methodName":"allocate","lineNumber":["28","61"],"fullExpression":"this.bufferPool.allocate()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.listener.ByteBufferReadChannelListener","methodSignature":"error(java.io.IOException)","methodName":"error","lineNumber":["53","86"],"fullExpression":"this.error(var8)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/TimerTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"offset(java.lang.Double)","methodName":"offset","lineNumber":["51","54","57","60"],"fullExpression":"offset(0.001)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["81"],"fullExpression":"assertThat(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["81"],"fullExpression":"assertThat(value).isEqualTo(\"one\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["95"],"fullExpression":"assertThat(called[0])","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["95"],"fullExpression":"assertThat(called[0]).isTrue()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerInterceptor.java":[{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setRequestURI(java.lang.String)","methodName":"setRequestURI","lineNumber":["172"],"fullExpression":"exchange.setRequestURI(requestURI)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["58"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["88","99","101","107","108","138","148","151","154"],"fullExpression":"logger.debug(\"request can be transformed since no Expect headers found\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.protocol.http.HttpContinue","methodSignature":"requiresContinueResponse(io.undertow.util.HeaderMap)","methodName":"requiresContinueResponse","lineNumber":["87"],"fullExpression":"HttpContinue.requiresContinueResponse(exchange.getRequestHeaders())","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getConnection()","methodName":"getConnection","lineNumber":["215"],"fullExpression":"exchange.getConnection()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["246","257"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["77","134","141","162","168","173","180","193","200","245","256"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ServerConnection","methodSignature":"getByteBufferPool()","methodName":"getByteBufferPool","lineNumber":["215"],"fullExpression":"exchange.getConnection().getByteBufferPool()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["248","259"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["201"],"fullExpression":"exchange.getRequestHeaders().put(new HttpString(k), (String) v)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["84","123"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["248","259"],"fullExpression":"exchange.getResponseSender().send(responseBody)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["83","88","99","101","106","108","138","148","151","154","268"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestURI()","methodName":"getRequestURI","lineNumber":["98","100","122"],"fullExpression":"exchange.getRequestURI()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setRequestPath(java.lang.String)","methodName":"setRequestPath","lineNumber":["167"],"fullExpression":"exchange.setRequestPath(reqPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.connector.PooledByteBuffer","methodSignature":"getBuffer()","methodName":"getBuffer","lineNumber":["216","218","234"],"fullExpression":"requestData[pidx].getBuffer()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["86","98","100"],"fullExpression":"exchange.getRequestMethod().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["39"],"fullExpression":"LoggerFactory.getLogger(RequestTransformerInterceptor.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.reqtrans.RequestTransformerInterceptor","methodSignature":"getBuffer(io.undertow.server.HttpServerExchange)","methodName":"getBuffer","lineNumber":["135","209"],"fullExpression":"this.getBuffer(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setStatusCode(int)","methodName":"setStatusCode","lineNumber":["247","258"],"fullExpression":"exchange.setStatusCode(Objects.requireNonNullElse((Integer) result.get(\"statusCode\"), 200))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Buffers","methodSignature":"copy(java.nio.ByteBuffer, java.nio.ByteBuffer)","methodName":"copy","lineNumber":["221"],"fullExpression":"Buffers.copy(_dest, overwriteData)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["93"],"fullExpression":"logger.error(\"RuleLoaderStartupHook endpointRules is null\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, long)","methodName":"put","lineNumber":["237"],"fullExpression":"exchange.getRequestHeaders().put(Headers.CONTENT_LENGTH, length)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["46"],"fullExpression":"logger.info(\"RequestTransformerHandler is loaded\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["77","83","134","141","162","168","173","180","193","200","245","256","268"],"fullExpression":"logger.trace(\"RequestTransformerInterceptor is reloaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"setQueryString(java.lang.String)","methodName":"setQueryString","lineNumber":["182"],"fullExpression":"exchange.setQueryString(queryString)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"remove(java.lang.String)","methodName":"remove","lineNumber":["194"],"fullExpression":"exchange.getRequestHeaders().remove(s)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"isRequestComplete()","methodName":"isRequestComplete","lineNumber":["124"],"fullExpression":"exchange.isRequestComplete()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["86","98","100"],"fullExpression":"exchange.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestURL()","methodName":"getRequestURL","lineNumber":["121"],"fullExpression":"exchange.getRequestURL()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["46"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getPathParameters()","methodName":"getPathParameters","lineNumber":["119"],"fullExpression":"exchange.getPathParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getQueryParameters()","methodName":"getQueryParameters","lineNumber":["118"],"fullExpression":"exchange.getQueryParameters()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"add(io.undertow.util.HttpString, java.lang.String)","methodName":"add","lineNumber":["246","257"],"fullExpression":"exchange.getResponseHeaders().add(Headers.CONTENT_TYPE, Objects.requireNonNullElse((String) result.get(\"contentType\"), \"application/json\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["87","116","117","133","194","201","237"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.connector.ByteBufferPool","methodSignature":"allocate()","methodName":"allocate","lineNumber":["215"],"fullExpression":"exchange.getConnection().getByteBufferPool().allocate()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/test/java/io/dropwizard/metrics/influxdb/InfluxDbReporterTest.java":[{"declaringType":"org.mockito.MockitoAnnotations","methodSignature":"initMocks(java.lang.Object)","methodName":"initMocks","lineNumber":["54"],"fullExpression":"MockitoAnnotations.initMocks(this)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.influxdb.InfluxDbReporterTest","methodSignature":"gauge(T)","methodName":"gauge","lineNumber":["205","221","237","253","270"],"fullExpression":"gauge(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"atLeastOnce()","methodName":"atLeastOnce","lineNumber":["71","104","137","178","208","224","240","256","273"],"fullExpression":"atLeastOnce()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.influxdb.InfluxDbReporterTest","methodSignature":"map()","methodName":"map","lineNumber":["69","69","69","69","101","101","101","101","134","134","134","134","175","175","175","175","205","205","205","205","221","221","221","221","237","237","237","237","253","253","253","253","270","270","270","270"],"fullExpression":"this.map()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/cors/src/main/java/com/networknt/cors/CorsHttpHandler.java":[{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"get(io.undertow.util.HttpString)","methodName":"get","lineNumber":["87"],"fullExpression":"headers.get(Headers.ORIGIN)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["111"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"contains(io.undertow.util.HttpString)","methodName":"contains","lineNumber":["85"],"fullExpression":"headers.contains(Headers.ORIGIN)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"isEmpty()","methodName":"isEmpty","lineNumber":["93"],"fullExpression":"requestedHeaders.isEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["87","88","91","94","96","97","98","100","101"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.cors.CorsHttpHandler","methodSignature":"handlePreflightRequest(io.undertow.server.HttpServerExchange)","methodName":"handlePreflightRequest","lineNumber":["69"],"fullExpression":"handlePreflightRequest(exchange)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"add(io.undertow.util.HttpString, java.lang.String)","methodName":"add","lineNumber":["88"],"fullExpression":"exchange.getResponseHeaders().add(Headers.VARY, Headers.ORIGIN_STRING)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["66","84"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.cors.CorsHttpHandler","methodSignature":"setCorsResponseHeaders(io.undertow.server.HttpServerExchange)","methodName":"setCorsResponseHeaders","lineNumber":["72","79"],"fullExpression":"setCorsResponseHeaders(exchange)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/service/src/test/java/com/networknt/service/SingletonServiceFactoryTest.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["32"],"fullExpression":"LoggerFactory.getLogger(SingletonServiceFactoryTest.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/main/java/com/networknt/config/CentralizedManagement.java":[{"declaringType":"com.networknt.config.CentralizedManagement","methodSignature":"convertMapToObj(java.util.Map<java.lang.String, java.lang.Object>, java.lang.Class)","methodName":"convertMapToObj","lineNumber":["45"],"fullExpression":"convertMapToObj((Map<String, Object>) config, clazz)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.CentralizedManagement","methodSignature":"merge(boolean, java.lang.Object)","methodName":"merge","lineNumber":["40","44","58","82"],"fullExpression":"merge(decrypt, config)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"convertValue(java.lang.Object, java.lang.Class<T>)","methodName":"convertValue","lineNumber":["108"],"fullExpression":"mapper.convertValue(map, clazz)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.CentralizedManagement","methodSignature":"validateInjectedFieldName(java.lang.String, java.lang.Object)","methodName":"validateInjectedFieldName","lineNumber":["70"],"fullExpression":"validateInjectedFieldName(fieldName, injectedFieldName)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/http-entity/src/main/java/com/networknt/http/HttpStatus.java":[{"declaringType":"com.networknt.http.HttpStatus","methodSignature":"is4xxClientError()","methodName":"is4xxClientError","lineNumber":["498"],"fullExpression":"is4xxClientError()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.HttpStatus","methodSignature":"is5xxServerError()","methodName":"is5xxServerError","lineNumber":["498"],"fullExpression":"is5xxServerError()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.HttpStatus.Series","methodSignature":"resolve(int)","methodName":"resolve","lineNumber":["573"],"fullExpression":"resolve(statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.HttpStatus","methodSignature":"values()","methodName":"values","lineNumber":["531"],"fullExpression":"values()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.HttpStatus","methodSignature":"resolve(int)","methodName":"resolve","lineNumber":["517"],"fullExpression":"resolve(statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.HttpStatus","methodSignature":"series()","methodName":"series","lineNumber":["436","448","460","472","484"],"fullExpression":"series()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.http.HttpStatus.Series","methodSignature":"values()","methodName":"values","lineNumber":["588"],"fullExpression":"values()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/CachedGauge.java":[{"declaringType":"io.dropwizard.metrics.CachedGauge","methodSignature":"shouldLoad()","methodName":"shouldLoad","lineNumber":["66"],"fullExpression":"shouldLoad()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.CachedGauge","methodSignature":"getValue()","methodName":"getValue","lineNumber":["87"],"fullExpression":"this.getValue()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.CachedGauge","methodSignature":"loadValue()","methodName":"loadValue","lineNumber":["67"],"fullExpression":"loadValue()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["77"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.ExternalServiceHandler","methodSignature":"handleHttpClientUrl(io.undertow.server.HttpServerExchange, java.net.http.HttpRequest.Builder, java.lang.String, java.lang.String)","methodName":"handleHttpClientUrl","lineNumber":["149"],"fullExpression":"this.handleHttpClientUrl(exchange, requestBuilder, requestPath, requestHost)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["111","177","206","215"],"fullExpression":"logger.debug(\"ExternalServiceHandler.handleRequest starts.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getQueryString()","methodName":"getQueryString","lineNumber":["142","297"],"fullExpression":"exchange.getQueryString()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["199"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["114","119","128","198","208","226","229"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["205"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["113","133","136"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"endExchange()","methodName":"endExchange","lineNumber":["180","186"],"fullExpression":"exchange.endExchange()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"fastIterateNonEmpty()","methodName":"fastIterateNonEmpty","lineNumber":["220"],"fullExpression":"headerMap.fastIterateNonEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"getFirst()","methodName":"getFirst","lineNumber":["225","226"],"fullExpression":"values.getFirst()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object...)","methodName":"trace","lineNumber":["144"],"fullExpression":"logger.trace(\"External Service Request Info: host = '{}', method = '{}', requestPath = '{}', queryString = '{}'\", requestHost, method, requestPath, queryString)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["111","206","215"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.ExternalServiceHandler","methodSignature":"handleBufferedRequestBody(io.undertow.server.HttpServerExchange, java.net.http.HttpRequest.Builder, java.lang.String)","methodName":"handleBufferedRequestBody","lineNumber":["164","168","172"],"fullExpression":"this.handleBufferedRequestBody(exchange, requestBuilder, \"POST\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["118","140","225","226"],"fullExpression":"exchange.getRequestMethod().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.nio.ByteBuffer)","methodName":"send","lineNumber":["205"],"fullExpression":"exchange.getResponseSender().send(ByteBuffer.wrap(responseBody))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["48"],"fullExpression":"LoggerFactory.getLogger(ExternalServiceHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["64","102"],"fullExpression":"logger.error(\"An instance of MetricsHandler is not configured in the handler.yml.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"fiNextNonEmpty(long)","methodName":"fiNextNonEmpty","lineNumber":["231"],"fullExpression":"headerMap.fiNextNonEmpty(f)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Throwable)","methodName":"trace","lineNumber":["229"],"fullExpression":"logger.trace(\"Ignore the exception:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["67","106"],"fullExpression":"logger.info(\"ExternalServiceConfig is loaded.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["114","119","128","198","226","320"],"fullExpression":"logger.trace(\"original requestPath = \" + requestPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.ExternalServiceHandler","methodSignature":"copyHeaders(io.undertow.util.HeaderMap, java.net.http.HttpRequest.Builder)","methodName":"copyHeaders","lineNumber":["152"],"fullExpression":"copyHeaders(exchange.getRequestHeaders(), requestBuilder)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["118","140"],"fullExpression":"exchange.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["277"],"fullExpression":"logger.error(\"Cannot create HttpClient:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"fiCurrent(long)","methodName":"fiCurrent","lineNumber":["223"],"fullExpression":"headerMap.fiCurrent(f)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["67","106"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.ExternalServiceHandler","methodSignature":"createJavaHttpClient()","methodName":"createJavaHttpClient","lineNumber":["184"],"fullExpression":"this.createJavaHttpClient()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.proxy.ExternalServiceHandler","methodSignature":"buildRequestForMethod(java.net.http.HttpRequest.Builder, java.net.http.HttpRequest.BodyPublisher, java.lang.String)","methodName":"buildRequestForMethod","lineNumber":["328","333"],"fullExpression":"buildRequestForMethod(builder, HttpRequest.BodyPublishers.ofByteArray(bodyBytes), method)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["327"],"fullExpression":"logger.trace(\"Grabbed byte[] with length = '{}' bytes from PooledByteBuffer\", bodyBytes.length)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"error","lineNumber":["175"],"fullExpression":"logger.error(\"wrong http method {} for request path {}\", method, requestPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"add(io.undertow.util.HttpString, java.lang.String)","methodName":"add","lineNumber":["199"],"fullExpression":"exchange.getResponseHeaders().add(new HttpString(header.getKey()), s)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["152"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"getHeaderName()","methodName":"getHeaderName","lineNumber":["225","226"],"fullExpression":"values.getHeaderName()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/egress-router/src/test/java/com/networknt/router/middleware/TokenHandlerTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["39","62"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"build()","methodName":"build","lineNumber":["44"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\").setHandler(handler).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["61"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["100","134"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["44"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["90","91","123","124","125"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["69","72"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["102","137"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setServerOption(org.xnio.Option<T>, T)","methodName":"setServerOption","lineNumber":["44"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["83","115"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["91","123","124","125"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["89","122"],"fullExpression":"new ClientRequest().setPath(\"/service1\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["95","129"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["49"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["67"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["69","72"],"fullExpression":"exchange.getResponseSender().send(\"POST OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["98","132"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.router.middleware.TokenHandlerTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["40"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"setHandler(io.undertow.server.HttpHandler)","methodName":"setHandler","lineNumber":["44"],"fullExpression":"Undertow.builder().setServerOption(UndertowOptions.ENABLE_HTTP2, true).addHttpListener(7080, \"localhost\").setHandler(handler)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["89","122"],"fullExpression":"new ClientRequest().setPath(\"/service1\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["33"],"fullExpression":"LoggerFactory.getLogger(TokenHandlerTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["44"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["104"],"fullExpression":"Assert.assertEquals(\"GET OK\", body)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["67","67"],"fullExpression":"Handlers.routing().add(Methods.POST, \"/\", exchange -> {\n    exchange.getResponseSender().send(\"POST OK\");\n}).add(Methods.GET, \"/\", exchange -> {\n    exchange.getResponseSender().send(\"GET OK\");\n})","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/test/java/com/networknt/config/ConfigEscapeTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["29","35","41","47"],"fullExpression":"Assert.assertEquals(\"abc$defg\", passwordMap.get(\"password\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/security/src/main/java/com/networknt/security/KeyUtil.java":[{"declaringType":"org.jose4j.jwk.JsonWebKey","methodSignature":"setKeyId(java.lang.String)","methodName":"setKeyId","lineNumber":["64","68","73"],"fullExpression":"jwk.setKeyId(longKeyId)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["23"],"fullExpression":"LoggerFactory.getLogger(KeyUtil.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["77"],"fullExpression":"logger.error(\"Exception:\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwk.PublicJsonWebKey.Factory","methodSignature":"newPublicJwk(java.security.Key)","methodName":"newPublicJwk","lineNumber":["63","67","72"],"fullExpression":"PublicJsonWebKey.Factory.newPublicJwk(longKey)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.jose4j.jwk.JsonWebKeySet","methodSignature":"toJson(org.jose4j.jwk.JsonWebKey.OutputControlLevel)","methodName":"toJson","lineNumber":["82"],"fullExpression":"jwks.toJson(JsonWebKey.OutputControlLevel.PUBLIC_ONLY)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/portal-registry/src/main/java/com/networknt/portal/registry/PortalRegistryHeartbeatManager.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["110","129"],"fullExpression":"logger.info(\"heartbeat switcher change to \" + switcherStatus)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.portal.registry.PortalRegistryHeartbeatManager","methodSignature":"processHeartbeat(boolean)","methodName":"processHeartbeat","lineNumber":["79","84"],"fullExpression":"processHeartbeat(switcherStatus)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.portal.registry.PortalRegistryHeartbeatManager","methodSignature":"isHeartbeatOpen()","methodName":"isHeartbeatOpen","lineNumber":["77"],"fullExpression":"isHeartbeatOpen()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.portal.registry.PortalRegistryHeartbeatManager","methodSignature":"isSwitcherChange(boolean)","methodName":"isSwitcherChange","lineNumber":["78"],"fullExpression":"isSwitcherChange(switcherStatus)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["42"],"fullExpression":"LoggerFactory.getLogger(PortalRegistryHeartbeatManager.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["90"],"fullExpression":"logger.error(\"consul heartbeat executor err:\", e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/proxy-handler/src/main/java/com/networknt/handler/thread/LightThreadExecutor.java":[{"declaringType":"com.networknt.handler.thread.LightThreadExecutor","methodSignature":"updateExchangeContext()","methodName":"updateExchangeContext","lineNumber":["31"],"fullExpression":"this.updateExchangeContext()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/main/java/com/networknt/client/http/HttpRequestValue.java":[{"declaringType":"com.networknt.client.http.HttpRequestValue","methodSignature":"getBody()","methodName":"getBody","lineNumber":["66"],"fullExpression":"getBody()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/portal-registry/src/test/java/com/networknt/portal/registry/PortalRegistryUtilsTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["57"],"fullExpression":"assertEquals(testServiceId, tempServiceId)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/SlidingWindowReservoir.java":[{"declaringType":"io.dropwizard.metrics.SlidingWindowReservoir","methodSignature":"size()","methodName":"size","lineNumber":["51"],"fullExpression":"size()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/com/networknt/metrics/APMMetricsHandler.java":[{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["148"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["51"],"fullExpression":"logger.debug(\"APMMetricsHandler is constructed!\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["78","167"],"fullExpression":"logger.info(\"apmmetrics is enabled and reporter is started\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String)","methodName":"trace","lineNumber":["90","95"],"fullExpression":"logger.trace(\"auditInfo = \" + auditInfo)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isTraceEnabled()","methodName":"isTraceEnabled","lineNumber":["90","95","113","117","127"],"fullExpression":"logger.isTraceEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"trace","lineNumber":["113"],"fullExpression":"logger.trace(\"Extracted issuer {} from Original issuer {] is sent.\", iss, issuer)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["80"],"fullExpression":"logger.error(\"apmmetrics has failed to initialize APMEPAgentSender\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ExchangeCompletionListener.NextListener","methodSignature":"proceed()","methodName":"proceed","lineNumber":["134"],"fullExpression":"nextListener.proceed()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["167"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"addExchangeCompleteListener(io.undertow.server.ExchangeCompletionListener)","methodName":"addExchangeCompleteListener","lineNumber":["88"],"fullExpression":"exchange.addExchangeCompleteListener((exchange1, nextListener) -> {\n    Map<String, Object> auditInfo = exchange1.getAttachment(AttachmentConstants.AUDIT_INFO);\n    if (logger.isTraceEnabled())\n        logger.trace(\"auditInfo = \" + auditInfo);\n    if (auditInfo != null && !auditInfo.isEmpty()) {\n        Map<String, String> tags = new HashMap<>();\n        tags.put(\"endpoint\", (String) auditInfo.get(Constants.ENDPOINT_STRING));\n        String clientId = auditInfo.get(Constants.CLIENT_ID_STRING) != null ? (String) auditInfo.get(Constants.CLIENT_ID_STRING) : \"unknown\";\n        if (logger.isTraceEnabled())\n            logger.trace(\"clientId = \" + clientId);\n        tags.put(\"clientId\", clientId);\n        // scope client id will only be available if two token is used. For example, authorization code flow.\n        if (config.isSendScopeClientId()) {\n            tags.put(\"scopeClientId\", auditInfo.get(Constants.SCOPE_CLIENT_ID_STRING) != null ? (String) auditInfo.get(Constants.SCOPE_CLIENT_ID_STRING) : \"unknown\");\n        }\n        // caller id is the calling serviceId that is passed from the caller. It is not always available but some organizations enforce it.\n        if (config.isSendCallerId()) {\n            tags.put(\"callerId\", auditInfo.get(Constants.CALLER_ID_STRING) != null ? (String) auditInfo.get(Constants.CALLER_ID_STRING) : \"unknown\");\n        }\n        if (config.isSendIssuer()) {\n            String issuer = (String) auditInfo.get(Constants.ISSUER_CLAIMS);\n            if (issuer != null) {\n                // we need to send issuer as a tag. Do we need to apply regex to extract only a part of the issuer?\n                if (config.getIssuerRegex() != null) {\n                    Matcher matcher = pattern.matcher(issuer);\n                    if (matcher.find()) {\n                        String iss = matcher.group(1);\n                        if (logger.isTraceEnabled())\n                            logger.trace(\"Extracted issuer {} from Original issuer {] is sent.\", iss, issuer);\n                        tags.put(\"issuer\", iss != null ? iss : \"unknown\");\n                    }\n                } else {\n                    if (logger.isTraceEnabled())\n                        logger.trace(\"Original issuer {} is sent.\", issuer);\n                    tags.put(\"issuer\", issuer);\n                }\n            }\n        }\n        MetricName metricName = new MetricName(\"response_time\");\n        metricName = metricName.tagged(commonTags);\n        metricName = metricName.tagged(tags);\n        long time = Clock.defaultClock().getTick() - startTime;\n        registry.getOrAdd(metricName, MetricRegistry.MetricBuilder.TIMERS).update(time, TimeUnit.NANOSECONDS);\n        if (logger.isTraceEnabled())\n            logger.trace(\"metricName = \" + metricName + \" commonTags = \" + JsonMapper.toJson(commonTags) + \" tags = \" + JsonMapper.toJson(tags));\n        incCounterForStatusCode(exchange1.getStatusCode(), commonTags, tags);\n    } else {\n        // when we reach here, it will be in light-gateway so no specification is loaded on the server and also the security verification is failed.\n        // we need to come up with the endpoint at last to ensure we have some meaningful metrics info populated.\n        logger.error(\"auditInfo is null or empty. Please move the path prefix handler to the top of the handler chain after metrics.\");\n    }\n    nextListener.proceed();\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getStatusCode()","methodName":"getStatusCode","lineNumber":["128"],"fullExpression":"exchange1.getStatusCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["51","63"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"trace(java.lang.String, java.lang.Object)","methodName":"trace","lineNumber":["117"],"fullExpression":"logger.trace(\"Original issuer {} is sent.\", issuer)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["36"],"fullExpression":"LoggerFactory.getLogger(APMMetricsHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["132"],"fullExpression":"logger.error(\"auditInfo is null or empty. Please move the path prefix handler to the top of the handler chain after metrics.\")","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/basic-auth/src/test/java/com/networknt/basicauth/BearerNoUserTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["134"],"fullExpression":"Assert.assertNotNull(responseBody)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["60","82"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["81"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["130","161"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow.Builder","methodSignature":"addHttpListener(int, java.lang.String)","methodName":"addHttpListener","lineNumber":["65"],"fullExpression":"Undertow.builder().addHttpListener(17352, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["120","121","151","152"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.codec.binary.Base64","methodSignature":"encodeBase64(byte[])","methodName":"encodeBase64","lineNumber":["98"],"fullExpression":"Base64.encodeBase64(cred.getBytes(UTF_8))","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["87"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["132","163"],"fullExpression":"Assert.assertEquals(400, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["120","121","151","152"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["119","150"],"fullExpression":"new ClientRequest().setPath(\"/v2/wrong\").setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["125","156"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["69"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"routing()","methodName":"routing","lineNumber":["87"],"fullExpression":"Handlers.routing()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.BearerNoUserTest","methodSignature":"getTestHandler()","methodName":"getTestHandler","lineNumber":["61"],"fullExpression":"getTestHandler()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.io.Sender","methodSignature":"send(java.lang.String)","methodName":"send","lineNumber":["87"],"fullExpression":"exchange.getResponseSender().send(\"OK\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["128","159"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["119","150"],"fullExpression":"new ClientRequest().setPath(\"/v2/wrong\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"builder()","methodName":"builder","lineNumber":["65"],"fullExpression":"Undertow.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.basicauth.BearerNoUserTest","methodSignature":"encodeCredentialsFullFormat(java.lang.String, java.lang.String, java.lang.String)","methodName":"encodeCredentialsFullFormat","lineNumber":["104"],"fullExpression":"encodeCredentialsFullFormat(username, password, \":\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.RoutingHandler","methodSignature":"add(io.undertow.util.HttpString, java.lang.String, io.undertow.server.HttpHandler)","methodName":"add","lineNumber":["87"],"fullExpression":"Handlers.routing().add(Methods.GET, \"/v2/pet\", exchange -> exchange.getResponseSender().send(\"OK\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/logger-handler/src/main/java/com/networknt/logging/handler/LoggerGetHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["66"],"fullExpression":"logger.info(\"LoggerGetHandler is constructed.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["74","83","97","139","145","213","219"],"fullExpression":"logger.debug(\"logging is disabled\")","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Level","methodSignature":"toString()","methodName":"toString","lineNumber":["104"],"fullExpression":"log.getLevel().toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.logging.handler.LoggerGetHandler","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["133","207"],"fullExpression":"getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["137","211"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Logger","methodSignature":"getLevel()","methodName":"getLevel","lineNumber":["101","104"],"fullExpression":"log.getLevel()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseHeaders()","methodName":"getResponseHeaders","lineNumber":["87","108"],"fullExpression":"exchange.getResponseHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["134","208"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getResponseSender()","methodName":"getResponseSender","lineNumber":["88","109"],"fullExpression":"exchange.getResponseSender()","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.Logger","methodSignature":"getName()","methodName":"getName","lineNumber":["103"],"fullExpression":"log.getName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["125","199"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["134","208"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"ch.qos.logback.classic.LoggerContext","methodSignature":"getLoggerList()","methodName":"getLoggerList","lineNumber":["100"],"fullExpression":"lc.getLoggerList()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["133","207"],"fullExpression":"new ClientRequest().setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["66"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderValues","methodSignature":"getFirst()","methodName":"getFirst","lineNumber":["82"],"fullExpression":"passThroughObject.getFirst()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["74","83","97","139","145","213","219"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getILoggerFactory()","methodName":"getILoggerFactory","lineNumber":["99"],"fullExpression":"LoggerFactory.getILoggerFactory()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["133","207"],"fullExpression":"new ClientRequest().setMethod(Methods.GET).setPath(getRequestPath())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["57"],"fullExpression":"LoggerFactory.getLogger(LoggerGetHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["81"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.logging.handler.LoggerGetHandler","methodSignature":"getFrameworkLoggers(java.lang.String)","methodName":"getFrameworkLoggers","lineNumber":["146","220"],"fullExpression":"getFrameworkLoggers(body)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.logging.handler.LoggerGetHandler","methodSignature":"getBackendLogger()","methodName":"getBackendLogger","lineNumber":["85"],"fullExpression":"getBackendLogger()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/sanitizer/src/test/java/com/networknt/sanitizer/SanitizerHandlerWithIgnoreTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["96"],"fullExpression":"Assert.assertNotNull(body)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["133","166","199"],"fullExpression":"Assert.assertTrue(body.contains(\"<script>alert('header test')</script>\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.XnioExecutor","methodSignature":"execute(java.lang.Runnable)","methodName":"execute","lineNumber":["74"],"fullExpression":"connection.getIoThread().execute(new Runnable() {\n\n    @Override\n    public void run() {\n        final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(\"/body\");\n        request.getRequestHeaders().put(Headers.HOST, \"localhost\");\n        request.getRequestHeaders().put(Headers.CONTENT_TYPE, \"application/json\");\n        request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, \"chunked\");\n        connection.sendRequest(request, client.createClientCallback(reference, latch, post));\n    }\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["40","55"],"fullExpression":"logger.info(\"starting server\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"stop()","methodName":"stop","lineNumber":["54"],"fullExpression":"server.stop()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["92","130","163","196"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["78","79","80","120","121","153","154","186","187"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["93","132","165","198"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["78","79","80","120","121","153","154","186","187"],"fullExpression":"request.getRequestHeaders().put(Headers.HOST, \"localhost\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["77","119","152","185"],"fullExpression":"new ClientRequest().setMethod(Methods.POST)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["87","125","158","191"],"fullExpression":"logger.error(\"IOException: \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Undertow","methodSignature":"start()","methodName":"start","lineNumber":["42"],"fullExpression":"server.start()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientConnection","methodSignature":"getIoThread()","methodName":"getIoThread","lineNumber":["74"],"fullExpression":"connection.getIoThread()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.IoUtils","methodSignature":"safeClose(java.io.Closeable)","methodName":"safeClose","lineNumber":["90","128","161","194"],"fullExpression":"IoUtils.safeClose(connection)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["77","119","152","185"],"fullExpression":"new ClientRequest().setMethod(Methods.POST).setPath(\"/body\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["33"],"fullExpression":"LoggerFactory.getLogger(SanitizerHandlerWithIgnoreTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["98","99"],"fullExpression":"Assert.assertEquals(\"<script>alert(\\\\'test\\\\')</script>\", map.get(\"key2\"))","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/InstrumentedExecutorService.java":[{"declaringType":"io.dropwizard.metrics.InstrumentedExecutorService","methodSignature":"instrument(java.util.Collection<? extends java.util.concurrent.Callable<T>>)","methodName":"instrument","lineNumber":["137","153","169","184"],"fullExpression":"instrument(tasks)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/common/src/test/java/com/networknt/common/AESEncryptor.java":[{"declaringType":"com.networknt.common.AESEncryptor","methodSignature":"encrypt(java.lang.String)","methodName":"encrypt","lineNumber":["47"],"fullExpression":"encryptor.encrypt(args[0])","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/simplepool/TestRunner.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["149","152","157","158","161","164"],"fullExpression":"logger.debug(\"> Creating and starting threads...\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object)","methodName":"debug","lineNumber":["154","225","229","239","246"],"fullExpression":"logger.debug(\"> SLEEP for {} seconds\", testLength)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"debug","lineNumber":["233","266"],"fullExpression":"logger.debug(\"{} Connection issue occurred!\", Thread.currentThread().getName(), e)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.TestRunner.CallerThread","methodSignature":"reborrowWaitTime(long, long)","methodName":"reborrowWaitTime","lineNumber":["242"],"fullExpression":"reborrowWaitTime(reconnectTime, reconnectTimeJitter)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.TestRunner.CallerThread","methodSignature":"wait(java.lang.String, long, long)","methodName":"wait","lineNumber":["250","254"],"fullExpression":"wait(\"{} Borrowing connection for {} seconds...\", borrowTime, borrowJitter)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Throwable)","methodName":"debug","lineNumber":["166","269"],"fullExpression":"logger.debug(\"> Test had errors\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["32","192"],"fullExpression":"LoggerFactory.getLogger(TestRunner.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.client.simplepool.TestRunner.CallerThread","methodSignature":"borrowTime(long, long)","methodName":"borrowTime","lineNumber":["237"],"fullExpression":"borrowTime(borrowTime, borrowJitter)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/server-config/src/main/java/com/networknt/server/ServerConfig.java":[{"declaringType":"com.networknt.server.ServerConfig","methodSignature":"load()","methodName":"load","lineNumber":["112","123"],"fullExpression":"load()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["32"],"fullExpression":"LoggerFactory.getLogger(ServerConfig.class)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/ConsoleReporter.java":[{"declaringType":"io.dropwizard.metrics.ConsoleReporter","methodSignature":"printWithBanner(java.lang.String, char)","methodName":"printWithBanner","lineNumber":["190","194","203","212","221","230"],"fullExpression":"printWithBanner(dateTime, '=')","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/jaeger-tracing/src/main/java/com/networknt/jaeger/tracing/JaegerHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["64"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.Handlers","methodSignature":"handlerNotNull(io.undertow.server.HttpHandler)","methodName":"handlerNotNull","lineNumber":["134"],"fullExpression":"Handlers.handlerNotNull(next)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["64"],"fullExpression":"logger.info(\"JaegerHandler is constructed.\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"addExchangeCompleteListener(io.undertow.server.ExchangeCompletionListener)","methodName":"addExchangeCompleteListener","lineNumber":["116"],"fullExpression":"exchange.addExchangeCompleteListener((exchange1, nextListener) -> {\n    Span span = exchange1.getAttachment(ROOT_SPAN);\n    if (span != null) {\n        span.finish();\n    }\n    nextListener.proceed();\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HttpString","methodSignature":"toString()","methodName":"toString","lineNumber":["88"],"fullExpression":"key.toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["56"],"fullExpression":"LoggerFactory.getLogger(JaegerHandler.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestMethod()","methodName":"getRequestMethod","lineNumber":["82"],"fullExpression":"exchange.getRequestMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["85"],"fullExpression":"exchange.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ExchangeCompletionListener.NextListener","methodSignature":"proceed()","methodName":"proceed","lineNumber":["121"],"fullExpression":"nextListener.proceed()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getRequestPath()","methodName":"getRequestPath","lineNumber":["82"],"fullExpression":"exchange.getRequestPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getFirst(io.undertow.util.HttpString)","methodName":"getFirst","lineNumber":["88"],"fullExpression":"headerMap.getFirst(key)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"getHeaderNames()","methodName":"getHeaderNames","lineNumber":["87"],"fullExpression":"headerMap.getHeaderNames()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/consul/src/test/java/com/networknt/consul/MockUtils.java":[{"declaringType":"com.networknt.consul.MockUtils","methodSignature":"getMockUrl(java.lang.String, int)","methodName":"getMockUrl","lineNumber":["58"],"fullExpression":"getMockUrl(address, port)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/common/src/test/java/com/networknt/common/AESSaltEncryptor.java":[{"declaringType":"com.networknt.common.AESSaltEncryptor","methodSignature":"encrypt(java.lang.String)","methodName":"encrypt","lineNumber":["32"],"fullExpression":"encryptor.encrypt(args[0])","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.common.AESSaltEncryptor","methodSignature":"getSalt()","methodName":"getSalt","lineNumber":["48"],"fullExpression":"getSalt()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.common.AESSaltEncryptor","methodSignature":"toHex(byte[])","methodName":"toHex","lineNumber":["75","75"],"fullExpression":"toHex(salt)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/handler/src/main/java/com/networknt/handler/BuffersUtils.java":[{"declaringType":"io.undertow.server.HttpServerExchange","methodSignature":"getConnection()","methodName":"getConnection","lineNumber":["131","198","228"],"fullExpression":"exchange.getConnection()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["167"],"fullExpression":"LOG.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.connector.PooledByteBuffer","methodSignature":"getBuffer()","methodName":"getBuffer","lineNumber":["56","132","134","161","199","201","230","231"],"fullExpression":"src.getBuffer()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.BuffersUtils","methodSignature":"toByteArray(io.undertow.connector.PooledByteBuffer[])","methodName":"toByteArray","lineNumber":["107"],"fullExpression":"toByteArray(srcs)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.server.ServerConnection","methodSignature":"getByteBufferPool()","methodName":"getByteBufferPool","lineNumber":["131","198","228"],"fullExpression":"exchange.getConnection().getByteBufferPool()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["40"],"fullExpression":"LoggerFactory.getLogger(BuffersUtils.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isErrorEnabled()","methodName":"isErrorEnabled","lineNumber":["60","172"],"fullExpression":"LOG.isErrorEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object)","methodName":"error","lineNumber":["61"],"fullExpression":"LOG.error(\"Request content exceeeded {} bytes limit\", MAX_CONTENT_SIZE)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.handler.BuffersUtils","methodSignature":"toByteBuffer(io.undertow.connector.PooledByteBuffer[])","methodName":"toByteBuffer","lineNumber":["77","98"],"fullExpression":"toByteBuffer(src)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.Buffers","methodSignature":"copy(java.nio.ByteBuffer, java.nio.ByteBuffer)","methodName":"copy","lineNumber":["138","205"],"fullExpression":"Buffers.copy(_dest, src)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["173"],"fullExpression":"LOG.error(\"failed to dump buffered content\", ie)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.connector.ByteBufferPool","methodSignature":"allocate()","methodName":"allocate","lineNumber":["131","198","228"],"fullExpression":"exchange.getConnection().getByteBufferPool().allocate()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/registry/src/main/java/com/networknt/registry/support/AbstractRegistry.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"isInfoEnabled()","methodName":"isInfoEnabled","lineNumber":["75","91","103","114","160","171"],"fullExpression":"logger.isInfoEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Object)","methodName":"warn","lineNumber":["72","88","123"],"fullExpression":"logger.warn(\"[{}] register with malformed param, url is null\", registryClassName)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["42"],"fullExpression":"LoggerFactory.getLogger(AbstractRegistry.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.registry.support.AbstractRegistry","methodSignature":"getUrl()","methodName":"getUrl","lineNumber":["254"],"fullExpression":"getUrl()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/influxdb/InfluxDbReporter.java":[{"declaringType":"io.dropwizard.metrics.influxdb.InfluxDbReporter","methodSignature":"format(double)","methodName":"format","lineNumber":["275","277"],"fullExpression":"format(((Float) o).doubleValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["128"],"fullExpression":"logger.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.influxdb.InfluxDbReporter","methodSignature":"format(long)","methodName":"format","lineNumber":["279","281","283","285"],"fullExpression":"format(((Byte) o).longValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["106"],"fullExpression":"LoggerFactory.getLogger(InfluxDbReporter.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["162"],"fullExpression":"logger.error(\"Unable to report to InfluxDB. Discarding data.\", e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/metrics/src/main/java/io/dropwizard/metrics/HdrHistogramResetOnSnapshotReservoir.java":[{"declaringType":"org.HdrHistogram.Recorder","methodSignature":"recordValue(long)","methodName":"recordValue","lineNumber":["94"],"fullExpression":"recorder.recordValue(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.HdrHistogramResetOnSnapshotReservoir","methodSignature":"getDataSinceLastSnapshotAndReset()","methodName":"getDataSinceLastSnapshotAndReset","lineNumber":["102"],"fullExpression":"getDataSinceLastSnapshotAndReset()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.Recorder","methodSignature":"getIntervalHistogram()","methodName":"getIntervalHistogram","lineNumber":["83"],"fullExpression":"recorder.getIntervalHistogram()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.Recorder","methodSignature":"getIntervalHistogram(org.HdrHistogram.Histogram)","methodName":"getIntervalHistogram","lineNumber":["110"],"fullExpression":"recorder.getIntervalHistogram(intervalHistogram)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.HdrHistogram.Histogram","methodSignature":"copy()","methodName":"copy","lineNumber":["111"],"fullExpression":"intervalHistogram.copy()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.dropwizard.metrics.HdrHistogramResetOnSnapshotReservoir","methodSignature":"getSnapshot()","methodName":"getSnapshot","lineNumber":["89"],"fullExpression":"getSnapshot()","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/dump/src/main/java/com/networknt/dump/HeadersDumper.java":[{"declaringType":"com.networknt.dump.HeadersDumper","methodSignature":"putDumpInfoTo(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"putDumpInfoTo","lineNumber":["57","71"],"fullExpression":"this.putDumpInfoTo(result)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.dump.HeadersDumper","methodSignature":"dumpHeaders(io.undertow.util.HeaderMap)","methodName":"dumpHeaders","lineNumber":["53","67"],"fullExpression":"dumpHeaders(headers)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/portal-registry/src/test/java/com/networknt/portal/registry/PortalRegistryTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNull(java.lang.Object)","methodName":"assertNull","lineNumber":["171"],"fullExpression":"Assert.assertNull(tag)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["153"],"fullExpression":"Assert.assertEquals(nodes.size(), 0)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["140","154","159","160","170"],"fullExpression":"Assert.assertEquals(\"wss://localhost:8438\", u)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/test/java/com/networknt/config/ConfigSystemPropTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["55","56","57"],"fullExpression":"assertEquals(\"default dir\", map.get(\"value\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.networknt.config.ConfigSystemPropTest","methodSignature":"writeConfigFile(java.lang.String, java.lang.String, java.lang.String)","methodName":"writeConfigFile","lineNumber":["22","23","24"],"fullExpression":"writeConfigFile(\"value\", \"default dir\", homeDir)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/client/src/test/java/com/networknt/client/HttpRequestSSLContextTest.java":[{"declaringType":"io.undertow.client.ClientResponse","methodSignature":"getResponseCode()","methodName":"getResponseCode","lineNumber":["67","101"],"fullExpression":"reference.get().getResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"getRequestHeaders()","methodName":"getRequestHeaders","lineNumber":["57","91"],"fullExpression":"request.getRequestHeaders()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["102"],"fullExpression":"Assert.assertEquals(200, statusCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.xnio.OptionMap","methodSignature":"create(org.xnio.Option<T>, T)","methodName":"create","lineNumber":["46","81"],"fullExpression":"OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["54","89"],"fullExpression":"new ClientRequest().setPath(requestUri)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["27"],"fullExpression":"LoggerFactory.getLogger(HttpRequestSSLContextTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.util.HeaderMap","methodSignature":"put(io.undertow.util.HttpString, java.lang.String)","methodName":"put","lineNumber":["57","91"],"fullExpression":"request.getRequestHeaders().put(new HttpString(\"host\"), \"www.google.com\")","currentLayer":0,"declarationInfo":null},{"declaringType":"io.undertow.client.ClientRequest","methodSignature":"setMethod(io.undertow.util.HttpString)","methodName":"setMethod","lineNumber":["54","89"],"fullExpression":"new ClientRequest().setPath(requestUri).setMethod(Methods.GET)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["62","96"],"fullExpression":"logger.error(\"Exception: \", e)","currentLayer":0,"declarationInfo":null}],"Application/light-4j-master/config/src/main/java/com/networknt/config/JsonMapper.java":[{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"registerModule(com.fasterxml.jackson.databind.Module)","methodName":"registerModule","lineNumber":["40","41"],"fullExpression":"objectMapper.registerModule(new JavaTimeModule())","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"configure(com.fasterxml.jackson.databind.SerializationFeature, boolean)","methodName":"configure","lineNumber":["38"],"fullExpression":"objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"setSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include)","methodName":"setSerializationInclusion","lineNumber":["39"],"fullExpression":"objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"configure(com.fasterxml.jackson.core.JsonGenerator.Feature, boolean)","methodName":"configure","lineNumber":["36"],"fullExpression":"objectMapper.configure(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"writeValueAsString(java.lang.Object)","methodName":"writeValueAsString","lineNumber":["46"],"fullExpression":"objectMapper.writeValueAsString(x)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"readValue(java.lang.String, com.fasterxml.jackson.core.type.TypeReference<T>)","methodName":"readValue","lineNumber":["62","70"],"fullExpression":"objectMapper.readValue(s, new TypeReference<Map<String, Object>>() {\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"configure(com.fasterxml.jackson.databind.DeserializationFeature, boolean)","methodName":"configure","lineNumber":["37"],"fullExpression":"objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.fasterxml.jackson.databind.ObjectMapper","methodSignature":"readValue(java.lang.String, java.lang.Class<T>)","methodName":"readValue","lineNumber":["54"],"fullExpression":"objectMapper.readValue(json, targetType)","currentLayer":0,"declarationInfo":null}]}