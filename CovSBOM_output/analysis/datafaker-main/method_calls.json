{"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Friends.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23"],"fullExpression":"resolve(\"friends.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Text.java":[{"declaringType":"net.datafaker.providers.base.Text.TextSymbolsBuilder","methodSignature":"builder()","methodName":"builder","lineNumber":["75"],"fullExpression":"TextSymbolsBuilder.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text","methodSignature":"text(boolean)","methodName":"text","lineNumber":["33"],"fullExpression":"text(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text","methodSignature":"text(int, int, boolean)","methodName":"text","lineNumber":["18","26","49","58"],"fullExpression":"text(1, 1, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text.TextRuleConfig","methodSignature":"getFixedNumberOfCharacters()","methodName":"getFixedNumberOfCharacters","lineNumber":["172"],"fullExpression":"textRuleConfig.getFixedNumberOfCharacters()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text","methodSignature":"text(int, int)","methodName":"text","lineNumber":["22"],"fullExpression":"text(1, 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text.TextRuleConfig","methodSignature":"getNumberOfRequiredSymbols()","methodName":"getNumberOfRequiredSymbols","lineNumber":["173"],"fullExpression":"textRuleConfig.getNumberOfRequiredSymbols()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getContext()","methodName":"getContext","lineNumber":["22"],"fullExpression":"faker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text.TextSymbolsBuilder","methodSignature":"with(java.lang.String, int)","methodName":"with","lineNumber":["77","78","79","149"],"fullExpression":"builder.with(Text.EN_UPPERCASE, 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["22"],"fullExpression":"faker.getContext().getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text.TextSymbolsBuilder","methodSignature":"with(java.lang.String)","methodName":"with","lineNumber":["75"],"fullExpression":"TextSymbolsBuilder.builder().with(Text.EN_LOWERCASE)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"text()","methodName":"text","lineNumber":["86"],"fullExpression":"faker.text()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["186","196","203","208"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["196","203","208"],"fullExpression":"faker.random().nextInt(textRuleConfig.textKeys[j].length)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"numberBetween(int, int)","methodName":"numberBetween","lineNumber":["70"],"fullExpression":"faker.number().numberBetween(minimumLength, maximumLength + 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextRandomBytes(int)","methodName":"nextRandomBytes","lineNumber":["186"],"fullExpression":"faker.random().nextRandomBytes(2 * fixedNumberOfCharacters)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text","methodSignature":"text(int, int, boolean, boolean, boolean)","methodName":"text","lineNumber":["41","66"],"fullExpression":"text(20, 80, false, false, includeDigit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text","methodSignature":"text(int, int, boolean, boolean)","methodName":"text","lineNumber":["62"],"fullExpression":"text(minimumLength, maximumLength, includeUppercase, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text.TextSymbolsBuilder","methodSignature":"build()","methodName":"build","lineNumber":["81"],"fullExpression":"builder.len(len).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"number()","methodName":"number","lineNumber":["70"],"fullExpression":"faker.number()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text","methodSignature":"textWithNotMoreThan256DiffSymbols(net.datafaker.providers.base.Text.TextRuleConfig, byte[], int, int)","methodName":"textWithNotMoreThan256DiffSymbols","lineNumber":["185"],"fullExpression":"textWithNotMoreThan256DiffSymbols(textRuleConfig, faker.random().nextRandomBytes(2 * fixedNumberOfCharacters), fixedNumberOfCharacters, numberOfRequiredSymbols)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text.TextSymbolsBuilder","methodSignature":"len(int)","methodName":"len","lineNumber":["81"],"fullExpression":"builder.len(len)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text","methodSignature":"text(net.datafaker.providers.base.Text.TextRuleConfig)","methodName":"text","lineNumber":["86"],"fullExpression":"faker.text().text(config)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/sport/Formula1.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27"],"fullExpression":"resolve(\"formula1.driver\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/TeamTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["17","34"],"fullExpression":"assertThat(team.name())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Team","methodSignature":"name()","methodName":"name","lineNumber":["17"],"fullExpression":"team.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["34"],"fullExpression":"assertThat(zaFaker.team().state()).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Team","methodSignature":"state()","methodName":"state","lineNumber":["34"],"fullExpression":"zaFaker.team().state()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"team()","methodName":"team","lineNumber":["34"],"fullExpression":"zaFaker.team()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["17"],"fullExpression":"assertThat(team.name()).matches(\"(\\\\w+( )?){2,4}\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/BreakingBad.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["20","24"],"fullExpression":"resolve(\"breaking_bad.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Job.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29"],"fullExpression":"resolve(\"job.field\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Name.java":[{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"internet()","methodName":"internet","lineNumber":["144"],"fullExpression":"faker.internet()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"username()","methodName":"username","lineNumber":["144"],"fullExpression":"faker.internet().username()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["27","43","61","70","79","88","97","106","122","123","124"],"fullExpression":"resolve(\"name.name\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"name()","methodName":"name","lineNumber":["52"],"fullExpression":"name()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/BarcodeTest.java":[{"declaringType":"net.datafaker.providers.base.BarcodeTest","methodSignature":"isBarcodeValid(long)","methodName":"isBarcodeValid","lineNumber":["62","68","74"],"fullExpression":"BarcodeTest.isBarcodeValid(barcode)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["90"],"fullExpression":"assertThat(String.valueOf(sum))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["62","68","74"],"fullExpression":"assertThat(BarcodeTest.isBarcodeValid(barcode))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["62","68","74"],"fullExpression":"assertThat(BarcodeTest.isBarcodeValid(barcode)).isTrue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"endsWith(java.lang.CharSequence)","methodName":"endsWith","lineNumber":["90"],"fullExpression":"assertThat(String.valueOf(sum)).endsWith(\"0\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Seinfeld.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"seinfeld.character\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Music.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"options()","methodName":"options","lineNumber":["21","21","25"],"fullExpression":"faker.options()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","29"],"fullExpression":"resolve(\"music.instruments\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Music","methodSignature":"key()","methodName":"key","lineNumber":["25"],"fullExpression":"key()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.String...)","methodName":"option","lineNumber":["21","21","25"],"fullExpression":"faker.options().option(KEYS)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/LoremTest.java":[{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"characters(boolean)","methodName":"characters","lineNumber":["67","68"],"fullExpression":"lorem.characters(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"character(boolean)","methodName":"character","lineNumber":["42","43"],"fullExpression":"lorem.character(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"characters(int)","methodName":"characters","lineNumber":["73","74","75","76","111","112"],"fullExpression":"lorem.characters(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.List<? extends ELEMENT>)","methodName":"assertThat","lineNumber":["56","57","160"],"fullExpression":"assertThat(min)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"endsWith(java.lang.CharSequence)","methodName":"endsWith","lineNumber":["136","145"],"fullExpression":"assertThat(sentence).endsWith(\".\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["56","57","160"],"fullExpression":"assertThat(min).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"characters(int, boolean, boolean)","methodName":"characters","lineNumber":["106"],"fullExpression":"lorem.characters(10, true, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"fixedString(int)","methodName":"fixedString","lineNumber":["29","30","31","32"],"fullExpression":"lorem.fixedString(10)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"maxLengthSentence(int)","methodName":"maxLengthSentence","lineNumber":["168","174","180"],"fullExpression":"lorem.maxLengthSentence(length)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"paragraph(int)","methodName":"paragraph","lineNumber":["193"],"fullExpression":"lorem.paragraph(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"characters(int, int, boolean)","methodName":"characters","lineNumber":["121"],"fullExpression":"lorem.characters(1, 10, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"character()","methodName":"character","lineNumber":["37"],"fullExpression":"lorem.character()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["29","30","31","32","37","42","43","62","67","68","73","74","75","76","81","82","83","84","85","86","91","96","101","106","111","112","114","115","121","126","127","136","145","150","155","169","175","181"],"fullExpression":"assertThat(lorem.fixedString(10))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"characters()","methodName":"characters","lineNumber":["62"],"fullExpression":"lorem.characters()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isBetween(java.lang.Integer, java.lang.Integer)","methodName":"isBetween","lineNumber":["135","144","188","195"],"fullExpression":"assertThat(words.length).isBetween(3, 9)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"characters(int, int)","methodName":"characters","lineNumber":["50","91","96"],"fullExpression":"lorem.characters(1, 10)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"characters(int, boolean)","methodName":"characters","lineNumber":["81","82","83","84","85","86"],"fullExpression":"lorem.characters(2, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"sentence(int)","methodName":"sentence","lineNumber":["141"],"fullExpression":"lorem.sentence(10)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["29","30","169"],"fullExpression":"assertThat(lorem.fixedString(10)).hasSize(10)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["37","42","43","62","67","68","73","74","81","82","83","84","91","96","101","106","121","126","127","150","155"],"fullExpression":"assertThat(String.valueOf(lorem.character())).matches(\"[a-z\\\\d]\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"sentence(int, int)","methodName":"sentence","lineNumber":["150","155"],"fullExpression":"lorem.sentence(10, 10)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"characters(int, int, boolean, boolean)","methodName":"characters","lineNumber":["101","126","127"],"fullExpression":"lorem.characters(6, 10, true, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"sentence()","methodName":"sentence","lineNumber":["132"],"fullExpression":"lorem.sentence()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"characters(int, boolean, boolean, boolean)","methodName":"characters","lineNumber":["114","115"],"fullExpression":"lorem.characters(-1, true, true, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"words()","methodName":"words","lineNumber":["160"],"fullExpression":"lorem.words()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isEmpty()","methodName":"isEmpty","lineNumber":["31","32","75","76","85","86","111","112","114","115","175","181"],"fullExpression":"assertThat(lorem.fixedString(0)).isEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.lang3.StringUtils","methodSignature":"countMatches(java.lang.CharSequence, java.lang.CharSequence)","methodName":"countMatches","lineNumber":["187","194"],"fullExpression":"StringUtils.countMatches(paragraph, \".\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["135","144","188","195"],"fullExpression":"assertThat(words.length)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"paragraph()","methodName":"paragraph","lineNumber":["186"],"fullExpression":"lorem.paragraph()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/DateAndTimeTest.java":[{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"future(int, java.util.concurrent.TimeUnit, T, java.lang.String)","methodName":"future","lineNumber":["166"],"fullExpression":"date.future(20, TimeUnit.HOURS, new Date(), pattern)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"past(int, int, java.util.concurrent.TimeUnit, java.lang.String)","methodName":"past","lineNumber":["175"],"fullExpression":"date.past(20, 1, TimeUnit.DAYS, pattern)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"str2durationUnit(java.lang.String)","methodName":"str2durationUnit","lineNumber":["224","225","236"],"fullExpression":"DateAndTime.str2durationUnit(unit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"birthday()","methodName":"birthday","lineNumber":["126"],"fullExpression":"date.birthday()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"past(int, int, java.util.concurrent.TimeUnit)","methodName":"past","lineNumber":["59"],"fullExpression":"date.past(5, 4, TimeUnit.SECONDS)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Descriptable","methodSignature":"as(java.lang.String, java.lang.Object...)","methodName":"as","lineNumber":["206","215","227","237"],"fullExpression":"assertThat(max.compareTo(generated) > 0 || minValue >= maxValue && max.equals(generated)).as(\"Duration must be lower than max value\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"numberBetween(int, int)","methodName":"numberBetween","lineNumber":["139","140"],"fullExpression":"number.numberBetween(1, 99)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"future(int, int, java.util.concurrent.TimeUnit)","methodName":"future","lineNumber":["47"],"fullExpression":"date.future(5, 4, TimeUnit.SECONDS)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"between(T, T)","methodName":"between","lineNumber":["90"],"fullExpression":"dateAndTime.between(now, then)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["114"],"fullExpression":"assertThatThrownBy(() -> faker.date().between(then, now)).isInstanceOf(IllegalArgumentException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["114","193","243"],"fullExpression":"assertThatThrownBy(() -> faker.date().between(then, now))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"past(int, java.util.concurrent.TimeUnit, java.lang.String)","methodName":"past","lineNumber":["174"],"fullExpression":"date.past(1, TimeUnit.DAYS, pattern)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.Date)","methodName":"assertThat","lineNumber":["147"],"fullExpression":"assertThat(birthday)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"future(int, int, java.util.concurrent.TimeUnit, java.lang.String)","methodName":"future","lineNumber":["165"],"fullExpression":"date.future(20, 1, TimeUnit.HOURS, pattern)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"past(int, java.util.concurrent.TimeUnit, java.util.Date, java.lang.String)","methodName":"past","lineNumber":["176"],"fullExpression":"date.past(1, TimeUnit.DAYS, new Date(), pattern)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isBetween(java.lang.Integer, java.lang.Integer)","methodName":"isBetween","lineNumber":["185"],"fullExpression":"assertThat((period.getYears() * 12 + period.getMonths()) * 30 + period.getDays()).isBetween((minPeriod.getYears() * 12 + minPeriod.getMonths()) * 30 + minPeriod.getDays(), (maxPeriod.getYears() * 12 + maxPeriod.getMonths()) * 30 + maxPeriod.getDays())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isLessThan(long)","methodName":"isLessThan","lineNumber":["60","72","81","91","127"],"fullExpression":"assertThat(past.getTime()).isLessThan(now)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"future(int, java.util.concurrent.TimeUnit, T)","methodName":"future","lineNumber":["36"],"fullExpression":"date.future(1, TimeUnit.SECONDS, now)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"future(int, java.util.concurrent.TimeUnit, java.lang.String)","methodName":"future","lineNumber":["164"],"fullExpression":"date.future(1, TimeUnit.HOURS, pattern)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["206","215","227","237"],"fullExpression":"assertThat(max.compareTo(generated) > 0 || minValue >= maxValue && max.equals(generated))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"past(int, java.util.concurrent.TimeUnit, T)","methodName":"past","lineNumber":["71"],"fullExpression":"date.past(1, TimeUnit.SECONDS, now)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"birthday(int, int)","methodName":"birthday","lineNumber":["145"],"fullExpression":"date.birthday(minAge, maxAge)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractDateAssert","methodSignature":"isBetween(java.util.Date, java.util.Date, boolean, boolean)","methodName":"isBetween","lineNumber":["147"],"fullExpression":"assertThat(birthday).isBetween(Timestamp.from(from.toInstant(rules.getOffset(from))), Timestamp.from(to.toInstant(rules.getOffset(to))), true, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractObjectAssert","methodSignature":"as(java.lang.String, java.lang.Object...)","methodName":"as","lineNumber":["203","226"],"fullExpression":"assertThat(min).as(\"Duration must be equal or greater than min value\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.time.Duration)","methodName":"assertThat","lineNumber":["203","226"],"fullExpression":"assertThat(min)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isGreaterThan(long)","methodName":"isGreaterThan","lineNumber":["37","48"],"fullExpression":"assertThat(future.getTime()).isGreaterThan(now.getTime())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(long)","methodName":"assertThat","lineNumber":["37","48","60","72","81","91","127"],"fullExpression":"assertThat(future.getTime())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.jupiter.params.provider.Arguments","methodSignature":"of(java.lang.Object...)","methodName":"of","lineNumber":["249","250","251","252","253","254","255","256","257","258","259","260","261","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","287","288","289","290","291","292","293","294","300","301","302","303","304","305","306","312","313","314"],"fullExpression":"Arguments.of(0, \"days\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["185"],"fullExpression":"assertThat((period.getYears() * 12 + period.getMonths()) * 30 + period.getDays())","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/LanguageCodeTest.java":[{"declaringType":"net.datafaker.providers.base.LanguageCode","methodSignature":"iso639()","methodName":"iso639","lineNumber":["12"],"fullExpression":"languageCode.iso639()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["12"],"fullExpression":"assertThat(languageCode.iso639())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["12"],"fullExpression":"assertThat(languageCode.iso639()).hasSize(2)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/sport/SportProviders.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getProvider(java.lang.Class<AP>, java.util.function.Function<PR, AP>)","methodName":"getProvider","lineNumber":["7","11","15","19","23","27","31","35"],"fullExpression":"getProvider(Baseball.class, Baseball::new)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/Minecraft.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["37"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.videogame.Minecraft","methodSignature":"tileName()","methodName":"tileName","lineNumber":["37"],"fullExpression":"tileName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextBoolean()","methodName":"nextBoolean","lineNumber":["37"],"fullExpression":"faker.random().nextBoolean()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29","33"],"fullExpression":"resolve(\"minecraft.item_name\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.videogame.Minecraft","methodSignature":"itemName()","methodName":"itemName","lineNumber":["37"],"fullExpression":"itemName()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Suits.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21"],"fullExpression":"resolve(\"suits.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Internet.java":[{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"ipV6Address()","methodName":"ipV6Address","lineNumber":["375"],"fullExpression":"ipV6Address()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"webdomain()","methodName":"webdomain","lineNumber":["136"],"fullExpression":"webdomain()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"url(boolean, boolean, boolean, boolean, boolean, boolean)","methodName":"url","lineNumber":["112"],"fullExpression":"url(bts[0] % 2 == 0, bts[1] % 2 == 0, bts[2] % 2 == 0, bts[3] % 2 == 0, bts[4] % 2 == 0, bts[5] % 2 == 0)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"stripAccents(java.lang.String)","methodName":"stripAccents","lineNumber":["73"],"fullExpression":"stripAccents(localPart)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"image(int, int)","methodName":"image","lineNumber":["163"],"fullExpression":"image(Integer.parseInt(dimension[0].trim()), Integer.parseInt(dimension[1].trim()))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"safeEmailAddress(java.lang.String)","methodName":"safeEmailAddress","lineNumber":["65"],"fullExpression":"safeEmailAddress(faker.internet().username())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"getPrivateIpV4Address()","methodName":"getPrivateIpV4Address","lineNumber":["273"],"fullExpression":"getPrivateIpV4Address()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"username()","methodName":"username","lineNumber":["57","65"],"fullExpression":"faker.internet().username()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet.BotUserAgent","methodSignature":"toString()","methodName":"toString","lineNumber":["488"],"fullExpression":"agent.toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet.BotUserAgent","methodSignature":"values()","methodName":"values","lineNumber":["511"],"fullExpression":"BotUserAgent.values()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["44","45","96","150"],"fullExpression":"faker.getContext().getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"password(int, int)","methodName":"password","lineNumber":["180"],"fullExpression":"password(8, 16)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["229","230","262","263","264","265","288","289","290","319","320","321","322","325","336","377","435"],"fullExpression":"faker.random().nextInt(16)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"random(T[])","methodName":"random","lineNumber":["287","293"],"fullExpression":"random(PRIVATE_FIRST_OCTET)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text","methodSignature":"text(int, int, boolean, boolean, boolean)","methodName":"text","lineNumber":["200"],"fullExpression":"faker.text().text(minimumLength, maximumLength, includeUppercase, includeSpecial, includeDigit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet.UserAgent","methodSignature":"any(net.datafaker.providers.base.BaseProviders)","methodName":"any","lineNumber":["442"],"fullExpression":"UserAgent.any(faker)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"firstName()","methodName":"firstName","lineNumber":["44","149"],"fullExpression":"name.firstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"lorem()","methodName":"lorem","lineNumber":["132","133","134","134","135","384","397"],"fullExpression":"faker.lorem()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet.UserAgent","methodSignature":"values()","methodName":"values","lineNumber":["470"],"fullExpression":"UserAgent.values()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"getIpV6Address()","methodName":"getIpV6Address","lineNumber":["346"],"fullExpression":"getIpV6Address()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"password(int, int, boolean, boolean)","methodName":"password","lineNumber":["192"],"fullExpression":"password(minimumLength, maximumLength, includeUppercase, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"ipV4Address()","methodName":"ipV4Address","lineNumber":["334"],"fullExpression":"ipV4Address()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"port()","methodName":"port","lineNumber":["131"],"fullExpression":"port()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"getIpV4Address()","methodName":"getIpV4Address","lineNumber":["249"],"fullExpression":"getIpV4Address()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getContext()","methodName":"getContext","lineNumber":["44","45","96","150"],"fullExpression":"faker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"domainWord()","methodName":"domainWord","lineNumber":["91","151"],"fullExpression":"domainWord()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"slug(java.util.List<java.lang.String>, java.lang.String)","methodName":"slug","lineNumber":["132","134","134","384"],"fullExpression":"slug(faker.lorem().words(2), \"/\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"words(int)","methodName":"words","lineNumber":["132","133","134","134","135","384","397"],"fullExpression":"faker.lorem().words(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["111","130","209","229","230","262","263","264","265","286","315","336","358","377","418","435","471","512"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["61","69"],"fullExpression":"faker.resolve(\"internet.free_email\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"userAgent(net.datafaker.providers.base.Internet.UserAgent)","methodName":"userAgent","lineNumber":["450"],"fullExpression":"userAgent(null)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextRandomBytes(int)","methodName":"nextRandomBytes","lineNumber":["111","418"],"fullExpression":"faker.random().nextRandomBytes(6)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"macAddress(java.lang.String)","methodName":"macAddress","lineNumber":["239"],"fullExpression":"macAddress(\"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"lastName()","methodName":"lastName","lineNumber":["45","96"],"fullExpression":"name.lastName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"name()","methodName":"name","lineNumber":["43","96","149"],"fullExpression":"faker.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"emailAddress(java.lang.String, java.lang.String)","methodName":"emailAddress","lineNumber":["61","69"],"fullExpression":"emailAddress(localPart, FakerIDN.toASCII(faker.resolve(\"internet.free_email\")))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"password(int, int, boolean)","methodName":"password","lineNumber":["188"],"fullExpression":"password(minimumLength, maximumLength, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet.BotUserAgent","methodSignature":"any(net.datafaker.providers.base.BaseProviders)","methodName":"any","lineNumber":["485"],"fullExpression":"BotUserAgent.any(faker)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"domainSuffix()","methodName":"domainSuffix","lineNumber":["91","154"],"fullExpression":"domainSuffix()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"hex(int, boolean)","methodName":"hex","lineNumber":["365"],"fullExpression":"random.hex(4, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet.UserAgent","methodSignature":"toString()","methodName":"toString","lineNumber":["445"],"fullExpression":"agent.toString()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"uuidv3()","methodName":"uuidv3","lineNumber":["430"],"fullExpression":"uuidv3()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"emailAddress(java.lang.String)","methodName":"emailAddress","lineNumber":["57"],"fullExpression":"emailAddress(faker.internet().username())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"botUserAgent(net.datafaker.providers.base.Internet.BotUserAgent)","methodName":"botUserAgent","lineNumber":["493"],"fullExpression":"botUserAgent(null)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["77","100","159","176","446","489"],"fullExpression":"resolve(\"internet.email_subject\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextDouble()","methodName":"nextDouble","lineNumber":["471","512"],"fullExpression":"faker.random().nextDouble()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.internal.helper.FakerIDN","methodSignature":"toASCII(java.lang.String)","methodName":"toASCII","lineNumber":["61","69","95","148"],"fullExpression":"FakerIDN.toASCII(faker.resolve(\"internet.free_email\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"text()","methodName":"text","lineNumber":["200"],"fullExpression":"faker.text()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"internet()","methodName":"internet","lineNumber":["57","65"],"fullExpression":"faker.internet()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["130","209"],"fullExpression":"faker.random().nextInt(0, 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"password(int, int, boolean, boolean, boolean)","methodName":"password","lineNumber":["184","196"],"fullExpression":"password(8, 16, false, false, includeDigit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"getPublicIpV4Address()","methodName":"getPublicIpV4Address","lineNumber":["305"],"fullExpression":"getPublicIpV4Address()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/sequence/FakeSequence.java":[{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["32"],"fullExpression":"randomService.nextInt(suppliers.size())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"build()","methodName":"build","lineNumber":["104"],"fullExpression":"build()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextDouble()","methodName":"nextDouble","lineNumber":["31"],"fullExpression":"randomService.nextDouble()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"len(int, int)","methodName":"len","lineNumber":["73"],"fullExpression":"len(length, length)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence","methodSignature":"get()","methodName":"get","lineNumber":["104"],"fullExpression":"build().get()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Medical.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"regexify(java.lang.String)","methodName":"regexify","lineNumber":["30","35"],"fullExpression":"faker.regexify(regex)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29","34","39"],"fullExpression":"resolve(\"medical.medicine_name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/sequence/Data.java":[{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextDouble(double, double)","methodName":"nextDouble","lineNumber":["47"],"fullExpression":"new BaseFaker().random().nextDouble(3.2, 5.5)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"random()","methodName":"random","lineNumber":["24","47","70"],"fullExpression":"new BaseFaker().random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["24","70"],"fullExpression":"new BaseFaker().random().nextInt(60, 180)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/BusinessTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["16","24","25","30"],"fullExpression":"assertThat(business.creditCardNumber())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["16","24","30"],"fullExpression":"assertThat(business.creditCardNumber()).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Business","methodSignature":"creditCardExpiry()","methodName":"creditCardExpiry","lineNumber":["22"],"fullExpression":"business.creditCardExpiry()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Business","methodSignature":"creditCardNumber()","methodName":"creditCardNumber","lineNumber":["16"],"fullExpression":"business.creditCardNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["25"],"fullExpression":"assertThat(date).matches(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Business","methodSignature":"securityCode()","methodName":"securityCode","lineNumber":["30"],"fullExpression":"business.securityCode()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/NumberTest.java":[{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"randomDigitNotZero()","methodName":"randomDigitNotZero","lineNumber":["47"],"fullExpression":"number.randomDigitNotZero()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractDoubleAssert","methodSignature":"isEqualTo(double)","methodName":"isEqualTo","lineNumber":["282"],"fullExpression":"assertThat(actual).isEqualTo(expected)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.lang3.tuple.Pair","methodSignature":"getRight()","methodName":"getRight","lineNumber":["206","234","261"],"fullExpression":"minMax.getRight()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.Collection<? extends E>)","methodName":"assertThat","lineNumber":["39","52","158","173","421","434"],"fullExpression":"assertThat(nums)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractDoubleAssert","methodSignature":"isGreaterThanOrEqualTo(double)","methodName":"isGreaterThanOrEqualTo","lineNumber":["213","218","241","246","268","273"],"fullExpression":"assertThat(percentGreaterThan80Percent).isGreaterThanOrEqualTo(percentRunsGtUniquePercentage)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"numberBetween(long, long)","methodName":"numberBetween","lineNumber":["117","123","168","390","429","455"],"fullExpression":"number.numberBetween(0, i)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isLessThan(int)","methodName":"isLessThan","lineNumber":["142","154"],"fullExpression":"assertThat(v).isLessThan(high)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isLessThanOrEqualTo(long)","methodName":"isLessThanOrEqualTo","lineNumber":["118"],"fullExpression":"assertThat(v).isLessThanOrEqualTo(i)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(double)","methodName":"assertThat","lineNumber":["213","218","241","246","268","273","282","372","396"],"fullExpression":"assertThat(percentGreaterThan80Percent)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"contains(ELEMENT...)","methodName":"contains","lineNumber":["39","52","158","173"],"fullExpression":"assertThat(nums).contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.lang3.tuple.Pair","methodSignature":"getLeft()","methodName":"getLeft","lineNumber":["206","233","261"],"fullExpression":"minMax.getLeft()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"numberBetween(int, int)","methodName":"numberBetween","lineNumber":["111","153","366","416"],"fullExpression":"number.numberBetween(0, i)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.NumberTest","methodSignature":"calculateNumbersToGet(long, long)","methodName":"calculateNumbersToGet","lineNumber":["207","235","262"],"fullExpression":"calculateNumbersToGet(min, max)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.NumberTest","methodSignature":"uniquePercentageOfResults(long, java.util.concurrent.Callable<T>)","methodName":"uniquePercentageOfResults","lineNumber":["209","237","264"],"fullExpression":"uniquePercentageOfResults(numbersToGet, () -> faker.number().randomDouble(0, min, max))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"randomNumber(int, boolean)","methodName":"randomNumber","lineNumber":["65","75","85"],"fullExpression":"number.randomNumber(1, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractDoubleAssert","methodSignature":"isLessThan(double)","methodName":"isLessThan","lineNumber":["372","396"],"fullExpression":"assertThat((mean - count) / mean).isLessThan(0.2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["87","289","296"],"fullExpression":"assertThat(stringValue)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"randomDouble(int, int, int)","methodName":"randomDouble","lineNumber":["97"],"fullExpression":"number.randomDouble(i, 1, 1000)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isBetween(java.lang.Integer, java.lang.Integer)","methodName":"isBetween","lineNumber":["417"],"fullExpression":"assertThat(value).isBetween(minInt, maxInt)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isLessThan(long)","methodName":"isLessThan","lineNumber":["58","66","133","169","456"],"fullExpression":"assertThat(value).isLessThan(Long.MAX_VALUE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isBetween(java.lang.Long, java.lang.Long)","methodName":"isBetween","lineNumber":["430"],"fullExpression":"assertThat(value).isBetween(minLong, maxLong)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isZero()","methodName":"isZero","lineNumber":["76"],"fullExpression":"assertThat(value).isZero()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["87"],"fullExpression":"assertThat(stringValue).hasSize(i)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.lang3.tuple.Pair","methodSignature":"of(L, R)","methodName":"of","lineNumber":["217","245","272","316"],"fullExpression":"Pair.of((long) Integer.MIN_VALUE, (long) Integer.MAX_VALUE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["289","296"],"fullExpression":"assertThat(digit).matches(\"[0-9]\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"randomDigit()","methodName":"randomDigit","lineNumber":["34"],"fullExpression":"number.randomDigit()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.NumberTest","methodSignature":"randomizationQualityTest(java.util.function.Function<org.apache.commons.lang3.tuple.Pair<java.lang.Long, java.lang.Long>, java.lang.Double>)","methodName":"randomizationQualityTest","lineNumber":["212","240","267"],"fullExpression":"randomizationQualityTest(minMaxRangeToUniquePercentageFunction)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isLessThanOrEqualTo(int)","methodName":"isLessThanOrEqualTo","lineNumber":["35","48","101","112"],"fullExpression":"assertThat(value).isLessThanOrEqualTo(9)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isGreaterThan(long)","methodName":"isGreaterThan","lineNumber":["124"],"fullExpression":"assertThat(v1).isGreaterThan(min1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(long)","methodName":"assertThat","lineNumber":["58","66","76","118","124","133","169","430","456"],"fullExpression":"assertThat(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["421","434"],"fullExpression":"assertThat(ints).hasSize(Math.max(1, size))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["35","48","101","112","142","154","417"],"fullExpression":"assertThat(value)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Hololive.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13"],"fullExpression":"resolve(\"hololive.talent\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/LocalityExample.java":[{"declaringType":"net.datafaker.providers.base.Locality","methodSignature":"allSupportedLocales()","methodName":"allSupportedLocales","lineNumber":["20"],"fullExpression":"defaultFaker.locality().allSupportedLocales()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"streetAddress()","methodName":"streetAddress","lineNumber":["30","51"],"fullExpression":"faker.address().streetAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.PhoneNumber","methodSignature":"phoneNumber()","methodName":"phoneNumber","lineNumber":["31","52"],"fullExpression":"faker.phoneNumber().phoneNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"locality()","methodName":"locality","lineNumber":["20","25","46"],"fullExpression":"defaultFaker.locality()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"address()","methodName":"address","lineNumber":["30","51"],"fullExpression":"faker.address()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"phoneNumber()","methodName":"phoneNumber","lineNumber":["31","52"],"fullExpression":"faker.phoneNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"firstName()","methodName":"firstName","lineNumber":["49"],"fullExpression":"currentFaker.name().firstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"lastName()","methodName":"lastName","lineNumber":["50"],"fullExpression":"currentFaker.name().lastName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"name()","methodName":"name","lineNumber":["29","49","50"],"fullExpression":"faker.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Locality","methodSignature":"localeStringWithoutReplacement()","methodName":"localeStringWithoutReplacement","lineNumber":["46"],"fullExpression":"defaultFaker.locality().localeStringWithoutReplacement()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Locality","methodSignature":"localeString()","methodName":"localeString","lineNumber":["25"],"fullExpression":"defaultFaker.locality().localeString()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"fullName()","methodName":"fullName","lineNumber":["29"],"fullExpression":"faker.name().fullName()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Options.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["28","32","36","40","44","48","52","56","60","88","104","131","148","159","170"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["28","32","36","40","44","48","52","56","60","88","104","131","148","159","170"],"fullExpression":"faker.random().nextInt(options.length)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Passport.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13"],"fullExpression":"faker.resolve(\"passport.valid\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"regexify(java.lang.String)","methodName":"regexify","lineNumber":["13"],"fullExpression":"faker.regexify(faker.resolve(\"passport.valid\"))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/transformations/XmlTransformer.java":[{"declaringType":"net.datafaker.transformations.Schema","methodSignature":"getFields()","methodName":"getFields","lineNumber":["26","79"],"fullExpression":"schema.getFields()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.XmlTransformer","methodSignature":"apply(IN, java.lang.StringBuilder, net.datafaker.transformations.Field<IN, ?>)","methodName":"apply","lineNumber":["104"],"fullExpression":"apply(input, sb, (Field<IN, ?>) xmlNodeElem)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence","methodSignature":"isInfinite()","methodName":"isInfinite","lineNumber":["32"],"fullExpression":"((FakeSequence) input).isInfinite()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.XmlTransformer","methodSignature":"offset(int)","methodName":"offset","lineNumber":["73","108"],"fullExpression":"offset(tagIndex)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.XmlTransformer","methodSignature":"isAttribute(java.lang.String)","methodName":"isAttribute","lineNumber":["83","127"],"fullExpression":"isAttribute(inField.getName())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Field","methodSignature":"transform(IN)","methodName":"transform","lineNumber":["96","128"],"fullExpression":"field.transform(input)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.XmlTransformer","methodSignature":"applyTag(IN, java.lang.StringBuilder, net.datafaker.transformations.Field<IN, ?>, java.lang.String)","methodName":"applyTag","lineNumber":["87"],"fullExpression":"applyTag(input, sb, xmlNode, tag)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Field","methodSignature":"getName()","methodName":"getName","lineNumber":["76","83","126"],"fullExpression":"xmlNode.getName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.XmlTransformer","methodSignature":"escape(java.lang.String)","methodName":"escape","lineNumber":["129","137"],"fullExpression":"escape(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.XmlTransformer","methodSignature":"applyValue(java.lang.StringBuilder, java.lang.String, java.lang.String)","methodName":"applyValue","lineNumber":["92","99","114","116"],"fullExpression":"applyValue(sb, tag, null)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.XmlTransformer","methodSignature":"createEscapeMap()","methodName":"createEscapeMap","lineNumber":["12"],"fullExpression":"createEscapeMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.XmlTransformer","methodSignature":"apply(IN, net.datafaker.transformations.Schema<IN, ?>)","methodName":"apply","lineNumber":["38","48"],"fullExpression":"apply(in, schema)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.XmlTransformer","methodSignature":"applyAttributes(IN, java.lang.StringBuilder, net.datafaker.transformations.Field<IN, ?>[])","methodName":"applyAttributes","lineNumber":["80"],"fullExpression":"applyAttributes(input, sb, attrs)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Hashing.java":[{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"characters()","methodName":"characters","lineNumber":["44"],"fullExpression":"faker.lorem().characters()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Hashing","methodSignature":"generateString(java.lang.String, java.lang.String)","methodName":"generateString","lineNumber":["18","22","26","30","34","38"],"fullExpression":"generateString(\"MD2\", \"%032x\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"lorem()","methodName":"lorem","lineNumber":["44"],"fullExpression":"faker.lorem()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Hacker.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29"],"fullExpression":"resolve(\"hacker.abbreviation\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/sport/Volleyball.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31"],"fullExpression":"resolve(\"volleyball.team\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Pronouns.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","26","34","42"],"fullExpression":"resolve(\"pronouns.subjective\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Stargate.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"stargate.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/SipTest.java":[{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"bodyBytes()","methodName":"bodyBytes","lineNumber":["124"],"fullExpression":"sip.bodyBytes()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["99","106","109","112","115","119"],"fullExpression":"assertThat(sut[0]).isEqualTo(\"v=0\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNotNull()","methodName":"isNotNull","lineNumber":["126"],"fullExpression":"assertThat(sut.length).isNotNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"redirectResponsePhrase()","methodName":"redirectResponsePhrase","lineNumber":["75"],"fullExpression":"sip.redirectResponsePhrase()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"rtpPort()","methodName":"rtpPort","lineNumber":["28"],"fullExpression":"sip.rtpPort()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isGreaterThanOrEqualTo(int)","methodName":"isGreaterThanOrEqualTo","lineNumber":["29","116"],"fullExpression":"assertThat(sut).isGreaterThanOrEqualTo(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"globalErrorResponseCode()","methodName":"globalErrorResponseCode","lineNumber":["60"],"fullExpression":"sip.globalErrorResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"clientErrorResponseCode()","methodName":"clientErrorResponseCode","lineNumber":["50"],"fullExpression":"sip.clientErrorResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"redirectResponseCode()","methodName":"redirectResponseCode","lineNumber":["45"],"fullExpression":"sip.redirectResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"startsWith(java.lang.CharSequence)","methodName":"startsWith","lineNumber":["102"],"fullExpression":"assertThat(secondLine[0]).startsWith(\"o=\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractObjectArrayAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["97"],"fullExpression":"assertThat(sut).hasSize(7)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"serverErrorResponsePhrase()","methodName":"serverErrorResponsePhrase","lineNumber":["85"],"fullExpression":"sip.serverErrorResponsePhrase()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"serverErrorResponseCode()","methodName":"serverErrorResponseCode","lineNumber":["55"],"fullExpression":"sip.serverErrorResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["13","18","65","70","75","80","85","90","99","102","103","104","106","109","110","112","115","119","133","134"],"fullExpression":"assertThat(sip.method())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"messagingPort()","methodName":"messagingPort","lineNumber":["23"],"fullExpression":"sip.messagingPort()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"contentType()","methodName":"contentType","lineNumber":["18"],"fullExpression":"sip.contentType()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isZero()","methodName":"isZero","lineNumber":["30","117"],"fullExpression":"assertThat(sut % 2).isZero()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isBetween(java.lang.Integer, java.lang.Integer)","methodName":"isBetween","lineNumber":["23","35","40","45","50","55","60"],"fullExpression":"assertThat(sip.messagingPort()).isBetween(1000, 10000)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"provisionalResponsePhrase()","methodName":"provisionalResponsePhrase","lineNumber":["65"],"fullExpression":"sip.provisionalResponsePhrase()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"bodyString()","methodName":"bodyString","lineNumber":["95"],"fullExpression":"sip.bodyString()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"clientErrorResponsePhrase()","methodName":"clientErrorResponsePhrase","lineNumber":["80"],"fullExpression":"sip.clientErrorResponsePhrase()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["13","18","65","70","75","80","85","90","103","104","110","133","134"],"fullExpression":"assertThat(sip.method()).matches(\"^[A-Z]{3,}$\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"globalErrorResponsePhrase()","methodName":"globalErrorResponsePhrase","lineNumber":["90"],"fullExpression":"sip.globalErrorResponsePhrase()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(T[])","methodName":"assertThat","lineNumber":["97"],"fullExpression":"assertThat(sut)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"nameAddress()","methodName":"nameAddress","lineNumber":["131"],"fullExpression":"sip.nameAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"provisionalResponseCode()","methodName":"provisionalResponseCode","lineNumber":["35"],"fullExpression":"sip.provisionalResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"successResponseCode()","methodName":"successResponseCode","lineNumber":["40"],"fullExpression":"sip.successResponseCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"successResponsePhrase()","methodName":"successResponsePhrase","lineNumber":["70"],"fullExpression":"sip.successResponsePhrase()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"method()","methodName":"method","lineNumber":["13"],"fullExpression":"sip.method()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["23","29","30","35","40","45","50","55","60","116","117","126"],"fullExpression":"assertThat(sip.messagingPort())","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/entertainment/AvatarTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["12"],"fullExpression":"assertThat(avatar)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["12"],"fullExpression":"assertThat(avatar).matches(\"^https://robohash.org/[a-z]{8}.png$\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/Esports.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29","33"],"fullExpression":"resolve(\"esport.players\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Hipster.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13"],"fullExpression":"resolve(\"hipster.words\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/ShakespeareTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["13","18","23","28"],"fullExpression":"assertThat(shakespeare.hamletQuote())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Shakespeare","methodSignature":"hamletQuote()","methodName":"hamletQuote","lineNumber":["13"],"fullExpression":"shakespeare.hamletQuote()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["13","18","23","28"],"fullExpression":"assertThat(shakespeare.hamletQuote()).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Shakespeare","methodSignature":"asYouLikeItQuote()","methodName":"asYouLikeItQuote","lineNumber":["18"],"fullExpression":"shakespeare.asYouLikeItQuote()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Shakespeare","methodSignature":"romeoAndJulietQuote()","methodName":"romeoAndJulietQuote","lineNumber":["28"],"fullExpression":"shakespeare.romeoAndJulietQuote()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Shakespeare","methodSignature":"kingRichardIIIQuote()","methodName":"kingRichardIIIQuote","lineNumber":["23"],"fullExpression":"shakespeare.kingRichardIIIQuote()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/MarvelSnap.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29"],"fullExpression":"resolve(\"games.marvel_snap.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/transformations/YamlTransformer.java":[{"declaringType":"net.datafaker.transformations.Schema","methodSignature":"getFields()","methodName":"getFields","lineNumber":["17","83"],"fullExpression":"schema.getFields()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence","methodSignature":"isInfinite()","methodName":"isInfinite","lineNumber":["28"],"fullExpression":"((FakeSequence) input).isInfinite()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.YamlTransformer","methodSignature":"addCollection(java.lang.StringBuilder, java.util.Collection<java.lang.Object>, java.lang.String)","methodName":"addCollection","lineNumber":["88","92"],"fullExpression":"addCollection(sb, (Collection) value, offset)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.YamlTransformer","methodSignature":"apply(java.lang.StringBuilder, IN, net.datafaker.transformations.Field<IN, ?>[], java.lang.String)","methodName":"apply","lineNumber":["23","84"],"fullExpression":"apply(sb, input, fields, \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Field","methodSignature":"transform(IN)","methodName":"transform","lineNumber":["57"],"fullExpression":"field.transform(input)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.YamlTransformer","methodSignature":"value2String(java.lang.Object, java.lang.StringBuilder, java.lang.String)","methodName":"value2String","lineNumber":["61","63","77"],"fullExpression":"value2String(value, sb, offset + INDENTATION)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.YamlTransformer","methodSignature":"apply(IN, net.datafaker.transformations.Schema<IN, ?>)","methodName":"apply","lineNumber":["34","44"],"fullExpression":"apply(in, schema)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Field","methodSignature":"getName()","methodName":"getName","lineNumber":["55"],"fullExpression":"field.getName()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23"],"fullExpression":"resolve(\"ghostbusters.actors\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/RestaurantTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["23","31"],"fullExpression":"assertThat(restaurant.namePrefix())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["23","31"],"fullExpression":"assertThat(restaurant.namePrefix()).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Restaurant","methodSignature":"name()","methodName":"name","lineNumber":["31"],"fullExpression":"restaurant.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Restaurant","methodSignature":"namePrefix()","methodName":"namePrefix","lineNumber":["23"],"fullExpression":"restaurant.namePrefix()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Vehicle.java":[{"declaringType":"net.datafaker.providers.base.Vehicle","methodSignature":"carOptions(int, int)","methodName":"carOptions","lineNumber":["87"],"fullExpression":"carOptions(5, 10)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"numberBetween(int, int)","methodName":"numberBetween","lineNumber":["91","105"],"fullExpression":"faker.number().numberBetween(min, max)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Vehicle","methodSignature":"model(java.lang.String)","methodName":"model","lineNumber":["32","41"],"fullExpression":"model(make())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["94","108","119"],"fullExpression":"faker.resolve(\"vehicle.car_options\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Vehicle","methodSignature":"make()","methodName":"make","lineNumber":["32","40"],"fullExpression":"make()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Vehicle","methodSignature":"standardSpecs(int, int)","methodName":"standardSpecs","lineNumber":["101"],"fullExpression":"standardSpecs(5, 10)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"regexify(java.lang.String)","methodName":"regexify","lineNumber":["20"],"fullExpression":"faker.regexify(VIN_REGEX)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"number()","methodName":"number","lineNumber":["91","105"],"fullExpression":"faker.number()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["24","28","36","45","49","53","57","61","65","69","73","77","81","83","115","128"],"fullExpression":"resolve(\"vehicle.manufacture\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"bothify(java.lang.String)","methodName":"bothify","lineNumber":["119","129"],"fullExpression":"faker.bothify(faker.resolve(\"vehicle.license_plate\"))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java":[{"declaringType":"com.google.i18n.phonenumbers.PhoneNumberUtil","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["25","42","51","68"],"fullExpression":"PhoneNumberUtil.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.PhoneNumber","methodSignature":"phoneNumber()","methodName":"phoneNumber","lineNumber":["29","73"],"fullExpression":"localFaker.phoneNumber().phoneNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.google.i18n.phonenumbers.PhoneNumberUtil","methodSignature":"parse(java.lang.CharSequence, java.lang.String)","methodName":"parse","lineNumber":["30","52","76"],"fullExpression":"util.parse(phoneNumber, region)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"phoneNumber()","methodName":"phoneNumber","lineNumber":["29","73"],"fullExpression":"localFaker.phoneNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["53"],"fullExpression":"assertThat(util.isValidNumber(proto))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.google.i18n.phonenumbers.PhoneNumberUtil","methodSignature":"getExampleNumber(java.lang.String)","methodName":"getExampleNumber","lineNumber":["42"],"fullExpression":"PhoneNumberUtil.getInstance().getExampleNumber(\"AR\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.google.i18n.phonenumbers.PhoneNumberUtil","methodSignature":"isValidNumber(com.google.i18n.phonenumbers.Phonenumber.PhoneNumber)","methodName":"isValidNumber","lineNumber":["32","53","78"],"fullExpression":"util.isValidNumber(proto)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["53"],"fullExpression":"assertThat(util.isValidNumber(proto)).isTrue()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/CodeTest.java":[{"declaringType":"org.apache.commons.validator.routines.ISBNValidator","methodSignature":"isValidISBN10(java.lang.String)","methodName":"isValidISBN10","lineNumber":["63"],"fullExpression":"isbnValidator.isValidISBN10(isbn10)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["22","32","42","44","55","58","77","79","91","108","115","122","128","134"],"fullExpression":"assertThat(isbn10)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["63","67","92","109","116"],"fullExpression":"assertThat(isbnValidator.isValidISBN10(isbn10))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.CodeTest","methodSignature":"assertIsValidISBN10(java.lang.String, org.apache.commons.validator.routines.ISBNValidator)","methodName":"assertIsValidISBN10","lineNumber":["21","43","45"],"fullExpression":"assertIsValidISBN10(isbn10, isbnValidator)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["42","44","55","58"],"fullExpression":"assertThat(isbn10NoSep).hasSize(10)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["77","79","91","108","115","122","128","134"],"fullExpression":"assertThat(isbn10Sep).matches(\"9971-\\\\d-\\\\d{4}-(\\\\d|X)\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["92","109","116"],"fullExpression":"assertThat(LuhnCheckDigit.LUHN_CHECK_DIGIT.isValid(imei)).isTrue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.validator.routines.checkdigit.CheckDigit","methodSignature":"isValid(java.lang.String)","methodName":"isValid","lineNumber":["92","109","116"],"fullExpression":"LuhnCheckDigit.LUHN_CHECK_DIGIT.isValid(imei)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Code","methodSignature":"isbn10()","methodName":"isbn10","lineNumber":["18"],"fullExpression":"faker.code().isbn10()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.CodeTest","methodSignature":"assertIsValidISBN13(java.lang.String, org.apache.commons.validator.routines.ISBNValidator)","methodName":"assertIsValidISBN13","lineNumber":["31","56","59"],"fullExpression":"assertIsValidISBN13(isbn13, isbnValidator)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"code()","methodName":"code","lineNumber":["18","28","38","39","51","52","74","75"],"fullExpression":"faker.code()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Code","methodSignature":"isbn10(boolean)","methodName":"isbn10","lineNumber":["38","39","74"],"fullExpression":"faker.code().isbn10(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Code","methodSignature":"isbn13(boolean)","methodName":"isbn13","lineNumber":["51","52","75"],"fullExpression":"faker.code().isbn13(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.validator.routines.ISBNValidator","methodSignature":"getInstance(boolean)","methodName":"getInstance","lineNumber":["20","30","40","53"],"fullExpression":"ISBNValidator.getInstance(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Descriptable","methodSignature":"describedAs(java.lang.String, java.lang.Object...)","methodName":"describedAs","lineNumber":["63","67"],"fullExpression":"assertThat(isbnValidator.isValidISBN10(isbn10)).describedAs(isbn10 + \" is valid\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.validator.routines.ISBNValidator","methodSignature":"isValidISBN13(java.lang.String)","methodName":"isValidISBN13","lineNumber":["67"],"fullExpression":"isbnValidator.isValidISBN13(isbn13)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"doesNotContain(java.lang.CharSequence...)","methodName":"doesNotContain","lineNumber":["22","32"],"fullExpression":"assertThat(isbn10).doesNotContain(\"-\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Code","methodSignature":"isbn13()","methodName":"isbn13","lineNumber":["28"],"fullExpression":"faker.code().isbn13()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Drone.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29","33","37","41","45","49","53","57","61","65","69","73","77","81","85","89","93","97","101","105","109","114"],"fullExpression":"resolve(\"drone.name\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["21","25","29","33","37","41","45","49","53","57","61","65","69","77","81","85","93"],"fullExpression":"faker.numerify(resolve(\"drone.weight\"))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/idnumbers/EsMXIdNumberTest.java":[{"declaringType":"net.datafaker.providers.base.IdNumber","methodSignature":"validEsMXSsn()","methodName":"validEsMXSsn","lineNumber":["28"],"fullExpression":"idNumber.validEsMXSsn()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["21","22","28","29"],"fullExpression":"assertThat(idNumber.valid())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.IdNumber","methodSignature":"valid()","methodName":"valid","lineNumber":["21"],"fullExpression":"idNumber.valid()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.IdNumber","methodSignature":"invalid()","methodName":"invalid","lineNumber":["22"],"fullExpression":"idNumber.invalid()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"idNumber()","methodName":"idNumber","lineNumber":["20","27"],"fullExpression":"ES_MX_FAKER.idNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.IdNumber","methodSignature":"invalidEsMXSsn()","methodName":"invalidEsMXSsn","lineNumber":["29"],"fullExpression":"idNumber.invalidEsMXSsn()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.util.regex.Pattern)","methodName":"matches","lineNumber":["21","22","28","29"],"fullExpression":"assertThat(idNumber.valid()).matches(REGEX)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Color.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["21"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Color","methodSignature":"hex(boolean)","methodName":"hex","lineNumber":["17"],"fullExpression":"hex(true)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"hex(int)","methodName":"hex","lineNumber":["21"],"fullExpression":"faker.random().hex(6)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13"],"fullExpression":"resolve(\"color.name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getProvider(java.lang.Class<AP>, java.util.function.Function<PR, AP>)","methodName":"getProvider","lineNumber":["7","11","15","19","23","27","31","35","39","43","47","51","55","59","63","67","71","75","79","83","87","91","95","99","103","107","111","115","119","123","127","132","136","140","144","148","152","156","160","164","168","172","176","180","184","188","192","196","200","204","208","212","216","220","224","228","232","236","240","244","248","252","256","260","264","268","272","276","280","284","288","292","296"],"fullExpression":"getProvider(AquaTeenHungerForce.class, AquaTeenHungerForce::new)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Superhero.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29"],"fullExpression":"resolve(\"superhero.name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"twin_peaks.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/DoctorWho.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31","35","39"],"fullExpression":"resolve(\"dr_who.character\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/CountryTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["18"],"fullExpression":"assertThat(flag)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Country","methodSignature":"flag()","methodName":"flag","lineNumber":["17"],"fullExpression":"country.flag()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["18"],"fullExpression":"assertThat(flag).matches(\"^https://flags.fmcdn\\\\.net/data/flags/w580/[a-zA-Z0-9_]+\\\\.png$\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/formats/XmlTest.java":[{"declaringType":"net.datafaker.sequence.FakeStream","methodSignature":"get()","methodName":"get","lineNumber":["122","127","153","157"],"fullExpression":"address.get()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["30","58"],"fullExpression":"assertThat(xmlTransformer.generate(schema, 1)).isEqualTo(expected)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.formats.XmlTest","methodSignature":"map(java.util.Map.Entry<java.lang.String, java.lang.String>...)","methodName":"map","lineNumber":["175","178","197","200"],"fullExpression":"map(entry(\"attribute1\", \"value1\"), entry(\"attribute2\", \"value2\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["128","158"],"fullExpression":"assertThat(xml).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["167","189"],"fullExpression":"assertThat(xml.generate(true)).isEqualTo(expected)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Field","methodSignature":"compositeField(java.lang.String, net.datafaker.transformations.Field<MyObject, MyType>[])","methodName":"compositeField","lineNumber":["38","42","46","66","70","74","139","149"],"fullExpression":"compositeField(\"root\", new Field[] { field(\"attribute1\", () -> \"value1\"), field(\"attribute2\", () -> \"value2\") })","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.formats.Xml","methodSignature":"generate()","methodName":"generate","lineNumber":["189"],"fullExpression":"xml.generate()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.formats.XmlTest","methodSignature":"getNumberOfLines(java.lang.String)","methodName":"getNumberOfLines","lineNumber":["97","129","159"],"fullExpression":"getNumberOfLines(xml)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"address()","methodName":"address","lineNumber":["110","111","112","141","142","143"],"fullExpression":"faker.address()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"lastName()","methodName":"lastName","lineNumber":["121","152"],"fullExpression":"faker.name().lastName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"name()","methodName":"name","lineNumber":["120","121","151","152"],"fullExpression":"faker.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"stream()","methodName":"stream","lineNumber":["106","116","137","147"],"fullExpression":"faker.<SimpleField<String, List<Object>>>stream()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.formats.XmlTest","methodSignature":"entry(java.lang.String, java.lang.String)","methodName":"entry","lineNumber":["175","175","178","178","197","197","200","200"],"fullExpression":"entry(\"attribute1\", \"value1\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["128","158","167","189"],"fullExpression":"assertThat(xml)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.XmlTransformer.XmlTransformerBuilder","methodSignature":"pretty(boolean)","methodName":"pretty","lineNumber":["57","92","126","156"],"fullExpression":"new XmlTransformer.XmlTransformerBuilder<String>().pretty(true)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"country()","methodName":"country","lineNumber":["110","141"],"fullExpression":"faker.address().country()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"maxLen(int)","methodName":"maxLen","lineNumber":["106","116","137","147"],"fullExpression":"faker.<SimpleField<String, List<Object>>>stream().suppliers(() -> field(\"address\", () -> List.of(field(\"country\", () -> faker.address().country()), field(\"city\", () -> faker.address().city()), field(\"streetAddress\", () -> faker.address().streetAddress())))).maxLen(3)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isEqualTo(int)","methodName":"isEqualTo","lineNumber":["98","130","160"],"fullExpression":"assertThat(numberOfLines).isEqualTo(4)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"city()","methodName":"city","lineNumber":["111","142"],"fullExpression":"faker.address().city()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"streetAddress()","methodName":"streetAddress","lineNumber":["112","143"],"fullExpression":"faker.address().streetAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.XmlTransformer.XmlTransformerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["29","57","92","126","156"],"fullExpression":"new XmlTransformer.XmlTransformerBuilder<String>().build()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.XmlTransformer","methodSignature":"generate(net.datafaker.transformations.Schema<IN, ?>, int)","methodName":"generate","lineNumber":["30","58"],"fullExpression":"xmlTransformer.generate(schema, 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.formats.Xml","methodSignature":"generate(boolean)","methodName":"generate","lineNumber":["167"],"fullExpression":"xml.generate(true)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"firstName()","methodName":"firstName","lineNumber":["120","151"],"fullExpression":"faker.name().firstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.CharSequence)","methodName":"assertThat","lineNumber":["30","58"],"fullExpression":"assertThat(xmlTransformer.generate(schema, 1))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"suppliers(java.util.function.Supplier<T>...)","methodName":"suppliers","lineNumber":["94","106","116","137","147"],"fullExpression":"faker.<Name>collection().suppliers(faker::name)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"collection()","methodName":"collection","lineNumber":["94"],"fullExpression":"faker.<Name>collection()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.jupiter.params.provider.Arguments","methodSignature":"of(java.lang.Object...)","methodName":"of","lineNumber":["172","173","174","177","181","194","195","196","199","203"],"fullExpression":"Arguments.of(new Xml.XmlNode(\"root\", Collections.emptyList()), \"<root/>\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["98","130","160"],"fullExpression":"assertThat(numberOfLines)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/CryptoCoin.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13"],"fullExpression":"resolve(\"crypto_coin.coin\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"how_to_train_your_dragon.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29"],"fullExpression":"resolve(\"the_kingkiller_chronicle.books\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/MassEffect.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["16","20","24","28","32"],"fullExpression":"resolve(\"mass_effect.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23"],"fullExpression":"resolve(\"money_heist.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/App.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17"],"fullExpression":"faker.resolve(\"app.version\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","21"],"fullExpression":"resolve(\"app.name\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["17"],"fullExpression":"faker.numerify(faker.resolve(\"app.version\"))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Computer.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"options()","methodName":"options","lineNumber":["23"],"fullExpression":"faker.options()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31","35","38"],"fullExpression":"resolve(\"computer.type\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.String...)","methodName":"option","lineNumber":["23"],"fullExpression":"faker.options().option(\"linux\", \"macos\", \"windows\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/service/FakeValuesContext.java":[{"declaringType":"net.datafaker.internal.helper.SingletonLocale","methodSignature":"get(java.util.Locale)","methodName":"get","lineNumber":["31"],"fullExpression":"SingletonLocale.get(locale)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesContext","methodSignature":"language(java.util.Locale)","methodName":"language","lineNumber":["60"],"fullExpression":"language(locale)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.internal.helper.SingletonLocale","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["79"],"fullExpression":"sLocale.getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesContext","methodSignature":"getFilename(java.util.Locale)","methodName":"getFilename","lineNumber":["19","19","23"],"fullExpression":"getFilename(locale)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.internal.helper.SingletonLocale","methodSignature":"hashCode()","methodName":"hashCode","lineNumber":["113"],"fullExpression":"sLocale.hashCode()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Hobby.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13"],"fullExpression":"resolve(\"hobby.activity\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23"],"fullExpression":"resolve(\"fma_brotherhood.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/idnumbers/EsMXIdNumber.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["87","88","105","106","108","109"],"fullExpression":"f.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(char[])","methodName":"option","lineNumber":["55","56","57","58","60","62","63","64","65"],"fullExpression":"options.option(CONSONANT)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["87","88","105","106","108","109"],"fullExpression":"f.random().nextInt(1900, 2021)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"options()","methodName":"options","lineNumber":["51","77"],"fullExpression":"faker.options()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.String...)","methodName":"option","lineNumber":["61","77"],"fullExpression":"options.option(STATES)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/transformations/JavaObjectTransformer.java":[{"declaringType":"net.datafaker.transformations.Schema","methodSignature":"getFields()","methodName":"getFields","lineNumber":["74","124"],"fullExpression":"schema.getFields()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Transformer","methodSignature":"apply(IN, net.datafaker.transformations.Schema<IN, ?>)","methodName":"apply","lineNumber":["113"],"fullExpression":"apply(elem, schema)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JavaObjectTransformer","methodSignature":"getObject(net.datafaker.transformations.Schema<java.lang.Object, ?>, java.lang.Object, java.lang.reflect.Constructor<?>)","methodName":"getObject","lineNumber":["48","56"],"fullExpression":"getObject(schema, result, recordConstructor)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence","methodSignature":"isInfinite()","methodName":"isInfinite","lineNumber":["102"],"fullExpression":"((FakeSequence) input).isInfinite()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Field","methodSignature":"transform(IN)","methodName":"transform","lineNumber":["127"],"fullExpression":"fields[i].transform(result)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JavaObjectTransformer","methodSignature":"hasParameterlessPublicConstructor(java.lang.Class<?>)","methodName":"hasParameterlessPublicConstructor","lineNumber":["49"],"fullExpression":"hasParameterlessPublicConstructor(clazz)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence","methodSignature":"get()","methodName":"get","lineNumber":["105"],"fullExpression":"((FakeSequence<Object>) input).get()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Field","methodSignature":"getName()","methodName":"getName","lineNumber":["79"],"fullExpression":"fields[i].getName()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/idnumbers/PtNifIdNumber.java":[{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"digits(int)","methodName":"digits","lineNumber":["21","32","35"],"fullExpression":"faker.number().digits(8)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["30"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(E...)","methodName":"option","lineNumber":["31"],"fullExpression":"faker.options().option(VALID_FIRST_DIGITS)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"number()","methodName":"number","lineNumber":["21","32","35"],"fullExpression":"faker.number()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextBoolean()","methodName":"nextBoolean","lineNumber":["30"],"fullExpression":"faker.random().nextBoolean()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"options()","methodName":"options","lineNumber":["31","34"],"fullExpression":"faker.options()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.String...)","methodName":"option","lineNumber":["34"],"fullExpression":"faker.options().option(VALID_FIRST_DOUBLE_DIGITS)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Restaurant.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29","33"],"fullExpression":"resolve(\"restaurant.name_prefix\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"bothify(java.lang.String, boolean)","methodName":"bothify","lineNumber":["13"],"fullExpression":"faker.bothify(resolve(\"restaurant.name_prefix\"), true)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Simpsons.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23"],"fullExpression":"resolve(\"simpsons.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Horse.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17"],"fullExpression":"resolve(\"creature.horse.name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/entertainment/OscarMovieTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["15","30","35"],"fullExpression":"assertThat(oscarMovie.actor())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.entertainment.OscarMovie","methodSignature":"quote()","methodName":"quote","lineNumber":["25"],"fullExpression":"oscarMovie.quote()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.entertainment.OscarMovie","methodSignature":"actor()","methodName":"actor","lineNumber":["15"],"fullExpression":"oscarMovie.actor()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["20","25"],"fullExpression":"assertThat(isNullOrEmpty(oscarMovie.movieName()))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.entertainment.OscarMovie","methodSignature":"movieName()","methodName":"movieName","lineNumber":["20"],"fullExpression":"oscarMovie.movieName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.entertainment.OscarMovie","methodSignature":"character()","methodName":"character","lineNumber":["30"],"fullExpression":"oscarMovie.character()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.entertainment.OscarMovie","methodSignature":"releaseDate()","methodName":"releaseDate","lineNumber":["35"],"fullExpression":"oscarMovie.releaseDate()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isFalse()","methodName":"isFalse","lineNumber":["20","25"],"fullExpression":"assertThat(isNullOrEmpty(oscarMovie.movieName())).isFalse()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.util.Strings","methodSignature":"isNullOrEmpty(java.lang.String)","methodName":"isNullOrEmpty","lineNumber":["20","25"],"fullExpression":"isNullOrEmpty(oscarMovie.movieName())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["15","30","35"],"fullExpression":"assertThat(oscarMovie.actor()).matches(\"\\\\P{Cc}+\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/internal/helper/WordUtilsTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["11","12","14","15","16","17","22","23"],"fullExpression":"assertThat(WordUtils.capitalize(\"w\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNull()","methodName":"isNull","lineNumber":["22"],"fullExpression":"assertThat(WordUtils.capitalize(null)).isNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["11","12","14","15","16","17"],"fullExpression":"assertThat(WordUtils.capitalize(\"w\")).isEqualTo(\"W\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.internal.helper.WordUtils","methodSignature":"capitalize(java.lang.String)","methodName":"capitalize","lineNumber":["11","12","14","15","16","17","22","23"],"fullExpression":"WordUtils.capitalize(\"w\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isEmpty()","methodName":"isEmpty","lineNumber":["23"],"fullExpression":"assertThat(WordUtils.capitalize(\"\")).isEmpty()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Military.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31"],"fullExpression":"resolve(\"military.army_rank\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Size.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13"],"fullExpression":"resolve(\"size.adjective\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Time.java":[{"declaringType":"net.datafaker.providers.base.Time","methodSignature":"past(int, java.time.temporal.ChronoUnit)","methodName":"past","lineNumber":["96"],"fullExpression":"past(atMost, unit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"number()","methodName":"number","lineNumber":["27","55","83","111","144"],"fullExpression":"faker.number()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Time","methodSignature":"past(int, int, java.time.temporal.ChronoUnit)","methodName":"past","lineNumber":["124"],"fullExpression":"past(atMost, minimum, unit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Time","methodSignature":"future(int, java.time.temporal.ChronoUnit)","methodName":"future","lineNumber":["40"],"fullExpression":"future(atMost, unit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Time","methodSignature":"between(java.time.LocalTime, java.time.LocalTime)","methodName":"between","lineNumber":["157"],"fullExpression":"between(from, to)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"numberBetween(long, long)","methodName":"numberBetween","lineNumber":["27","55","83","111","144"],"fullExpression":"faker.number().numberBetween(time, atMostTime)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Time","methodSignature":"future(int, int, java.time.temporal.ChronoUnit)","methodName":"future","lineNumber":["69"],"fullExpression":"future(atMost, minimum, unit)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/RandomFakerTest.java":[{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"letterify(java.lang.String)","methodName":"letterify","lineNumber":["36","39"],"fullExpression":"faker.letterify(\"???\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"emailAddress()","methodName":"emailAddress","lineNumber":["56","59"],"fullExpression":"faker.internet().emailAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["30","40","50","60"],"fullExpression":"assertThat(firstInvocation)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"internet()","methodName":"internet","lineNumber":["56","59"],"fullExpression":"faker.internet()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["30","40","50","60"],"fullExpression":"assertThat(firstInvocation).isEqualTo(secondInvocation)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"name()","methodName":"name","lineNumber":["46","49"],"fullExpression":"faker.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.RandomFakerTest","methodSignature":"resetRandomSeed()","methodName":"resetRandomSeed","lineNumber":["25","28","35","38","45","48","55","58"],"fullExpression":"resetRandomSeed()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["26","29"],"fullExpression":"faker.numerify(\"###\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"name()","methodName":"name","lineNumber":["46","49"],"fullExpression":"faker.name().name()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/FunnyName.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13"],"fullExpression":"resolve(\"funny_name.name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/GarmentSize.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["21"],"fullExpression":"resolve(\"garments_sizes.sizes\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/PhoneNumberTest.java":[{"declaringType":"net.datafaker.providers.base.PhoneNumber","methodSignature":"phoneNumber()","methodName":"phoneNumber","lineNumber":["32","61"],"fullExpression":"phoneNumber.phoneNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.google.i18n.phonenumbers.PhoneNumberUtil","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["56","77"],"fullExpression":"PhoneNumberUtil.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["23","31","32","46"],"fullExpression":"assertThat(cellPhone)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.PhoneNumber","methodSignature":"phoneNumberInternational()","methodName":"phoneNumberInternational","lineNumber":["82"],"fullExpression":"phoneNumberProvider.phoneNumberInternational()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isLessThan(int)","methodName":"isLessThan","lineNumber":["88"],"fullExpression":"assertThat(errorCount).isLessThan(25)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["23","31","32","46"],"fullExpression":"assertThat(cellPhone).matches(\"\\\\(?\\\\d+\\\\)?([- .]\\\\d+){1,3}\")","currentLayer":0,"declarationInfo":null},{"declaringType":"com.google.i18n.phonenumbers.PhoneNumberUtil","methodSignature":"parse(java.lang.CharSequence, java.lang.String)","methodName":"parse","lineNumber":["63","83"],"fullExpression":"util.parse(phoneNumber, phoneNumberRegion)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"phoneNumber()","methodName":"phoneNumber","lineNumber":["22","29","44","59","80"],"fullExpression":"f.phoneNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.PhoneNumber","methodSignature":"cellPhone()","methodName":"cellPhone","lineNumber":["22","31","46"],"fullExpression":"f.phoneNumber().cellPhone()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isLessThanOrEqualTo(int)","methodName":"isLessThanOrEqualTo","lineNumber":["71"],"fullExpression":"assertThat(errorCount).isLessThanOrEqualTo(15)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.google.i18n.phonenumbers.PhoneNumberUtil","methodSignature":"isValidNumberForRegion(com.google.i18n.phonenumbers.Phonenumber.PhoneNumber, java.lang.String)","methodName":"isValidNumberForRegion","lineNumber":["64","84"],"fullExpression":"util.isValidNumberForRegion(proto, phoneNumberRegion)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.jupiter.params.provider.Arguments","methodSignature":"of(java.lang.Object...)","methodName":"of","lineNumber":["95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150"],"fullExpression":"Arguments.of(new Locale(\"en\", \"US\"), \"US\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["71","88"],"fullExpression":"assertThat(errorCount)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Tire.java":[{"declaringType":"net.datafaker.providers.base.Tire","methodSignature":"code()","methodName":"code","lineNumber":["32","42"],"fullExpression":"code()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Tire","methodSignature":"code(java.lang.String)","methodName":"code","lineNumber":["42"],"fullExpression":"code(\"P\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["23","46","50","54","58","62","66","70"],"fullExpression":"resolve(\"tire.code\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/integration/UkLocalDirectivesTest.java":[{"declaringType":"org.assertj.core.api.Descriptable","methodSignature":"as(java.lang.String, java.lang.Object...)","methodName":"as","lineNumber":["43"],"fullExpression":"assertThat(startsWithFemPrefix || startsWithMascPrefix).as(\"the streetname starts with a fem or masc prefix\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"streetName()","methodName":"streetName","lineNumber":["28"],"fullExpression":"new BaseFaker(uk).address().streetName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"address()","methodName":"address","lineNumber":["28"],"fullExpression":"new BaseFaker(uk).address()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["43"],"fullExpression":"assertThat(startsWithFemPrefix || startsWithMascPrefix)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/sport/Chess.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27"],"fullExpression":"resolve(\"chess.players\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29","33"],"fullExpression":"resolve(\"games.warhammer_fantasy.heros\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/food/Food.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31","35","39","43","44"],"fullExpression":"resolve(\"food.ingredients\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/StarCraft.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29"],"fullExpression":"resolve(\"starcraft.units\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/PassportTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["13","19","27","33","39","46","52","58","65","71","77"],"fullExpression":"assertThat(new BaseFaker().passport().valid())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"passport()","methodName":"passport","lineNumber":["13","19","27","33","39","46","52","58","65","71","77"],"fullExpression":"new BaseFaker().passport()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Passport","methodSignature":"valid()","methodName":"valid","lineNumber":["13","19","27","33","39","46","52","58","65","71","77"],"fullExpression":"new BaseFaker().passport().valid()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["13","19","27","33","39","46","52","58","71","77"],"fullExpression":"assertThat(new BaseFaker().passport().valid()).hasSize(9)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["65"],"fullExpression":"assertThat(new BaseFaker(new Locale(\"es\")).passport().valid()).matches(\"[A-z0-9]{2,3}[0-9]{6}\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/TimeTest.java":[{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["74"],"fullExpression":"assertThat(LocalTime.ofNanoOfDay(time)).isEqualTo(now)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["81"],"fullExpression":"assertThatThrownBy(() -> faker.time().between(then, now)).isInstanceOf(IllegalArgumentException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLocalTimeAssert","methodSignature":"isAfter(java.time.LocalTime)","methodName":"isAfter","lineNumber":["19","30"],"fullExpression":"assertThat(LocalTime.ofNanoOfDay(future)).isAfter(now)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["81"],"fullExpression":"assertThatThrownBy(() -> faker.time().between(then, now))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.time.LocalTime)","methodName":"assertThat","lineNumber":["19","30","42","53","63","74"],"fullExpression":"assertThat(LocalTime.ofNanoOfDay(future))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLocalTimeAssert","methodSignature":"isBefore(java.time.LocalTime)","methodName":"isBefore","lineNumber":["42","53","63"],"fullExpression":"assertThat(LocalTime.ofNanoOfDay(past)).isBefore(now)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/idnumbers/NricNumber.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["45"],"fullExpression":"f.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["48"],"fullExpression":"random.nextInt(0, 9)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/entertainment/DuneTest.java":[{"declaringType":"net.datafaker.providers.entertainment.Dune","methodSignature":"saying(net.datafaker.providers.entertainment.Dune.Saying)","methodName":"saying","lineNumber":["35","36","37","38","39"],"fullExpression":"dune.saying(Dune.Saying.BENE_GESSERIT)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.entertainment.Dune","methodSignature":"quote(net.datafaker.providers.entertainment.Dune.Quote)","methodName":"quote","lineNumber":["17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34"],"fullExpression":"dune.quote(Dune.Quote.ALIA)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/OscarMovie.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["28","29"],"fullExpression":"this.faker.resolve(\"oscar_movie.year.years\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["53","62","71","80","89"],"fullExpression":"resolve(str.get().concat(\".actor\"))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/service/FakeValues.java":[{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"readFromStream(java.io.InputStream)","methodName":"readFromStream","lineNumber":["73","97","101"],"fullExpression":"readFromStream(stream)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"loadFromUrl()","methodName":"loadFromUrl","lineNumber":["81","83"],"fullExpression":"loadFromUrl()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.yaml.snakeyaml.Yaml","methodSignature":"loadAs(java.io.InputStream, java.lang.Class<? super T>)","methodName":"loadAs","lineNumber":["180"],"fullExpression":"new Yaml().loadAs(stream, Map.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"toJavaNames(java.lang.String, boolean)","methodName":"toJavaNames","lineNumber":["128","137"],"fullExpression":"toJavaNames(e.getKey(), true)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"loadValues()","methodName":"loadValues","lineNumber":["30","57"],"fullExpression":"loadValues()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesContext","methodSignature":"setPath(java.lang.String)","methodName":"setPath","lineNumber":["35"],"fullExpression":"fakeValuesContext.setPath(values == null || values.isEmpty() ? null : values.keySet().iterator().next())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesContext","methodSignature":"getUrl()","methodName":"getUrl","lineNumber":["68"],"fullExpression":"fakeValuesContext.getUrl()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesContext","methodSignature":"getPath()","methodName":"getPath","lineNumber":["26","189","193"],"fullExpression":"fakeValuesContext.getPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesContext","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["85","181","197"],"fullExpression":"fakeValuesContext.getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesContext","methodSignature":"getFilename()","methodName":"getFilename","lineNumber":["86","183"],"fullExpression":"fakeValuesContext.getFilename()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"enrichMapWithJavaNames(java.util.Map<java.lang.String, java.lang.Object>)","methodName":"enrichMapWithJavaNames","lineNumber":["98","102"],"fullExpression":"enrichMapWithJavaNames(result)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/BaseFaker.java":[{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"setRandomService(net.datafaker.service.RandomService)","methodName":"setRandomService","lineNumber":["88","94","103","110"],"fullExpression":"context.setRandomService(new RandomService(new Random(seed)))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"letterify(java.lang.String, net.datafaker.service.FakerContext)","methodName":"letterify","lineNumber":["140"],"fullExpression":"fakeValuesService.letterify(letterString, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"csv(java.lang.String, char, boolean, int, java.lang.String...)","methodName":"csv","lineNumber":["262"],"fullExpression":"fakeValuesService().csv(separator, quote, withHeader, limit, columnExpressions)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"addPath(java.util.Locale, java.nio.file.Path)","methodName":"addPath","lineNumber":["289"],"fullExpression":"fakeValuesService().addPath(locale, path)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getContext()","methodName":"getContext","lineNumber":["326","369","370"],"fullExpression":"faker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"templatify(java.lang.String, java.util.Map<java.lang.Character, java.lang.String[]>, net.datafaker.service.FakerContext)","methodName":"templatify","lineNumber":["219"],"fullExpression":"fakeValuesService().templatify(string, optionsMap, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"addUrl(java.util.Locale, java.net.URL)","methodName":"addUrl","lineNumber":["301"],"fullExpression":"fakeValuesService().addUrl(locale, url)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"resolve(java.lang.String, java.lang.Object, net.datafaker.providers.base.BaseFaker, net.datafaker.service.FakerContext)","methodName":"resolve","lineNumber":["409"],"fullExpression":"this.fakeValuesService.resolve(key, this, this, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"updateFakeValuesInterfaceMap(java.util.List<net.datafaker.internal.helper.SingletonLocale>)","methodName":"updateFakeValuesInterfaceMap","lineNumber":["61","73","80"],"fullExpression":"fakeValuesService.updateFakeValuesInterfaceMap(context.getLocaleChain())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"csv(int, java.lang.String...)","methodName":"csv","lineNumber":["239"],"fullExpression":"fakeValuesService().csv(limit, columnExpressions)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"bothify(java.lang.String, net.datafaker.service.FakerContext, boolean)","methodName":"bothify","lineNumber":["166"],"fullExpression":"fakeValuesService.bothify(string, context, isUpper)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"examplify(java.lang.String, net.datafaker.service.FakerContext)","methodName":"examplify","lineNumber":["189"],"fullExpression":"fakeValuesService.examplify(example, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"setCurrentLocale(java.util.Locale)","methodName":"setCurrentLocale","lineNumber":["72","79","104","111"],"fullExpression":"context.setCurrentLocale(locale)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocaleChain()","methodName":"getLocaleChain","lineNumber":["61","73","80"],"fullExpression":"context.getLocaleChain()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getRandomService()","methodName":"getRandomService","lineNumber":["85","100","274"],"fullExpression":"context.getRandomService()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"regexify(java.lang.String, net.datafaker.service.FakerContext)","methodName":"regexify","lineNumber":["173"],"fullExpression":"fakeValuesService.regexify(regex, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"faker(net.datafaker.providers.base.BaseProviders)","methodName":"faker","lineNumber":["380","385","389","396","401","405"],"fullExpression":"new FakeCollection.Builder<T>().faker(this)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.annotations.FakeResolver","methodSignature":"generate(net.datafaker.transformations.Schema<java.lang.Object, ?>)","methodName":"generate","lineNumber":["306","311"],"fullExpression":"fakeFactory.generate(null)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["69","99"],"fullExpression":"context.getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"numerify(java.lang.String, net.datafaker.service.FakerContext)","methodName":"numerify","lineNumber":["127"],"fullExpression":"fakeValuesService.numerify(numberString, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"letterify(java.lang.String, net.datafaker.service.FakerContext, boolean)","methodName":"letterify","lineNumber":["150"],"fullExpression":"fakeValuesService.letterify(letterString, context, isUpper)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"resolve(java.lang.String, java.lang.Object, net.datafaker.providers.base.ProviderRegistration, java.util.function.Supplier<java.lang.String>, net.datafaker.service.FakerContext)","methodName":"resolve","lineNumber":["413"],"fullExpression":"this.fakeValuesService.resolve(key, this, this, message, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"json(java.lang.String...)","methodName":"json","lineNumber":["266"],"fullExpression":"fakeValuesService().json(fieldExpressions)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"templatify(java.lang.String, char, net.datafaker.service.FakerContext, java.lang.String...)","methodName":"templatify","lineNumber":["204"],"fullExpression":"fakeValuesService().templatify(string, char2replace, context, options)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"getContext()","methodName":"getContext","lineNumber":["434"],"fullExpression":"getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"bothify(java.lang.String, net.datafaker.service.FakerContext)","methodName":"bothify","lineNumber":["158"],"fullExpression":"fakeValuesService.bothify(string, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"fakeValuesService()","methodName":"fakeValuesService","lineNumber":["204","219","239","262","266","270","289","301"],"fullExpression":"fakeValuesService()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"jsona(java.lang.String...)","methodName":"jsona","lineNumber":["270"],"fullExpression":"fakeValuesService().jsona(fieldExpressions)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"expression(java.lang.String, net.datafaker.providers.base.BaseFaker, net.datafaker.service.FakerContext)","methodName":"expression","lineNumber":["434"],"fullExpression":"this.fakeValuesService.expression(expression, this, getContext())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.annotations.FakeResolver","methodSignature":"of(java.lang.Class<T>)","methodName":"of","lineNumber":["305","310"],"fullExpression":"FakeResolver.of(clazz)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/sequence/FakeStream.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["59"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeStream","methodSignature":"get()","methodName":"get","lineNumber":["31"],"fullExpression":"get()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["21"],"fullExpression":"randomService.nextInt(minLength, maxLength)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeStream","methodSignature":"isInfinite()","methodName":"isInfinite","lineNumber":["17"],"fullExpression":"isInfinite()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/SlackEmojiTest.java":[{"declaringType":"net.datafaker.providers.base.SlackEmoji","methodSignature":"activity()","methodName":"activity","lineNumber":["34"],"fullExpression":"slackEmoji.activity()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["14","19","24","29","34","39","44","49","54"],"fullExpression":"assertThat(slackEmoji.people())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.SlackEmoji","methodSignature":"emoji()","methodName":"emoji","lineNumber":["54"],"fullExpression":"slackEmoji.emoji()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.SlackEmoji","methodSignature":"foodAndDrink()","methodName":"foodAndDrink","lineNumber":["24"],"fullExpression":"slackEmoji.foodAndDrink()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.SlackEmoji","methodSignature":"objectsAndSymbols()","methodName":"objectsAndSymbols","lineNumber":["44"],"fullExpression":"slackEmoji.objectsAndSymbols()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.SlackEmoji","methodSignature":"celebration()","methodName":"celebration","lineNumber":["29"],"fullExpression":"slackEmoji.celebration()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.SlackEmoji","methodSignature":"custom()","methodName":"custom","lineNumber":["49"],"fullExpression":"slackEmoji.custom()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.SlackEmoji","methodSignature":"people()","methodName":"people","lineNumber":["14"],"fullExpression":"slackEmoji.people()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.SlackEmoji","methodSignature":"travelAndPlaces()","methodName":"travelAndPlaces","lineNumber":["39"],"fullExpression":"slackEmoji.travelAndPlaces()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["14","19","24","29","34","39","44","49","54"],"fullExpression":"assertThat(slackEmoji.people()).matches(EMOTICON_REGEX)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.SlackEmoji","methodSignature":"nature()","methodName":"nature","lineNumber":["19"],"fullExpression":"slackEmoji.nature()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/script/ProvidersDocsGenerator.java":[{"declaringType":"net.datafaker.script.ProvidersDocsGenerator","methodSignature":"extractGroupName(java.lang.Class<?>)","methodName":"extractGroupName","lineNumber":["69","169"],"fullExpression":"extractGroupName(clazz)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator.Column","methodSignature":"addSpaceBetweenNameOfProvider(java.lang.String)","methodName":"addSpaceBetweenNameOfProvider","lineNumber":["254"],"fullExpression":"addSpaceBetweenNameOfProvider(clazzName)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.reflections.Reflections","methodSignature":"get(org.reflections.util.QueryFunction<org.reflections.Store, T>)","methodName":"get","lineNumber":["61"],"fullExpression":"reflections.get(SubTypes.of(AbstractProvider.class).asClass())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator.Column","methodSignature":"generateEmptyRow(char)","methodName":"generateEmptyRow","lineNumber":["138"],"fullExpression":"Column.generateEmptyRow('-')","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator.Column","methodSignature":"getName(java.lang.String, java.lang.String)","methodName":"getName","lineNumber":["227"],"fullExpression":"getName(clazzName, groupName.toLowerCase(Locale.ROOT))","currentLayer":0,"declarationInfo":null},{"declaringType":"com.github.javaparser.ast.comments.CommentsCollection","methodSignature":"getJavadocComments()","methodName":"getJavadocComments","lineNumber":["102"],"fullExpression":"commentsCollection.get().getJavadocComments()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator","methodSignature":"initSubtypes()","methodName":"initSubtypes","lineNumber":["49"],"fullExpression":"providersDocsGenerator.initSubtypes()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator","methodSignature":"extractCommentFromJavadoc(java.lang.String)","methodName":"extractCommentFromJavadoc","lineNumber":["70","170"],"fullExpression":"extractCommentFromJavadoc(\"src/main/java/net/datafaker/providers/\" + groupName + \"/\" + clazz.getSimpleName() + \".java\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator.Column","methodSignature":"generateBaseHeaderRow(char, java.util.function.Function<java.lang.Integer, java.lang.String>)","methodName":"generateBaseHeaderRow","lineNumber":["208","212"],"fullExpression":"generateBaseHeaderRow(padSymbol, i -> \"\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.reflections.util.QueryFunction","methodSignature":"asClass(java.lang.ClassLoader...)","methodName":"asClass","lineNumber":["61"],"fullExpression":"SubTypes.of(AbstractProvider.class).asClass()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator.Column","methodSignature":"generateRow(char, java.lang.String, java.lang.String, java.lang.String)","methodName":"generateRow","lineNumber":["71"],"fullExpression":"Column.generateRow(' ', clazz.getSimpleName(), comment, formatGroupName(groupName))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator","methodSignature":"constructHeaderInProvidersFile(java.io.Writer)","methodName":"constructHeaderInProvidersFile","lineNumber":["51"],"fullExpression":"providersDocsGenerator.constructHeaderInProvidersFile(writer)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.github.javaparser.ast.comments.Comment","methodSignature":"getContent()","methodName":"getContent","lineNumber":["111"],"fullExpression":"javadocComments.get().getContent()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator","methodSignature":"formatGroupName(java.lang.String)","methodName":"formatGroupName","lineNumber":["71"],"fullExpression":"formatGroupName(groupName)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator.Column","methodSignature":"getValue(java.lang.String)","methodName":"getValue","lineNumber":["171"],"fullExpression":"Column.SINCE.getValue(comment)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.google.common.base.Strings","methodSignature":"repeat(java.lang.String, int)","methodName":"repeat","lineNumber":["241"],"fullExpression":"Strings.repeat(String.valueOf(padSymbol), length - name.length() - 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator.Column","methodSignature":"generateColumn(java.lang.String, char, int)","methodName":"generateColumn","lineNumber":["227","230"],"fullExpression":"generateColumn(getName(clazzName, groupName.toLowerCase(Locale.ROOT)), padSymbol, NAME.length)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator.TextBlock","methodSignature":"getText()","methodName":"getText","lineNumber":["128","129"],"fullExpression":"TextBlock.HEADER.getText()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator.Column","methodSignature":"values()","methodName":"values","lineNumber":["212","218","219","228","229","233","233"],"fullExpression":"values()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator","methodSignature":"providersPerVersionTable()","methodName":"providersPerVersionTable","lineNumber":["130"],"fullExpression":"providersPerVersionTable()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.reflections.util.QueryBuilder","methodSignature":"of(java.lang.reflect.AnnotatedElement...)","methodName":"of","lineNumber":["61"],"fullExpression":"SubTypes.of(AbstractProvider.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.github.javaparser.JavaParser","methodSignature":"parse(java.io.File)","methodName":"parse","lineNumber":["95"],"fullExpression":"parser.parse(file)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator","methodSignature":"generateProvidersDocs(java.io.BufferedWriter)","methodName":"generateProvidersDocs","lineNumber":["52"],"fullExpression":"providersDocsGenerator.generateProvidersDocs(writer)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.github.javaparser.ParseResult","methodSignature":"getCommentsCollection()","methodName":"getCommentsCollection","lineNumber":["95"],"fullExpression":"parser.parse(file).getCommentsCollection()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator.Column","methodSignature":"generateHeaderRow(char)","methodName":"generateHeaderRow","lineNumber":["137"],"fullExpression":"Column.generateHeaderRow(' ')","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProvidersDocsGenerator","methodSignature":"extractProvidersPerVersion()","methodName":"extractProvidersPerVersion","lineNumber":["142"],"fullExpression":"extractProvidersPerVersion()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/FakeDuration.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["21"],"fullExpression":"this.faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextLong(long)","methodName":"nextLong","lineNumber":["21"],"fullExpression":"this.faker.random().nextLong(max + 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.FakeDuration","methodSignature":"getNumberBetween(long)","methodName":"getNumberBetween","lineNumber":["31","41","51","61"],"fullExpression":"getNumberBetween(minutesMax)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/NewGirl.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21"],"fullExpression":"resolve(\"new_girl.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/Zelda.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21"],"fullExpression":"resolve(\"games.zelda.games\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/InternetPasswordTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["24","25","42","63"],"fullExpression":"assertThat(isPasswordContainsDigit)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["24","25","42","63"],"fullExpression":"assertThat(isPasswordContainsDigit).isTrue()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29"],"fullExpression":"resolve(\"sword_art_online.real_name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/OlympicSport.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29","33"],"fullExpression":"resolve(\"olympic_sport.summer_olympics\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/AwsTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["52"],"fullExpression":"assertThat(region)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["52"],"fullExpression":"assertThat(region).matches(\"^[a-z]{2}-(south|east|north|west|northeast|central|southeast)-\\\\d$\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21"],"fullExpression":"resolve(\"rupaul.queens\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Departed.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["20","29","38"],"fullExpression":"resolve(\"departed.actors\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Stock.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29"],"fullExpression":"resolve(\"stock.symbol_nsdq\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/IdNumber.java":[{"declaringType":"net.datafaker.providers.base.IdNumber","methodSignature":"peselNumber(java.time.LocalDate, net.datafaker.idnumbers.PeselNumber.Gender)","methodName":"peselNumber","lineNumber":["141"],"fullExpression":"peselNumber(faker.date().birthday(0, 100).toInstant().atZone(ZoneId.systemDefault()).toLocalDate(), Gender.ANY)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["33"],"fullExpression":"resolve(\"id_number.valid\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"date()","methodName":"date","lineNumber":["141"],"fullExpression":"faker.date()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["37"],"fullExpression":"faker.resolve(\"id_number.invalid\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"birthday(int, int)","methodName":"birthday","lineNumber":["141"],"fullExpression":"faker.date().birthday(0, 100)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["37","173"],"fullExpression":"faker.numerify(faker.resolve(\"id_number.invalid\"))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Planet.java":[{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"meanSurfaceTemperature(net.datafaker.providers.base.Planet.PlanetName)","methodName":"meanSurfaceTemperature","lineNumber":["171"],"fullExpression":"meanSurfaceTemperature(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"meanDistanceFromTheSun(net.datafaker.providers.base.Planet.PlanetName)","methodName":"meanDistanceFromTheSun","lineNumber":["43","51"],"fullExpression":"meanDistanceFromTheSun(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"meanAirTemperature(net.datafaker.providers.base.Planet.PlanetName)","methodName":"meanAirTemperature","lineNumber":["179"],"fullExpression":"meanAirTemperature(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"density(net.datafaker.providers.base.Planet.PlanetName)","methodName":"density","lineNumber":["99"],"fullExpression":"density(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet.PlanetName","methodSignature":"getName()","methodName":"getName","lineNumber":["23","31","39","47","55","63","71","79","87","95","103","111","119","127","135","143","151","159","167","175","183","191","199","207","215"],"fullExpression":"planetName.getName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"symbol(net.datafaker.providers.base.Planet.PlanetName)","methodName":"symbol","lineNumber":["19"],"fullExpression":"symbol(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"eccentricity(net.datafaker.providers.base.Planet.PlanetName)","methodName":"eccentricity","lineNumber":["147"],"fullExpression":"eccentricity(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.Class<E>)","methodName":"option","lineNumber":["19","27","35","43","51","59","67","75","83","91","99","107","115","123","131","139","147","155","163","171","179","187","195","203","211"],"fullExpression":"faker.options().option(PlanetName.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"discoveryYear(net.datafaker.providers.base.Planet.PlanetName)","methodName":"discoveryYear","lineNumber":["35"],"fullExpression":"discoveryYear(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"rotationPeriod(net.datafaker.providers.base.Planet.PlanetName)","methodName":"rotationPeriod","lineNumber":["123"],"fullExpression":"rotationPeriod(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"planetaryDiscriminant(net.datafaker.providers.base.Planet.PlanetName)","methodName":"planetaryDiscriminant","lineNumber":["211"],"fullExpression":"planetaryDiscriminant(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"equatorialRadius(net.datafaker.providers.base.Planet.PlanetName)","methodName":"equatorialRadius","lineNumber":["59"],"fullExpression":"equatorialRadius(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"atmosphericComposition(net.datafaker.providers.base.Planet.PlanetName)","methodName":"atmosphericComposition","lineNumber":["187"],"fullExpression":"atmosphericComposition(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"rings(net.datafaker.providers.base.Planet.PlanetName)","methodName":"rings","lineNumber":["203"],"fullExpression":"rings(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"gravitationParameters(net.datafaker.providers.base.Planet.PlanetName)","methodName":"gravitationParameters","lineNumber":["91"],"fullExpression":"gravitationParameters(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"equatorialGravity(net.datafaker.providers.base.Planet.PlanetName)","methodName":"equatorialGravity","lineNumber":["107"],"fullExpression":"equatorialGravity(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"options()","methodName":"options","lineNumber":["19","27","35","43","51","59","67","75","83","91","99","107","115","123","131","139","147","155","163","171","179","187","195","203","211"],"fullExpression":"faker.options()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"orbitalPeriod(net.datafaker.providers.base.Planet.PlanetName)","methodName":"orbitalPeriod","lineNumber":["131"],"fullExpression":"orbitalPeriod(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"inclination(net.datafaker.providers.base.Planet.PlanetName)","methodName":"inclination","lineNumber":["155"],"fullExpression":"inclination(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","23","31","39","47","55","63","71","79","87","95","103","111","119","127","135","143","151","159","167","175","183","191","199","207","215"],"fullExpression":"resolve(\"planet.name\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"mass(net.datafaker.providers.base.Planet.PlanetName)","methodName":"mass","lineNumber":["83"],"fullExpression":"mass(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"meanOrbitalSpeed(net.datafaker.providers.base.Planet.PlanetName)","methodName":"meanOrbitalSpeed","lineNumber":["139"],"fullExpression":"meanOrbitalSpeed(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"escapeVelocity(net.datafaker.providers.base.Planet.PlanetName)","methodName":"escapeVelocity","lineNumber":["115"],"fullExpression":"escapeVelocity(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"classification(net.datafaker.providers.base.Planet.PlanetName)","methodName":"classification","lineNumber":["27"],"fullExpression":"classification(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"surfaceArea(net.datafaker.providers.base.Planet.PlanetName)","methodName":"surfaceArea","lineNumber":["67"],"fullExpression":"surfaceArea(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"volume(net.datafaker.providers.base.Planet.PlanetName)","methodName":"volume","lineNumber":["75"],"fullExpression":"volume(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"axialTilt(net.datafaker.providers.base.Planet.PlanetName)","methodName":"axialTilt","lineNumber":["163"],"fullExpression":"axialTilt(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"numberOfKnownMoons(net.datafaker.providers.base.Planet.PlanetName)","methodName":"numberOfKnownMoons","lineNumber":["195"],"fullExpression":"numberOfKnownMoons(faker.options().option(PlanetName.class))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/ElectricalComponents.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21"],"fullExpression":"resolve(\"electrical_components.active\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/University.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25"],"fullExpression":"resolve(\"university.name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Dune.java":[{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.Class<E>)","methodName":"option","lineNumber":["27","35"],"fullExpression":"faker.options().option(Dune.Quote.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.entertainment.Dune","methodSignature":"saying(net.datafaker.providers.entertainment.Dune.Saying)","methodName":"saying","lineNumber":["35"],"fullExpression":"saying(faker.options().option(Dune.Saying.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.entertainment.Dune","methodSignature":"quote(net.datafaker.providers.entertainment.Dune.Quote)","methodName":"quote","lineNumber":["27"],"fullExpression":"quote(faker.options().option(Dune.Quote.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"options()","methodName":"options","lineNumber":["27","35"],"fullExpression":"faker.options()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","31","39"],"fullExpression":"resolve(\"dune.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Mountain.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19"],"fullExpression":"resolve(\"mountain.name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/service/RegExpContext.java":[{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"hashCode()","methodName":"hashCode","lineNumber":["37"],"fullExpression":"context.hashCode()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/food/Beer.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31","35"],"fullExpression":"resolve(\"beer.brand\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Show.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23"],"fullExpression":"resolve(\"show.adult_musical\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/HalfLife.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"games.half_life.character\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/Touhou.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29","33"],"fullExpression":"resolve(\"touhou.full_name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/idnumbers/SvSEIdNumber.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"options()","methodName":"options","lineNumber":["21","37"],"fullExpression":"f.options()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["19","30"],"fullExpression":"f.numerify(\"###\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.String...)","methodName":"option","lineNumber":["21","37"],"fullExpression":"f.options().option(PLUS_MINUS)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"birthdayLocalDate(int, int)","methodName":"birthdayLocalDate","lineNumber":["20"],"fullExpression":"f.date().birthdayLocalDate(0, 100)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"date()","methodName":"date","lineNumber":["20"],"fullExpression":"f.date()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Team.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25"],"fullExpression":"resolve(\"team.name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/LanguageCode.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["22"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["22"],"fullExpression":"faker.random().nextInt(languages.length)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","22","26","30","34"],"fullExpression":"resolve(\"final_fantasy_xiv.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Code.java":[{"declaringType":"net.datafaker.providers.base.Code","methodSignature":"stripIsbnSeparator(java.lang.CharSequence)","methodName":"stripIsbnSeparator","lineNumber":["96","122","126","135"],"fullExpression":"stripIsbnSeparator(isbn10)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"regexify(java.lang.String)","methodName":"regexify","lineNumber":["208"],"fullExpression":"faker.regexify(regex)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"options()","methodName":"options","lineNumber":["35","49","159"],"fullExpression":"faker.options()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Code","methodSignature":"gtin13()","methodName":"gtin13","lineNumber":["204"],"fullExpression":"gtin13()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["151"],"fullExpression":"resolve(\"code.asin\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Code","methodSignature":"gtin8()","methodName":"gtin8","lineNumber":["192"],"fullExpression":"gtin8()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["63"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["63"],"fullExpression":"faker.random().nextInt(6)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"numberBetween(int, int)","methodName":"numberBetween","lineNumber":["165"],"fullExpression":"faker.number().numberBetween(0, 9)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Code","methodSignature":"isbn13CheckDigit(java.lang.CharSequence)","methodName":"isbn13CheckDigit","lineNumber":["120"],"fullExpression":"isbn13CheckDigit(isbn13)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"expression(java.lang.String)","methodName":"expression","lineNumber":["89","91","113","115","117"],"fullExpression":"faker.expression(\"#{code.isbn_group}\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"number()","methodName":"number","lineNumber":["165"],"fullExpression":"faker.number()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Code","methodSignature":"isbn10(boolean)","methodName":"isbn10","lineNumber":["79"],"fullExpression":"isbn10(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Code","methodSignature":"isbn10CheckDigit(java.lang.CharSequence)","methodName":"isbn10CheckDigit","lineNumber":["94"],"fullExpression":"isbn10CheckDigit(isbn10)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Code","methodSignature":"isbn13(boolean)","methodName":"isbn13","lineNumber":["103"],"fullExpression":"isbn13(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Code","methodSignature":"gtin(java.lang.String, int[])","methodName":"gtin","lineNumber":["196","200"],"fullExpression":"gtin(\"\\\\d{7}\", GTIN_8_CHECK_DIGITS)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.String...)","methodName":"option","lineNumber":["35","49","159"],"fullExpression":"faker.options().option(\"978\", \"979\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Chiquito.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25"],"fullExpression":"resolve(\"chiquito.expressions\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/idnumbers/PeselNumberTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["108"],"fullExpression":"assertThat(gotPesel)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isZero()","methodName":"isZero","lineNumber":["144","159"],"fullExpression":"assertThat(gotGenderDigit % 2).isZero()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["109"],"fullExpression":"assertThat(gotPesel.chars().allMatch(Character::isDigit))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["108"],"fullExpression":"assertThat(gotPesel).hasSize(PESEL_EXPECTED_LENGTH)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"date()","methodName":"date","lineNumber":["35"],"fullExpression":"new BaseFaker().date()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["109"],"fullExpression":"assertThat(gotPesel.chars().allMatch(Character::isDigit)).isTrue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isEqualTo(int)","methodName":"isEqualTo","lineNumber":["114","123","125","127","129","131","137"],"fullExpression":"assertThat(givenBirthDate.getYear() % 100).isEqualTo(gotYear)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"birthday(int, int)","methodName":"birthday","lineNumber":["35"],"fullExpression":"new BaseFaker().date().birthday(0, 100)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isOne()","methodName":"isOne","lineNumber":["147"],"fullExpression":"assertThat(gotGenderDigit % 2).isOne()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["83"],"fullExpression":"assertThatThrownBy(() -> peselNumber.get(givenBirthDate, Gender.ANY)).isInstanceOf(IllegalArgumentException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["83"],"fullExpression":"assertThatThrownBy(() -> peselNumber.get(givenBirthDate, Gender.ANY))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["114","123","125","127","129","131","137","144","147","159"],"fullExpression":"assertThat(givenBirthDate.getYear() % 100)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"fail(java.lang.String)","methodName":"fail","lineNumber":["121"],"fullExpression":"fail(\"Year is before 1800. Test case is broken.\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Brand.java":[{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"vehicle()","methodName":"vehicle","lineNumber":["20"],"fullExpression":"faker.vehicle()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["16","20","24"],"fullExpression":"resolve(\"brand.sport\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/food/FoodProviders.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getProvider(java.lang.Class<AP>, java.util.function.Function<PR, AP>)","methodName":"getProvider","lineNumber":["7","11","15","19","23"],"fullExpression":"getProvider(Beer.class, Beer::new)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/PrincessBride.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19"],"fullExpression":"resolve(\"princess_bride.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Coin.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["16"],"fullExpression":"resolve(\"coin.flip\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Kpop.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31","35"],"fullExpression":"resolve(\"kpop.i_groups\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/Myst.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29","33"],"fullExpression":"resolve(\"games.myst.games\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Address.java":[{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"lonLat(java.lang.String)","methodName":"lonLat","lineNumber":["133"],"fullExpression":"lonLat(\",\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["14","22","26","34","43","47","57","61","69","74","78","82","86","90","94","98","144","148","152","156","160","164"],"fullExpression":"resolve(\"address.street_name\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextDouble()","methodName":"nextDouble","lineNumber":["105","112"],"fullExpression":"faker.random().nextDouble()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getContext()","methodName":"getContext","lineNumber":["105","112"],"fullExpression":"faker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"bothify(java.lang.String)","methodName":"bothify","lineNumber":["43","47","57"],"fullExpression":"faker.bothify(resolve(\"address.postcode\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"latitude()","methodName":"latitude","lineNumber":["126","140"],"fullExpression":"latitude()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["105","112"],"fullExpression":"faker.getContext().getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["18","105","112"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["18"],"fullExpression":"faker.random().nextInt(1000)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"latLon(java.lang.String)","methodName":"latLon","lineNumber":["119"],"fullExpression":"latLon(\",\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"secondaryAddress()","methodName":"secondaryAddress","lineNumber":["28"],"fullExpression":"secondaryAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String, java.util.function.Supplier<java.lang.String>)","methodName":"resolve","lineNumber":["65"],"fullExpression":"resolve(\"address.county_by_postcode.\" + postCode, () -> \"County are not configured for postcode \" + postCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"longitude()","methodName":"longitude","lineNumber":["126","140"],"fullExpression":"longitude()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["34","156","164"],"fullExpression":"faker.numerify(resolve(\"address.secondary_address\"))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/sequence/FakeCollectionTest.java":[{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"hasSizeBetween(int, int)","methodName":"hasSizeBetween","lineNumber":["34","45","107"],"fullExpression":"assertThat(names).hasSizeBetween(3, 5)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNull()","methodName":"isNull","lineNumber":["109"],"fullExpression":"assertThat(name).isNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence","methodSignature":"isInfinite()","methodName":"isInfinite","lineNumber":["79","86"],"fullExpression":"digits.isInfinite()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.List<? extends ELEMENT>)","methodName":"assertThat","lineNumber":["34","45","56","62","71","94","107","132","145","155"],"fullExpression":"assertThat(names)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["146","147"],"fullExpression":"assertThat(names.get(0)).isEqualTo(\"Flor\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Field","methodSignature":"compositeField(java.lang.String, net.datafaker.transformations.Field<MyObject, MyType>[])","methodName":"compositeField","lineNumber":["232","248"],"fullExpression":"compositeField(null, new Field[] { field(\"country\", () -> faker.address().country()), field(\"city\", () -> faker.address().city()), field(\"zipcode\", () -> faker.address().zipCode()), field(\"streetAddress\", () -> faker.address().streetAddress()) })","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"isEmpty()","methodName":"isEmpty","lineNumber":["71"],"fullExpression":"assertThat(digits).isEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isFalse()","methodName":"isFalse","lineNumber":["79","86"],"fullExpression":"assertThat(digits.isInfinite()).isFalse()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOfAny(java.lang.Class<?>...)","methodName":"isInstanceOfAny","lineNumber":["157"],"fullExpression":"assertThat(object).isInstanceOfAny(Integer.class, String.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer.JsonTransformerBuilder","methodSignature":"formattedAs(net.datafaker.transformations.JsonTransformer.JsonTransformerBuilder.FormattedAs)","methodName":"formattedAs","lineNumber":["227"],"fullExpression":"JsonTransformer.<Name>builder().formattedAs(JsonTransformer.JsonTransformerBuilder.FormattedAs.JSON_ARRAY)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer","methodSignature":"builder()","methodName":"builder","lineNumber":["176"],"fullExpression":"CsvTransformer.<Data>builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"lastName()","methodName":"lastName","lineNumber":["141"],"fullExpression":"seededFaker.name().lastName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["116","163"],"fullExpression":"assertThatThrownBy(() -> faker.collection().suppliers(() -> faker.name().firstName(), () -> faker.name().lastName()).nullRate(nullRate).minLen(3).maxLen(5).build().get()).isInstanceOf(IllegalArgumentException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"name()","methodName":"name","lineNumber":["141","141"],"fullExpression":"seededFaker.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer.JsonTransformerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["227"],"fullExpression":"JsonTransformer.<Name>builder().formattedAs(JsonTransformer.JsonTransformerBuilder.FormattedAs.JSON_ARRAY).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["116","163"],"fullExpression":"assertThatThrownBy(() -> faker.collection().suppliers(() -> faker.name().firstName(), () -> faker.name().lastName()).nullRate(nullRate).minLen(3).maxLen(5).build().get())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(T)","methodName":"assertThat","lineNumber":["157"],"fullExpression":"assertThat(object)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["36","47","96","109","146","147","286"],"fullExpression":"assertThat(name)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer","methodSignature":"builder()","methodName":"builder","lineNumber":["202","227"],"fullExpression":"JsonTransformer.<Data>builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["79","86"],"fullExpression":"assertThat(digits.isInfinite())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["36","47","96","286"],"fullExpression":"assertThat(name).matches(\"[a-zA-Z']+\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isEqualTo(int)","methodName":"isEqualTo","lineNumber":["194","195","221","265","290"],"fullExpression":"assertThat(limit).isEqualTo(numberOfLines)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"firstName()","methodName":"firstName","lineNumber":["141"],"fullExpression":"seededFaker.name().firstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["56","62","94","132","145","155"],"fullExpression":"assertThat(digits).hasSize(10)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["194","195","221","265","290"],"fullExpression":"assertThat(limit)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Buffy.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31"],"fullExpression":"resolve(\"buffy.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/sport/Basketball.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["28","37","46","55"],"fullExpression":"resolve(\"basketball.teams\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31"],"fullExpression":"resolve(\"game_of_thrones.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/GreekPhilosopher.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","27"],"fullExpression":"resolve(\"greek_philosophers.names\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Dog.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29","33","37","41"],"fullExpression":"resolve(\"creature.dog.name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Country.java":[{"declaringType":"net.datafaker.providers.base.Money","methodSignature":"currencyCode()","methodName":"currencyCode","lineNumber":["43"],"fullExpression":"faker.money().currencyCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Money","methodSignature":"currency()","methodName":"currency","lineNumber":["35"],"fullExpression":"faker.money().currency()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","47"],"fullExpression":"resolve(\"country.code2\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"money()","methodName":"money","lineNumber":["35","43"],"fullExpression":"faker.money()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/ScienceTest.java":[{"declaringType":"net.datafaker.providers.base.Science","methodSignature":"quark()","methodName":"quark","lineNumber":["41"],"fullExpression":"science.quark()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["21","26","31","36","41","46","51"],"fullExpression":"assertThat(science.element())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Science","methodSignature":"element()","methodName":"element","lineNumber":["21"],"fullExpression":"science.element()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Science","methodSignature":"elementSymbol()","methodName":"elementSymbol","lineNumber":["26"],"fullExpression":"science.elementSymbol()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Science","methodSignature":"scientist()","methodName":"scientist","lineNumber":["31"],"fullExpression":"science.scientist()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Science","methodSignature":"bosons()","methodName":"bosons","lineNumber":["51"],"fullExpression":"science.bosons()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Science","methodSignature":"leptons()","methodName":"leptons","lineNumber":["46"],"fullExpression":"science.leptons()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Science","methodSignature":"tool()","methodName":"tool","lineNumber":["36"],"fullExpression":"science.tool()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["21","26","31","36","41","46","51"],"fullExpression":"assertThat(science.element()).matches(\"[A-Za-z ]+\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Spongebob.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"spongebob.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/BookTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["16"],"fullExpression":"assertThat(book.author())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Book","methodSignature":"author()","methodName":"author","lineNumber":["16"],"fullExpression":"book.author()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["16"],"fullExpression":"assertThat(book.author()).matches(\"([\\\\w']+\\\\.? ?){2,4}\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17"],"fullExpression":"resolve(\"programming_language.name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/IndustrySegments.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25"],"fullExpression":"resolve(\"industry_segments.industry\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Transport.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18"],"fullExpression":"resolve(\"transport.type\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Marketing.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15"],"fullExpression":"resolve(\"marketing.buzzwords\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"detective_conan.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Futurama.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29"],"fullExpression":"resolve(\"futurama.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/CultureSeries.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31","35"],"fullExpression":"resolve(\"culture_series.books\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["16","20","24","28"],"fullExpression":"resolve(\"cowboy_bebop.character\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/food/Coffee.java":[{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.Class<E>)","methodName":"option","lineNumber":["22"],"fullExpression":"faker.options().option(Coffee.Country.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"options()","methodName":"options","lineNumber":["22"],"fullExpression":"faker.options()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","26","30","34","38","42","46","50","54","58"],"fullExpression":"resolve(\"coffee.country\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.food.Coffee","methodSignature":"region(net.datafaker.providers.food.Coffee.Country)","methodName":"region","lineNumber":["22"],"fullExpression":"region(faker.options().option(Coffee.Country.class))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Nigeria.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["16","20","24","28","32"],"fullExpression":"resolve(KEY + \".places\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Device.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25"],"fullExpression":"resolve(\"device.model_name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Domain.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["78"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["80","81"],"fullExpression":"random.nextInt(3)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["29","43","44","59","60","61","83","87","90"],"fullExpression":"resolve(\"domain.top\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/idnumbers/EnIdNumber.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"regexify(java.lang.String)","methodName":"regexify","lineNumber":["16"],"fullExpression":"f.regexify(\"[0-8]\\\\d{2}-\\\\d{2}-\\\\d{4}\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/foods/HebrewFoodTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["28"],"fullExpression":"assertThat(food.measurement())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.foods.HebrewFoodTest","methodSignature":"getFaker()","methodName":"getFaker","lineNumber":["15","19"],"fullExpression":"getFaker()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.food.Food","methodSignature":"measurement()","methodName":"measurement","lineNumber":["28"],"fullExpression":"food.measurement()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.food.FoodProviders","methodSignature":"food()","methodName":"food","lineNumber":["15","19"],"fullExpression":"getFaker().food()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["28"],"fullExpression":"assertThat(food.measurement()).matches(\"([A-Za-z1-9/ ]+){2}\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/FakerConcurrencyModificationExceptionTest.java":[{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"random()","methodName":"random","lineNumber":["12","17"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextLong()","methodName":"nextLong","lineNumber":["12","17"],"fullExpression":"faker.random().nextLong()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/VehicleTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["112","152","153"],"fullExpression":"assertThat(carOptions.get(0))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.List<? extends ELEMENT>)","methodName":"assertThat","lineNumber":["99","108","119","128"],"fullExpression":"assertThat(carOptions)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"vehicle()","methodName":"vehicle","lineNumber":["152","153"],"fullExpression":"test.vehicle()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNotNull()","methodName":"isNotNull","lineNumber":["112"],"fullExpression":"assertThat(carOptions.get(0)).isNotNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"hasSizeGreaterThanOrEqualTo(int)","methodName":"hasSizeGreaterThanOrEqualTo","lineNumber":["99","108","119","128"],"fullExpression":"assertThat(carOptions).hasSizeGreaterThanOrEqualTo(5)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["152","153"],"fullExpression":"assertThat(test.vehicle().licensePlate(\"MB\")).matches(WORDS_MATCH)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Vehicle","methodSignature":"licensePlate(java.lang.String)","methodName":"licensePlate","lineNumber":["152","153"],"fullExpression":"test.vehicle().licensePlate(\"MB\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Aviation.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["146"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"numberBetween(int, int)","methodName":"numberBetween","lineNumber":["24","118","150","152"],"fullExpression":"faker.number().numberBetween(0, 6)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"number()","methodName":"number","lineNumber":["24","118","150","152"],"fullExpression":"faker.number()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"regexify(java.lang.String)","methodName":"regexify","lineNumber":["152"],"fullExpression":"faker.regexify(\"[A-Z]\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Aviation","methodSignature":"flight(java.lang.String)","methodName":"flight","lineNumber":["128"],"fullExpression":"flight(\"IATA\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextBoolean()","methodName":"nextBoolean","lineNumber":["146"],"fullExpression":"faker.random().nextBoolean()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["21","28","32","40","47","51","55","63","70","78","87","95","103","114","116","137","164"],"fullExpression":"resolve(List.of(\"aviation.aircraft.airplane\", \"aviation.aircraft.warplane\", \"aviation.aircraft.army_helicopter\", \"aviation.aircraft.civil_helicopter\", \"aviation.aircraft.general\", \"aviation.aircraft.cargo\").get(faker.number().numberBetween(0, 6)))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/IdNumberTest.java":[{"declaringType":"net.datafaker.providers.base.IdNumber","methodSignature":"validEnZaSsn()","methodName":"validEnZaSsn","lineNumber":["49"],"fullExpression":"EN_ZA_OD_NUMBER.validEnZaSsn()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["38","44","50","56"],"fullExpression":"assertThat(actual)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"idNumber()","methodName":"idNumber","lineNumber":["15","17"],"fullExpression":"new BaseFaker(new Locale(\"sv_SE\")).idNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.util.regex.Pattern)","methodName":"matches","lineNumber":["38","44","50","56"],"fullExpression":"assertThat(actual).matches(SV_SE_ID_NUMBER_PATTERN)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["39","51"],"fullExpression":"assertThat(SvSEIdNumber.isValidSwedishSsn(actual))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.IdNumber","methodSignature":"inValidEnZaSsn()","methodName":"inValidEnZaSsn","lineNumber":["56"],"fullExpression":"EN_ZA_OD_NUMBER.inValidEnZaSsn()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.IdNumber","methodSignature":"invalidSvSeSsn()","methodName":"invalidSvSeSsn","lineNumber":["44"],"fullExpression":"SV_SE_ID_NUMBER.invalidSvSeSsn()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.IdNumber","methodSignature":"validSvSeSsn()","methodName":"validSvSeSsn","lineNumber":["37"],"fullExpression":"SV_SE_ID_NUMBER.validSvSeSsn()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["39","51"],"fullExpression":"assertThat(SvSEIdNumber.isValidSwedishSsn(actual)).isTrue()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23"],"fullExpression":"resolve(\"back_to_the_future.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Space.java":[{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"numberBetween(int, int)","methodName":"numberBetween","lineNumber":["57"],"fullExpression":"faker.number().numberBetween(10, 100)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"number()","methodName":"number","lineNumber":["57"],"fullExpression":"faker.number()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29","33","37","41","45","49","53","57","61"],"fullExpression":"resolve(\"space.planet\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/idnumbers/ZhCnIdNumber.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["24"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["34","35","36"],"fullExpression":"rand.nextInt(10)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["64","65","76"],"fullExpression":"rand.nextInt(yearStart, yearEnd)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"options()","methodName":"options","lineNumber":["25"],"fullExpression":"faker.options()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.String...)","methodName":"option","lineNumber":["25"],"fullExpression":"faker.options().option(LOCATIONS)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/transformations/sql/SqlDialect.java":[{"declaringType":"net.datafaker.transformations.sql.TriFunction","methodSignature":"apply(A, B, C)","methodName":"apply","lineNumber":["92","92","97","97"],"fullExpression":"DEFAULT_FIRST_ROW.apply(input, input2, keywordCase)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer.SQLKeyWords","methodSignature":"getValue(net.datafaker.transformations.sql.SqlTransformer.Case)","methodName":"getValue","lineNumber":["106","107"],"fullExpression":"INSERT_INTO.getValue(caze)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Supernatural.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"supernatural.character\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/HeyArnold.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"hey_arnold.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Locality.java":[{"declaringType":"net.datafaker.providers.base.Locality","methodSignature":"allSupportedLocales()","methodName":"allSupportedLocales","lineNumber":["39"],"fullExpression":"allSupportedLocales()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["118","135","156"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Locality","methodSignature":"allSupportedLocales(java.util.Set<java.lang.String>)","methodName":"allSupportedLocales","lineNumber":["49"],"fullExpression":"allSupportedLocales(Set.of(\"datafaker\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["118"],"fullExpression":"faker.random().nextInt(locales.size())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Locality","methodSignature":"addLocaleIfPresent(java.nio.file.Path, java.util.Set<java.lang.String>, java.util.Set<java.lang.String>)","methodName":"addLocaleIfPresent","lineNumber":["79","88"],"fullExpression":"addLocaleIfPresent(file, langs, locales)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"getRandomInternal()","methodName":"getRandomInternal","lineNumber":["135","156"],"fullExpression":"faker.random().getRandomInternal()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Locality","methodSignature":"localeStringWithoutReplacement(java.util.Random)","methodName":"localeStringWithoutReplacement","lineNumber":["156"],"fullExpression":"localeStringWithoutReplacement(faker.random().getRandomInternal())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Locality","methodSignature":"localeStringWithRandom(java.util.Random)","methodName":"localeStringWithRandom","lineNumber":["135"],"fullExpression":"localeStringWithRandom(faker.random().getRandomInternal())","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29"],"fullExpression":"resolve(\"heroes_of_the_storm.battlegrounds\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Construction.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29","33"],"fullExpression":"resolve(\"construction.heavy_equipment\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/service/FakeValuesService.java":[{"declaringType":"net.datafaker.internal.helper.COWMap","methodSignature":"updateNestedValue(K, java.util.function.Supplier<V>, K2, V2)","methodName":"updateNestedValue","lineNumber":["241","437"],"fullExpression":"key2fetchedObject.updateNestedValue(local2Add, MAP_STRING_OBJECT_SUPPLIER, key, result)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer","methodSignature":"generate(net.datafaker.transformations.Schema<IN, ?>, int)","methodName":"generate","lineNumber":["508","531"],"fullExpression":"JSON_TRANSFORMER.generate(schema, 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"csv(java.lang.String, char, boolean, int, java.lang.String...)","methodName":"csv","lineNumber":["474"],"fullExpression":"csv(CsvTransformer.DEFAULT_SEPARATOR, CsvTransformer.DEFAULT_QUOTE, true, limit, columnExpressions)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"splitExpressions(java.lang.String, int)","methodName":"splitExpressions","lineNumber":["551"],"fullExpression":"splitExpressions(expression, expressionLength)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesContext","methodSignature":"of(java.util.Locale, java.net.URL)","methodName":"of","lineNumber":["127"],"fullExpression":"FakeValuesContext.of(locale, url)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesContext","methodSignature":"of(java.util.Locale)","methodName":"of","lineNumber":["93"],"fullExpression":"FakeValuesContext.of(locale.getLocale())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"safeFetch(java.lang.String, net.datafaker.service.FakerContext, java.lang.String)","methodName":"safeFetch","lineNumber":["435","745","764"],"fullExpression":"safeFetch(key, context, null)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"addUrl(java.util.Locale, java.net.URL)","methodName":"addUrl","lineNumber":["109"],"fullExpression":"addUrl(locale, path.toUri().toURL())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesGrouping","methodSignature":"getEnglishFakeValueGrouping()","methodName":"getEnglishFakeValueGrouping","lineNumber":["90"],"fullExpression":"FakeValuesGrouping.getEnglishFakeValueGrouping()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.internal.helper.SingletonLocale","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["93"],"fullExpression":"locale.getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"resolveFromMethodOn(java.lang.Object, java.lang.String, java.lang.String[])","methodName":"resolveFromMethodOn","lineNumber":["722","749"],"fullExpression":"resolveFromMethodOn(current, directive, args)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"bothify(java.lang.String, net.datafaker.service.FakerContext, boolean)","methodName":"bothify","lineNumber":["291"],"fullExpression":"bothify(string, context, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer.JsonTransformerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["60"],"fullExpression":"JsonTransformer.builder().build()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"isSlashDelimitedRegex(java.lang.String)","methodName":"isSlashDelimitedRegex","lineNumber":["194"],"fullExpression":"isSlashDelimitedRegex(str = o.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer.CsvTransformerBuilder","methodSignature":"header(boolean)","methodName":"header","lineNumber":["490"],"fullExpression":"CsvTransformer.<String>builder().separator(delimiter).quote(quote).header(withHeader)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer","methodSignature":"builder()","methodName":"builder","lineNumber":["60"],"fullExpression":"JsonTransformer.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocaleChain()","methodName":"getLocaleChain","lineNumber":["209"],"fullExpression":"context.getLocaleChain()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getRandomService()","methodName":"getRandomService","lineNumber":["155","309","314","319","339","355","402"],"fullExpression":"context.getRandomService()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RegExpContext","methodSignature":"of(java.lang.String, net.datafaker.providers.base.ProviderRegistration, net.datafaker.service.FakerContext)","methodName":"of","lineNumber":["562"],"fullExpression":"RegExpContext.of(expr, root, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"resolveExpression(java.lang.String, java.lang.String[], java.lang.Object, net.datafaker.providers.base.ProviderRegistration, net.datafaker.service.FakerContext)","methodName":"resolveExpression","lineNumber":["660"],"fullExpression":"resolveExpression(directive, args, current, root, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"split(java.lang.String)","methodName":"split","lineNumber":["222"],"fullExpression":"split(key)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["155","309","319","355","402"],"fullExpression":"context.getRandomService().nextInt(valuesArray.size())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"coerceArguments(java.lang.reflect.Method, java.lang.String[])","methodName":"coerceArguments","lineNumber":["961"],"fullExpression":"coerceArguments(m, args)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"letterify(java.lang.String, net.datafaker.service.FakerContext, boolean)","methodName":"letterify","lineNumber":["353","370"],"fullExpression":"letterify(\"?\", context, Character.isUpperCase(chars[i]))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"resolve(java.lang.String, java.lang.Object, net.datafaker.providers.base.ProviderRegistration, java.util.function.Supplier<java.lang.String>, net.datafaker.service.FakerContext)","methodName":"resolve","lineNumber":["418","422"],"fullExpression":"resolve(key, current, root, () -> key + \" resulted in null expression\", context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesInterface","methodSignature":"get(java.lang.String)","methodName":"get","lineNumber":["231"],"fullExpression":"((FakeValuesInterface) currentValue).get(currentPath)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer","methodSignature":"generate(net.datafaker.transformations.Schema<IN, ?>, int)","methodName":"generate","lineNumber":["490"],"fullExpression":"CsvTransformer.<String>builder().separator(delimiter).quote(quote).header(withHeader).build().generate(schema, limit + 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer.CsvTransformerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["490"],"fullExpression":"CsvTransformer.<String>builder().separator(delimiter).quote(quote).header(withHeader).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer.CsvTransformerBuilder","methodSignature":"separator(java.lang.String)","methodName":"separator","lineNumber":["490"],"fullExpression":"CsvTransformer.<String>builder().separator(delimiter)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"fetchObject(java.lang.String, net.datafaker.service.FakerContext)","methodName":"fetchObject","lineNumber":["143","183"],"fullExpression":"fetchObject(key, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"getFaker()","methodName":"getFaker","lineNumber":["422"],"fullExpression":"provider.getFaker()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"expression(java.lang.String, net.datafaker.providers.base.BaseFaker, net.datafaker.service.FakerContext)","methodName":"expression","lineNumber":["462"],"fullExpression":"expression(t, faker, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"invokeAndToString(net.datafaker.service.FakeValuesService.MethodAndCoercedArgs, java.lang.Object)","methodName":"invokeAndToString","lineNumber":["859","894"],"fullExpression":"invokeAndToString(accessor, obj)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.github.curiousoddman.rgxgen.RgxGen","methodSignature":"parse(java.lang.String)","methodName":"parse","lineNumber":["336"],"fullExpression":"RgxGen.parse(regex)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"templatify(java.lang.String, java.util.Map<java.lang.Character, java.lang.String[]>, net.datafaker.service.FakerContext)","methodName":"templatify","lineNumber":["388"],"fullExpression":"templatify(letterString, Map.of(char2replace, options), context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"trimRegexSlashes(java.lang.String)","methodName":"trimRegexSlashes","lineNumber":["195"],"fullExpression":"trimRegexSlashes(str)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"getDotIndex(java.lang.String)","methodName":"getDotIndex","lineNumber":["702"],"fullExpression":"getDotIndex(directive)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.github.curiousoddman.rgxgen.RgxGen","methodSignature":"generate(java.util.Random)","methodName":"generate","lineNumber":["339"],"fullExpression":"rgxGen.generate(context.getRandomService().getRandomInternal())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"getRandomInternal()","methodName":"getRandomInternal","lineNumber":["339"],"fullExpression":"context.getRandomService().getRandomInternal()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getSingletonLocale()","methodName":"getSingletonLocale","lineNumber":["433","437"],"fullExpression":"context.getSingletonLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"retrieveMethodAccessor(java.lang.Object, java.lang.String, java.lang.String[])","methodName":"retrieveMethodAccessor","lineNumber":["856","882","889"],"fullExpression":"retrieveMethodAccessor(obj, directive, args)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"primitiveToWrapper(java.lang.Class<?>)","methodName":"primitiveToWrapper","lineNumber":["1009"],"fullExpression":"primitiveToWrapper(parameterTypes[i])","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer","methodSignature":"builder()","methodName":"builder","lineNumber":["490"],"fullExpression":"CsvTransformer.<String>builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"fetch(java.lang.String, net.datafaker.service.FakerContext)","methodName":"fetch","lineNumber":["162"],"fullExpression":"fetch(key, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"bothify(java.lang.String, net.datafaker.service.FakerContext, boolean, boolean, boolean)","methodName":"bothify","lineNumber":["283","299","380"],"fullExpression":"bothify(numberString, context, false, true, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"classNameToYamlName(java.lang.Object)","methodName":"classNameToYamlName","lineNumber":["741"],"fullExpression":"classNameToYamlName(current)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer.CsvTransformerBuilder","methodSignature":"quote(char)","methodName":"quote","lineNumber":["490"],"fullExpression":"CsvTransformer.<String>builder().separator(delimiter).quote(quote)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.internal.helper.SingletonLocale","methodSignature":"get(java.util.Locale)","methodName":"get","lineNumber":["55","128"],"fullExpression":"SingletonLocale.get(Locale.ENGLISH)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.internal.helper.COWMap","methodSignature":"get(java.lang.Object)","methodName":"get","lineNumber":["216","433"],"fullExpression":"key2fetchedObject.get(sLocale)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"resolveExpression(java.lang.String, java.lang.Object, net.datafaker.providers.base.ProviderRegistration, net.datafaker.service.FakerContext)","methodName":"resolveExpression","lineNumber":["446","453","580"],"fullExpression":"resolveExpression(expression, current, root, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService.MethodAndCoercedArgs","methodSignature":"invoke(java.lang.Object)","methodName":"invoke","lineNumber":["887","926"],"fullExpression":"fakerAccessor.invoke(faker)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"resolveFakerObjectAndMethod(net.datafaker.providers.base.ProviderRegistration, java.lang.String, int, java.lang.String[])","methodName":"resolveFakerObjectAndMethod","lineNumber":["754"],"fullExpression":"resolveFakerObjectAndMethod(root, directive, dotIndex, args)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"getProvider(java.lang.String, net.datafaker.service.FakerContext)","methodName":"getProvider","lineNumber":["725"],"fullExpression":"BaseFaker.getProvider(directive.substring(0, dotIndex), context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesGrouping","methodSignature":"add(net.datafaker.service.FakeValuesInterface)","methodName":"add","lineNumber":["132","133"],"fullExpression":"fvg.add(prevValue)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"javaNameToYamlName(java.lang.String)","methodName":"javaNameToYamlName","lineNumber":["763","798"],"fullExpression":"javaNameToYamlName(simpleDirective)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["314"],"fullExpression":"context.getRandomService().nextInt(1, 9)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"resExp(java.lang.String, java.lang.String[], java.lang.Object, net.datafaker.providers.base.ProviderRegistration, net.datafaker.service.FakerContext, net.datafaker.service.RegExpContext)","methodName":"resExp","lineNumber":["575"],"fullExpression":"resExp(directive, args, current, root, context, regExpContext)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"removeUnderscoreChars(java.lang.String)","methodName":"removeUnderscoreChars","lineNumber":["881","888","940"],"fullExpression":"removeUnderscoreChars(classAndMethod[0])","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"of(net.datafaker.service.FakeValuesContext)","methodName":"of","lineNumber":["93","127"],"fullExpression":"FakeValues.of(FakeValuesContext.of(locale.getLocale()))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"splitArguments(java.lang.String)","methodName":"splitArguments","lineNumber":["574"],"fullExpression":"splitArguments(arguments)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"getMethod(net.datafaker.providers.base.AbstractProvider<?>, java.lang.String)","methodName":"getMethod","lineNumber":["710","726"],"fullExpression":"BaseFaker.getMethod((AbstractProvider<?>) current, directive)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"accessor(java.lang.Class<?>, java.lang.String, java.lang.String[])","methodName":"accessor","lineNumber":["911"],"fullExpression":"accessor(clazz, methodName, args)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19"],"fullExpression":"resolve(\"lord_of_the_rings.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Disease.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["25","34","43","52","61","70","80"],"fullExpression":"resolve(\"disease.internal_disease\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23"],"fullExpression":"resolve(\"family_guy.character\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/videogame/HearthstoneTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["21","27"],"fullExpression":"assertThat(rank)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isBetween(java.lang.Integer, java.lang.Integer)","methodName":"isBetween","lineNumber":["15"],"fullExpression":"assertThat(score).isBetween(0, 16000)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["15"],"fullExpression":"assertThat(score)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["21","27"],"fullExpression":"assertThat(rank).matches(\"[ A-Za-z0-9]+\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Cosmere.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31","35","39","43","47","51"],"fullExpression":"resolve(\"cosmere.aons\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/entertainment/TronTest.java":[{"declaringType":"net.datafaker.providers.entertainment.Tron","methodSignature":"character(net.datafaker.providers.entertainment.Tron.Character)","methodName":"character","lineNumber":["21","22","23"],"fullExpression":"tron.character(Tron.Character.OTHER)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.entertainment.Tron","methodSignature":"alternateCharacterSpelling(net.datafaker.providers.entertainment.Tron.AlternateCharacterSpelling)","methodName":"alternateCharacterSpelling","lineNumber":["13","14","15","16","17","18","19","20"],"fullExpression":"tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.ALAN_BRADLEY)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.entertainment.Tron","methodSignature":"quote(net.datafaker.providers.entertainment.Tron.Quote)","methodName":"quote","lineNumber":["26","27","28","29","30","31","32","33","34","35","36","37","38","39","40"],"fullExpression":"tron.quote(Tron.Quote.ALAN_BRADLEY)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Verb.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","27","36","45","54"],"fullExpression":"resolve(\"verbs.base\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/Hearthstone.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["29","35","37"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["29","35","37"],"fullExpression":"faker.random().nextInt(0, 16000)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.videogame.Hearthstone","methodSignature":"standardRank()","methodName":"standardRank","lineNumber":["43"],"fullExpression":"standardRank()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","33"],"fullExpression":"resolve(\"games.hearthstone.professions\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/VideoGame.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"video_game.title\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/service/RandomService.java":[{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextRandomBytes(int)","methodName":"nextRandomBytes","lineNumber":["99"],"fullExpression":"nextRandomBytes(length)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"hex(int)","methodName":"hex","lineNumber":["86"],"fullExpression":"hex(8)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextDouble()","methodName":"nextDouble","lineNumber":["64","72"],"fullExpression":"nextDouble()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"hex(int, boolean)","methodName":"hex","lineNumber":["90"],"fullExpression":"hex(length, true)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21"],"fullExpression":"resolve(\"games.world_of_warcraft.hero\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/transformations/sql/SqlTransformer.java":[{"declaringType":"net.datafaker.transformations.sql.SqlDialect","methodSignature":"getUnquotedCasing()","methodName":"getUnquotedCasing","lineNumber":["439"],"fullExpression":"dialect.getUnquotedCasing()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"appendTableInfo(net.datafaker.transformations.Field<?, ? extends java.lang.CharSequence>[])","methodName":"appendTableInfo","lineNumber":["93","97","101"],"fullExpression":"appendTableInfo(fields)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlDialect","methodSignature":"getSqlQuoteIdentifier()","methodName":"getSqlQuoteIdentifier","lineNumber":["439"],"fullExpression":"dialect.getSqlQuoteIdentifier()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeStream","methodSignature":"get()","methodName":"get","lineNumber":["305"],"fullExpression":"((FakeStream) input).get()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Schema","methodSignature":"getFields()","methodName":"getFields","lineNumber":["86","132","296","328"],"fullExpression":"schema.getFields()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence","methodSignature":"isInfinite()","methodName":"isInfinite","lineNumber":["299"],"fullExpression":"((FakeSequence) input).isInfinite()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer.SQLKeyWords","methodSignature":"getValue(net.datafaker.transformations.sql.SqlTransformer.Case)","methodName":"getValue","lineNumber":["100","102","121","126","132","169","176","178"],"fullExpression":"INSERT_INTO.getValue(keywordCase)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Field","methodSignature":"getName()","methodName":"getName","lineNumber":["258"],"fullExpression":"fields[i].getName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"handleObjectInCollection(java.lang.Object)","methodName":"handleObjectInCollection","lineNumber":["127","179"],"fullExpression":"handleObjectInCollection(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"appendNameToQuery(java.lang.StringBuilder, java.lang.String)","methodName":"appendNameToQuery","lineNumber":["251","255"],"fullExpression":"appendNameToQuery(result, schemaName)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"apply(IN, net.datafaker.transformations.Schema<IN, ?>, int)","methodName":"apply","lineNumber":["80","344"],"fullExpression":"apply(input, schema, 0)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlDialect","methodSignature":"getFirstRow(net.datafaker.transformations.sql.SqlDialect, java.util.function.Supplier<java.lang.String>, java.util.function.Supplier<java.lang.String>, net.datafaker.transformations.sql.SqlTransformer.Case)","methodName":"getFirstRow","lineNumber":["92"],"fullExpression":"SqlDialect.getFirstRow(dialect, () -> appendTableInfo(fields), () -> addValues(input, fields), keywordCase)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence","methodSignature":"get()","methodName":"get","lineNumber":["308"],"fullExpression":"((FakeSequence<Object>) input).get()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.SimpleField","methodSignature":"transform(MyObject)","methodName":"transform","lineNumber":["112"],"fullExpression":"((SimpleField<Object, ? extends CharSequence>) fields[i]).transform(input)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"handlePrimitivesInArray(java.lang.Class<?>, java.lang.Object)","methodName":"handlePrimitivesInArray","lineNumber":["123","174"],"fullExpression":"handlePrimitivesInArray(componentType, value)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"handledObjectToString(int, java.lang.String)","methodName":"handledObjectToString","lineNumber":["184"],"fullExpression":"handledObjectToString(length, strValue)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"generateSeparatedStatements(net.datafaker.transformations.Schema<IN, ?>, java.util.List<IN>, int)","methodName":"generateSeparatedStatements","lineNumber":["322","335"],"fullExpression":"generateSeparatedStatements(schema, inputs, limit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"apply(IN, net.datafaker.transformations.Schema<IN, ?>)","methodName":"apply","lineNumber":["361"],"fullExpression":"apply(input, schema)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"addValues(IN, net.datafaker.transformations.Field<?, ? extends java.lang.CharSequence>[])","methodName":"addValues","lineNumber":["93","97","103"],"fullExpression":"addValues(input, fields)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"handleObjectInArray(java.lang.Object)","methodName":"handleObjectInArray","lineNumber":["124","175"],"fullExpression":"handleObjectInArray(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"generateBatchModeStatements(net.datafaker.transformations.Schema<IN, ?>, java.util.List<IN>, int)","methodName":"generateBatchModeStatements","lineNumber":["320","333"],"fullExpression":"generateBatchModeStatements(schema, inputs, limit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlDialect","methodSignature":"getOtherRow(net.datafaker.transformations.sql.SqlDialect, java.util.function.Supplier<java.lang.String>, java.util.function.Supplier<java.lang.String>, net.datafaker.transformations.sql.SqlTransformer.Case)","methodName":"getOtherRow","lineNumber":["96"],"fullExpression":"SqlDialect.getOtherRow(dialect, () -> appendTableInfo(fields), () -> addValues(input, fields), keywordCase)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"handleObject(java.lang.Object)","methodName":"handleObject","lineNumber":["129","145","158"],"fullExpression":"handleObject(value)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"isSqlQuoteIdentifierRequiredFor(java.lang.String)","methodName":"isSqlQuoteIdentifierRequiredFor","lineNumber":["259","283"],"fullExpression":"isSqlQuoteIdentifierRequiredFor(fieldName)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlDialect","methodSignature":"getLastRowSuffix(net.datafaker.transformations.sql.SqlDialect, net.datafaker.transformations.sql.SqlTransformer.Case)","methodName":"getLastRowSuffix","lineNumber":["346"],"fullExpression":"SqlDialect.getLastRowSuffix(dialect, keywordCase)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Artist.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13"],"fullExpression":"resolve(\"artist.names\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Animal.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["23"],"fullExpression":"faker.resolve(\"creature.animal.genus\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Animal","methodSignature":"genus()","methodName":"genus","lineNumber":["19"],"fullExpression":"genus()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Animal","methodSignature":"species()","methodName":"species","lineNumber":["19"],"fullExpression":"species()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.internal.helper.WordUtils","methodSignature":"capitalize(java.lang.String)","methodName":"capitalize","lineNumber":["23"],"fullExpression":"WordUtils.capitalize(faker.resolve(\"creature.animal.genus\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","27"],"fullExpression":"resolve(\"creature.animal.name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/food/Dessert.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","25","32"],"fullExpression":"resolve(\"dessert.variety\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/idnumbers/KoKrIdNumberTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["24"],"fullExpression":"assertThat(rrn)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNull()","methodName":"isNull","lineNumber":["29"],"fullExpression":"assertThat(e).isNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"idNumber()","methodName":"idNumber","lineNumber":["21"],"fullExpression":"f.idNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.util.regex.Pattern)","methodName":"matches","lineNumber":["24"],"fullExpression":"assertThat(rrn).matches(D_6_D_7)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(T)","methodName":"assertThat","lineNumber":["29"],"fullExpression":"assertThat(e)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.IdNumber","methodSignature":"validKoKrRrn()","methodName":"validKoKrRrn","lineNumber":["21"],"fullExpression":"f.idNumber().validKoKrRrn()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/NationTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["13","18","23","31","37","42"],"fullExpression":"assertThat(nation.nationality())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Nation","methodSignature":"nationality()","methodName":"nationality","lineNumber":["13"],"fullExpression":"nation.nationality()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Nation","methodSignature":"isoLanguage()","methodName":"isoLanguage","lineNumber":["37"],"fullExpression":"nation.isoLanguage()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharacterAssert","methodSignature":"isEqualTo(char)","methodName":"isEqualTo","lineNumber":["32"],"fullExpression":"assertThat(flag.charAt(0)).isEqualTo('\\uD83C')","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Nation","methodSignature":"flag()","methodName":"flag","lineNumber":["28"],"fullExpression":"nation.flag()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"hasSizeGreaterThanOrEqualTo(int)","methodName":"hasSizeGreaterThanOrEqualTo","lineNumber":["31"],"fullExpression":"assertThat(flag).hasSizeGreaterThanOrEqualTo(4)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Nation","methodSignature":"capitalCity()","methodName":"capitalCity","lineNumber":["23"],"fullExpression":"nation.capitalCity()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(char)","methodName":"assertThat","lineNumber":["32"],"fullExpression":"assertThat(flag.charAt(0))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Nation","methodSignature":"isoCountry()","methodName":"isoCountry","lineNumber":["42"],"fullExpression":"nation.isoCountry()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["13","18","23","37","42"],"fullExpression":"assertThat(nation.nationality()).matches(\"\\\\P{Cc}+\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Nation","methodSignature":"language()","methodName":"language","lineNumber":["18"],"fullExpression":"nation.language()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/OnePiece.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31","35"],"fullExpression":"resolve(\"one_piece.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23"],"fullExpression":"resolve(\"dumb_and_dumber.actors\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Movie.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["20"],"fullExpression":"resolve(\"movie.quote\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/SiliconValley.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31","35","39","43"],"fullExpression":"faker.resolve(\"silicon_valley.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/sport/Cricket.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27"],"fullExpression":"resolve(\"cricket.teams\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Avatar.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"regexify(java.lang.String)","methodName":"regexify","lineNumber":["17"],"fullExpression":"faker.regexify(\"[a-z]{8}\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/NameTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["16","21","40","48","54","59","64","69","74","79","84"],"fullExpression":"assertThat(name.name())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"suffix()","methodName":"suffix","lineNumber":["79"],"fullExpression":"name.suffix()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isLessThan(int)","methodName":"isLessThan","lineNumber":["35"],"fullExpression":"assertThat(theSameNameCnt).isLessThan(total / 10)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"malefirstName()","methodName":"malefirstName","lineNumber":["64"],"fullExpression":"name.malefirstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["16","21","40","48","54","59","64","69","74","79","84"],"fullExpression":"assertThat(name.name()).matches(\"([\\\\w']+\\\\.?( )?){2,4}\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"nameWithMiddle()","methodName":"nameWithMiddle","lineNumber":["21","29"],"fullExpression":"name.nameWithMiddle()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"femaleFirstName()","methodName":"femaleFirstName","lineNumber":["59"],"fullExpression":"name.femaleFirstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"prefix()","methodName":"prefix","lineNumber":["74"],"fullExpression":"name.prefix()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"title()","methodName":"title","lineNumber":["84"],"fullExpression":"name.title()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"firstName()","methodName":"firstName","lineNumber":["54"],"fullExpression":"name.firstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"lastName()","methodName":"lastName","lineNumber":["69"],"fullExpression":"name.lastName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"name()","methodName":"name","lineNumber":["48"],"fullExpression":"localFaker.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"fullName()","methodName":"fullName","lineNumber":["40","48"],"fullExpression":"name.fullName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"name()","methodName":"name","lineNumber":["16"],"fullExpression":"name.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["35"],"fullExpression":"assertThat(theSameNameCnt)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/sequence/FakeStreamTest.java":[{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"hasSizeBetween(int, int)","methodName":"hasSizeBetween","lineNumber":["37"],"fullExpression":"assertThat(finiteNames).hasSizeBetween(3, 5)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNull()","methodName":"isNull","lineNumber":["69"],"fullExpression":"assertThat(name).isNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence","methodSignature":"isInfinite()","methodName":"isInfinite","lineNumber":["150","155","324"],"fullExpression":"infiniteNames.isInfinite()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.List<? extends ELEMENT>)","methodName":"assertThat","lineNumber":["92","107"],"fullExpression":"assertThat(stream.collect(Collectors.toList()))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["108","109"],"fullExpression":"assertThat(namesList.get(0)).isEqualTo(\"Flor\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Field","methodSignature":"compositeField(java.lang.String, net.datafaker.transformations.Field<MyObject, MyType>[])","methodName":"compositeField","lineNumber":["264","282"],"fullExpression":"compositeField(null, new Field[] { field(\"country\", () -> faker.address().country()), field(\"city\", () -> faker.address().city()), field(\"zipcode\", () -> faker.address().zipCode()), field(\"streetAddress\", () -> faker.address().streetAddress()) })","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isFalse()","methodName":"isFalse","lineNumber":["155"],"fullExpression":"assertThat(finiteNames.isInfinite()).isFalse()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["150","324"],"fullExpression":"assertThat(infiniteNames.isInfinite()).isTrue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOfAny(java.lang.Class<?>...)","methodName":"isInstanceOfAny","lineNumber":["119"],"fullExpression":"assertThat(object).isInstanceOfAny(Integer.class, String.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer.JsonTransformerBuilder","methodSignature":"formattedAs(net.datafaker.transformations.JsonTransformer.JsonTransformerBuilder.FormattedAs)","methodName":"formattedAs","lineNumber":["259"],"fullExpression":"JsonTransformer.<Name>builder().formattedAs(JsonTransformer.JsonTransformerBuilder.FormattedAs.JSON_ARRAY)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer","methodSignature":"builder()","methodName":"builder","lineNumber":["168","199"],"fullExpression":"CsvTransformer.<Data>builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"lastName()","methodName":"lastName","lineNumber":["89","101"],"fullExpression":"faker.name().lastName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["75","124","198","244"],"fullExpression":"assertThatThrownBy(() -> faker.stream().suppliers(() -> faker.name().firstName(), () -> faker.name().lastName()).nullRate(nullRate).minLen(3).maxLen(5).generate()).isInstanceOf(IllegalArgumentException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"name()","methodName":"name","lineNumber":["89","89","101","101"],"fullExpression":"faker.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer.JsonTransformerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["259"],"fullExpression":"JsonTransformer.<Name>builder().formattedAs(JsonTransformer.JsonTransformerBuilder.FormattedAs.JSON_ARRAY).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["75","124","198","244"],"fullExpression":"assertThatThrownBy(() -> faker.stream().suppliers(() -> faker.name().firstName(), () -> faker.name().lastName()).nullRate(nullRate).minLen(3).maxLen(5).generate())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(T)","methodName":"assertThat","lineNumber":["119"],"fullExpression":"assertThat(object)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["52","59","69","108","109","311","329"],"fullExpression":"assertThat(name)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer","methodSignature":"builder()","methodName":"builder","lineNumber":["219","245","259"],"fullExpression":"JsonTransformer.<Data>builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isEqualTo(long)","methodName":"isEqualTo","lineNumber":["44"],"fullExpression":"assertThat(infiniteNames.spliterator().estimateSize()).isEqualTo(Long.MAX_VALUE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["150","155","324"],"fullExpression":"assertThat(infiniteNames.isInfinite())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["52","59","311","329"],"fullExpression":"assertThat(name).matches(\"[a-zA-Z']+\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isEqualTo(int)","methodName":"isEqualTo","lineNumber":["187","188","235","298","315","336"],"fullExpression":"assertThat(numberOfLines).isEqualTo(5)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"len(int)","methodName":"len","lineNumber":["90"],"fullExpression":"faker.stream(suppliers).len(3)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"firstName()","methodName":"firstName","lineNumber":["89","101"],"fullExpression":"faker.name().firstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.stream.Stream<? extends ELEMENT>)","methodName":"assertThat","lineNumber":["37"],"fullExpression":"assertThat(finiteNames)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(long)","methodName":"assertThat","lineNumber":["44"],"fullExpression":"assertThat(infiniteNames.spliterator().estimateSize())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"generate()","methodName":"generate","lineNumber":["90"],"fullExpression":"faker.stream(suppliers).len(3).generate()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"stream(java.util.List<java.util.function.Supplier<T>>)","methodName":"stream","lineNumber":["90"],"fullExpression":"faker.stream(suppliers)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["92","107"],"fullExpression":"assertThat(stream.collect(Collectors.toList())).hasSize(3)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["187","188","235","298","315","336"],"fullExpression":"assertThat(numberOfLines)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/AddressTest.java":[{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"is(org.assertj.core.api.Condition<? super ACTUAL>)","methodName":"is","lineNumber":["75","83"],"fullExpression":"assertThat(latStr).is(IS_A_NUMBER)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractDoubleAssert","methodSignature":"isBetween(java.lang.Double, java.lang.Double)","methodName":"isBetween","lineNumber":["77","85"],"fullExpression":"assertThat(lat).isBetween(-90.0, 90.0)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Double)","methodName":"assertThat","lineNumber":["77","85"],"fullExpression":"assertThat(lat)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["51","57","165","263"],"fullExpression":"assertThat(faker.address().streetName()).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["142"],"fullExpression":"assertThat(firstFaker.address().city()).isEqualTo(secondFaker.address().city())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"latLon()","methodName":"latLon","lineNumber":["225","231"],"fullExpression":"US_FAKER.address().latLon()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"streetName()","methodName":"streetName","lineNumber":["51","57","263"],"fullExpression":"faker.address().streetName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"address()","methodName":"address","lineNumber":["51","57","91","98","142","142","153","153","159","159","165","173","206","212","218","225","231","237","243","249","255","263","268","269","274","278"],"fullExpression":"faker.address()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["173"],"fullExpression":"assertThatThrownBy(() -> localFaker.address().countyByZipCode(zipCode)).isInstanceOf(RuntimeException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["173"],"fullExpression":"assertThatThrownBy(() -> localFaker.address().countyByZipCode(zipCode))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"stateAbbr()","methodName":"stateAbbr","lineNumber":["153","159","268"],"fullExpression":"localFaker.address().stateAbbr()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"lonLat(java.lang.String)","methodName":"lonLat","lineNumber":["249"],"fullExpression":"RU_FAKER.address().lonLat(\";\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["51","57","63","69","75","83","92","99","142","153","159","165","206","212","219","220","225","231","237","243","249","255","263","268","269","274","278"],"fullExpression":"assertThat(faker.address().streetName())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"lonLat()","methodName":"lonLat","lineNumber":["237","243"],"fullExpression":"US_FAKER.address().lonLat()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"latitude()","methodName":"latitude","lineNumber":["91"],"fullExpression":"engFaker.address().latitude()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"countyByZipCode(java.lang.String)","methodName":"countyByZipCode","lineNumber":["165","173"],"fullExpression":"localFaker.address().countyByZipCode(\"47732\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["206","212"],"fullExpression":"assertThat(localFaker.address().zipCode()).hasSize(5)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"zipCodePlus4()","methodName":"zipCodePlus4","lineNumber":["212","218"],"fullExpression":"localFaker.address().zipCodePlus4()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["226","232","238","244","250","256"],"fullExpression":"US_FAKER.getContext().getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["63","69","92","99","153","159","219","220","268","269","274","278"],"fullExpression":"assertThat(streetAddressNumber).matches(\"[0-9]+ .+\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"city()","methodName":"city","lineNumber":["142","142"],"fullExpression":"firstFaker.address().city()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"latLon(java.lang.String)","methodName":"latLon","lineNumber":["255"],"fullExpression":"RU_FAKER.address().latLon(\";\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"zipCode()","methodName":"zipCode","lineNumber":["206"],"fullExpression":"localFaker.address().zipCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"zipCodeByState(java.lang.String)","methodName":"zipCodeByState","lineNumber":["153","159"],"fullExpression":"localFaker.address().zipCodeByState(localFaker.address().stateAbbr())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"longitude()","methodName":"longitude","lineNumber":["98"],"fullExpression":"engFaker.address().longitude()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"fullAddress()","methodName":"fullAddress","lineNumber":["269","274"],"fullExpression":"NL_FAKER.address().fullAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"citySuffix()","methodName":"citySuffix","lineNumber":["278"],"fullExpression":"new Faker(Locale.CHINA).address().citySuffix()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.util.regex.Pattern)","methodName":"matches","lineNumber":["225","231","237","243","249","255"],"fullExpression":"assertThat(US_FAKER.address().latLon()).matches(BI_LAT_LON_REGEX.apply(ESCAPED_DECIMAL_SEPARATOR.apply(US_FAKER.getContext().getLocale()), \",\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"getContext()","methodName":"getContext","lineNumber":["226","232","238","244","250","256"],"fullExpression":"US_FAKER.getContext()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/idnumbers/EnZAIdNumber.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"options()","methodName":"options","lineNumber":["27","39","54"],"fullExpression":"f.options()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["26","39","42"],"fullExpression":"f.numerify(\"####\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.String...)","methodName":"option","lineNumber":["27","39","54"],"fullExpression":"f.options().option(CODE_PATTERN)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"birthdayLocalDate(int, int)","methodName":"birthdayLocalDate","lineNumber":["25"],"fullExpression":"f.date().birthdayLocalDate(0, 100)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"date()","methodName":"date","lineNumber":["25"],"fullExpression":"f.date()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/integration/FakerRepeatabilityIntegrationTest.java":[{"declaringType":"net.datafaker.integration.FakerRepeatabilityIntegrationTest","methodSignature":"buildReport(net.datafaker.Faker)","methodName":"buildReport","lineNumber":["32","33","49","50"],"fullExpression":"buildReport(faker1)","currentLayer":0,"declarationInfo":null},{"declaringType":"com.google.common.collect.MapDifference","methodSignature":"entriesInCommon()","methodName":"entriesInCommon","lineNumber":["54"],"fullExpression":"difference.entriesInCommon()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.google.common.collect.MapDifference","methodSignature":"entriesDiffering()","methodName":"entriesDiffering","lineNumber":["54"],"fullExpression":"difference.entriesDiffering()","currentLayer":0,"declarationInfo":null},{"declaringType":"com.google.common.collect.Maps","methodSignature":"difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>)","methodName":"difference","lineNumber":["52"],"fullExpression":"Maps.difference(report1, report2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractMapAssert","methodSignature":"hasSizeGreaterThan(int)","methodName":"hasSizeGreaterThan","lineNumber":["54"],"fullExpression":"assertThat(difference.entriesDiffering()).hasSizeGreaterThan(difference.entriesInCommon().size())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractMapAssert","methodSignature":"containsEntry(K, V)","methodName":"containsEntry","lineNumber":["36","40"],"fullExpression":"assertThat(report2).containsEntry(entry1.getKey(), entry1.getValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.Map<K, V>)","methodName":"assertThat","lineNumber":["36","40","54"],"fullExpression":"assertThat(report2)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Company.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["55","80","110"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["55","80","110"],"fullExpression":"faker.random().nextInt(allBuzzwords.size())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Company","methodSignature":"name()","methodName":"name","lineNumber":["91"],"fullExpression":"name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["23","27","31","35","104"],"fullExpression":"resolve(\"company.name\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"fetchObject(java.lang.String, net.datafaker.service.FakerContext)","methodName":"fetchObject","lineNumber":["44","63","72"],"fullExpression":"faker.fakeValuesService().fetchObject(\"company.buzzwords\", faker.getContext())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Company","methodSignature":"joinSampleOfEachList(java.util.List<java.util.List<java.lang.String>>)","methodName":"joinSampleOfEachList","lineNumber":["64","73"],"fullExpression":"joinSampleOfEachList(catchPhraseLists)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Company","methodSignature":"domainName()","methodName":"domainName","lineNumber":["86"],"fullExpression":"domainName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getContext()","methodName":"getContext","lineNumber":["44","63","72","91"],"fullExpression":"faker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"fakeValuesService()","methodName":"fakeValuesService","lineNumber":["44","63","72"],"fullExpression":"faker.fakeValuesService()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Company","methodSignature":"domainSuffix()","methodName":"domainSuffix","lineNumber":["87"],"fullExpression":"domainSuffix()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["91"],"fullExpression":"faker.getContext().getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.internal.helper.FakerIDN","methodSignature":"toASCII(java.lang.String)","methodName":"toASCII","lineNumber":["86"],"fullExpression":"FakerIDN.toASCII(domainName())","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/DroneTest.java":[{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"maxChargingPower()","methodName":"maxChargingPower","lineNumber":["104"],"fullExpression":"drone.maxChargingPower()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"batteryCapacity()","methodName":"batteryCapacity","lineNumber":["84"],"fullExpression":"drone.batteryCapacity()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["29","34","39","44","49","54","59","64","69","74","79","84","89","94","99","104","109"],"fullExpression":"assertThat(drone.weight()).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"flightTime()","methodName":"flightTime","lineNumber":["44"],"fullExpression":"drone.flightTime()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"batteryWeight()","methodName":"batteryWeight","lineNumber":["94"],"fullExpression":"drone.batteryWeight()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AssertionsForClassTypes","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["29","34","39","44","49","54","59","64","69","74","79","84","89","94","99","104","109"],"fullExpression":"assertThat(drone.weight())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"maxFlightDistance()","methodName":"maxFlightDistance","lineNumber":["54"],"fullExpression":"drone.maxFlightDistance()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"operatingTemperature()","methodName":"operatingTemperature","lineNumber":["79"],"fullExpression":"drone.operatingTemperature()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"weight()","methodName":"weight","lineNumber":["29"],"fullExpression":"drone.weight()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"maxAngularVelocity()","methodName":"maxAngularVelocity","lineNumber":["69"],"fullExpression":"drone.maxAngularVelocity()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"maxResolution()","methodName":"maxResolution","lineNumber":["109"],"fullExpression":"drone.maxResolution()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"maxAltitude()","methodName":"maxAltitude","lineNumber":["49"],"fullExpression":"drone.maxAltitude()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"maxSpeed()","methodName":"maxSpeed","lineNumber":["59"],"fullExpression":"drone.maxSpeed()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"maxTiltAngle()","methodName":"maxTiltAngle","lineNumber":["74"],"fullExpression":"drone.maxTiltAngle()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"batteryVoltage()","methodName":"batteryVoltage","lineNumber":["89"],"fullExpression":"drone.batteryVoltage()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"maxDescentSpeed()","methodName":"maxDescentSpeed","lineNumber":["39"],"fullExpression":"drone.maxDescentSpeed()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"maxWindResistance()","methodName":"maxWindResistance","lineNumber":["64"],"fullExpression":"drone.maxWindResistance()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"maxAscentSpeed()","methodName":"maxAscentSpeed","lineNumber":["34"],"fullExpression":"drone.maxAscentSpeed()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Drone","methodSignature":"chargingTemperature()","methodName":"chargingTemperature","lineNumber":["99"],"fullExpression":"drone.chargingTemperature()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/MbtiTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["15","21","32"],"fullExpression":"assertThat(mbti.type())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Mbti","methodSignature":"personage()","methodName":"personage","lineNumber":["31","32"],"fullExpression":"mbti.personage()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Mbti","methodSignature":"weakness()","methodName":"weakness","lineNumber":["42"],"fullExpression":"mbti.weakness()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Mbti","methodSignature":"merit()","methodName":"merit","lineNumber":["37"],"fullExpression":"mbti.merit()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["14","20","26","31","37","42"],"fullExpression":"assertThat(isNullOrEmpty(mbti.type()))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Mbti","methodSignature":"type()","methodName":"type","lineNumber":["14","15"],"fullExpression":"mbti.type()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Mbti","methodSignature":"name()","methodName":"name","lineNumber":["20","21"],"fullExpression":"mbti.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Mbti","methodSignature":"characteristic()","methodName":"characteristic","lineNumber":["26"],"fullExpression":"mbti.characteristic()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isFalse()","methodName":"isFalse","lineNumber":["14","20","26","31","37","42"],"fullExpression":"assertThat(isNullOrEmpty(mbti.type())).isFalse()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.util.Strings","methodSignature":"isNullOrEmpty(java.lang.String)","methodName":"isNullOrEmpty","lineNumber":["14","20","26","31","37","42"],"fullExpression":"isNullOrEmpty(mbti.type())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["15","21","32"],"fullExpression":"assertThat(mbti.type()).matches(\"[A-Za-z,\\\\-.() ]+\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/GratefulDead.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","22"],"fullExpression":"resolve(\"grateful_dead.players\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Matz.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13"],"fullExpression":"resolve(\"matz.quotes\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31","35","39"],"fullExpression":"resolve(\"hitchhikers_guide_to_the_galaxy.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/TheExpanse.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29"],"fullExpression":"resolve(\"the_expanse.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/internal/helper/FakerIDNTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["12"],"fullExpression":"assertThat(FakerIDN.toASCII(\"hello\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["12"],"fullExpression":"assertThat(FakerIDN.toASCII(\"hello\")).isEqualTo(\"hello\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["17"],"fullExpression":"assertThatThrownBy(() -> FakerIDN.toASCII(\"Ⱥ\")).isInstanceOf(RuntimeException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["17"],"fullExpression":"assertThatThrownBy(() -> FakerIDN.toASCII(\"Ⱥ\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.internal.helper.FakerIDN","methodSignature":"toASCII(java.lang.String)","methodName":"toASCII","lineNumber":["12","17"],"fullExpression":"FakerIDN.toASCII(\"hello\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/Fallout.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29"],"fullExpression":"resolve(\"fallout.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Naruto.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29"],"fullExpression":"resolve(\"naruto.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/DrivingLicense.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15"],"fullExpression":"faker.resolve(\"driving_license.usa.\" + stateAbbreviation)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"bothify(java.lang.String)","methodName":"bothify","lineNumber":["15"],"fullExpression":"faker.bothify(faker.resolve(\"driving_license.usa.\" + stateAbbreviation))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/TheRoom.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29"],"fullExpression":"resolve(\"the_room.actors\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/AppTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["17","22"],"fullExpression":"assertThat(app.version())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.App","methodSignature":"version()","methodName":"version","lineNumber":["17"],"fullExpression":"app.version()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.App","methodSignature":"author()","methodName":"author","lineNumber":["22"],"fullExpression":"app.author()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["17","22"],"fullExpression":"assertThat(app.version()).matches(\"\\\\d\\\\.(?:\\\\d){1,2}(?:\\\\.\\\\d)?\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/ColorTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["21","26"],"fullExpression":"assertThat(color.hex())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Color","methodSignature":"hex()","methodName":"hex","lineNumber":["21"],"fullExpression":"color.hex()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Color","methodSignature":"hex(boolean)","methodName":"hex","lineNumber":["26"],"fullExpression":"color.hex(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["21","26"],"fullExpression":"assertThat(color.hex()).matches(\"^#[0-9A-F]{6}$\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Robin.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13"],"fullExpression":"resolve(\"robin.quotes\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Subscription.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29"],"fullExpression":"resolve(\"subscription.plans\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/transformations/CsvTransformer.java":[{"declaringType":"net.datafaker.transformations.CsvTransformer","methodSignature":"generateHeader(net.datafaker.transformations.Schema<?, ?>, java.lang.StringBuilder)","methodName":"generateHeader","lineNumber":["47","101"],"fullExpression":"generateHeader(schema, sb)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer","methodSignature":"apply(IN, net.datafaker.transformations.Schema<IN, ?>)","methodName":"apply","lineNumber":["53"],"fullExpression":"apply(in, schema)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Transformer","methodSignature":"apply(IN, net.datafaker.transformations.Schema<IN, ?>, int)","methodName":"apply","lineNumber":["103"],"fullExpression":"apply(null, schema, i)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Schema","methodSignature":"getFields()","methodName":"getFields","lineNumber":["27","88","89","90"],"fullExpression":"schema.getFields()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence","methodSignature":"isInfinite()","methodName":"isInfinite","lineNumber":["42"],"fullExpression":"((FakeSequence) input).isInfinite()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer","methodSignature":"addCharSequence(java.lang.StringBuilder, java.lang.CharSequence)","methodName":"addCharSequence","lineNumber":["65"],"fullExpression":"addCharSequence(sb, (CharSequence) transform)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer","methodSignature":"addLine(java.lang.StringBuilder, java.lang.Object)","methodName":"addLine","lineNumber":["32","89"],"fullExpression":"addLine(sb, f.transform(input))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.SimpleField","methodSignature":"transform(MyObject)","methodName":"transform","lineNumber":["32"],"fullExpression":"f.transform(input)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Field","methodSignature":"getName()","methodName":"getName","lineNumber":["89"],"fullExpression":"schema.getFields()[i].getName()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/script/ProviderGenerator.java":[{"declaringType":"net.datafaker.script.ProviderType","methodSignature":"getProviderRegistrySimpleName()","methodName":"getProviderRegistrySimpleName","lineNumber":["92","94"],"fullExpression":"providerType.getProviderRegistrySimpleName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProviderType","methodSignature":"getTestSuperclassSimpleName()","methodName":"getTestSuperclassSimpleName","lineNumber":["122"],"fullExpression":"providerType.getTestSuperclassSimpleName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.text.WordUtils","methodSignature":"capitalize(java.lang.String)","methodName":"capitalize","lineNumber":["143"],"fullExpression":"WordUtils.capitalize(withoutUnderscore)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProviderGenerator","methodSignature":"processFaker(java.io.File, java.util.Map<java.lang.String, java.lang.Object>)","methodName":"processFaker","lineNumber":["50"],"fullExpression":"processFaker(file, faker)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.yaml.snakeyaml.Yaml","methodSignature":"loadAs(java.io.Reader, java.lang.Class<? super T>)","methodName":"loadAs","lineNumber":["44"],"fullExpression":"new Yaml().loadAs(new FileReader(file), Map.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProviderGenerator","methodSignature":"createCreator(java.io.File, java.lang.String, java.util.Set<java.lang.String>, net.datafaker.script.ProviderType)","methodName":"createCreator","lineNumber":["67"],"fullExpression":"createCreator(file, key, strings, providerType)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProviderGenerator","methodSignature":"createFakerRegistration(java.io.File)","methodName":"createFakerRegistration","lineNumber":["69"],"fullExpression":"createFakerRegistration(file)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.lang3.StringUtils","methodSignature":"uncapitalize(java.lang.String)","methodName":"uncapitalize","lineNumber":["74","100","114","126"],"fullExpression":"StringUtils.uncapitalize(toJavaConvention(className))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProviderGenerator","methodSignature":"toJavaConvention(java.lang.String)","methodName":"toJavaConvention","lineNumber":["73","74","83","100","112","114","126"],"fullExpression":"toJavaConvention(file.getName().substring(0, file.getName().indexOf(\".\")))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProviderGenerator","methodSignature":"createTest(java.io.File, java.util.Set<java.lang.String>, net.datafaker.script.ProviderType)","methodName":"createTest","lineNumber":["68"],"fullExpression":"createTest(file, strings, providerType)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProviderType","methodSignature":"getPackageName()","methodName":"getPackageName","lineNumber":["85","116"],"fullExpression":"providerType.getPackageName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.script.ProviderGenerator","methodSignature":"generateProvider()","methodName":"generateProvider","lineNumber":["29"],"fullExpression":"new ProviderGenerator().generateProvider()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/FakerTest.java":[{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"regexify(java.lang.String)","methodName":"regexify","lineNumber":["129","218","219"],"fullExpression":"faker.regexify(input)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNotEqualTo(java.lang.Object)","methodName":"isNotEqualTo","lineNumber":["303","314"],"fullExpression":"assertThat(localFaker.doWith(stringCallable, 987)).isNotEqualTo(localFaker.doWith(stringCallable, 123))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Ancient","methodSignature":"god()","methodName":"god","lineNumber":["279"],"fullExpression":"f.ancient().god()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["129","221","270","301","303","312","314","331","335"],"fullExpression":"assertThat(faker.regexify(input))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.reflections.Reflections","methodSignature":"get(org.reflections.util.QueryFunction<org.reflections.Store, T>)","methodName":"get","lineNumber":["342"],"fullExpression":"reflections.get(SubTypes.of(AbstractProvider.class).asClass())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["221","301","312"],"fullExpression":"assertThat(secondResult).isEqualTo(firstResult)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"doWith(java.util.concurrent.Callable<T>, java.util.Locale)","methodName":"doWith","lineNumber":["266","267","268","270","290"],"fullExpression":"localFaker.doWith(stringCallable, new Locale(\"ru_RU\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.Collection<? extends E>)","methodName":"assertThat","lineNumber":["380","385"],"fullExpression":"assertThat(set)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"doWith(java.util.concurrent.Callable<T>, long)","methodName":"doWith","lineNumber":["301","302","303","304","305","308"],"fullExpression":"localFaker.doWith(stringCallable, 123)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNotNull()","methodName":"isNotNull","lineNumber":["361"],"fullExpression":"assertThat(constructor).isNotNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isLessThan(int)","methodName":"isLessThan","lineNumber":["251"],"fullExpression":"assertThat(counter).isLessThan(n)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["129","270","331","335"],"fullExpression":"assertThat(faker.regexify(input)).matches(input)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isEqualTo(int)","methodName":"isEqualTo","lineNumber":["204","205"],"fullExpression":"assertThat(numberOfLinesFull).isEqualTo(limit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"ancient()","methodName":"ancient","lineNumber":["279"],"fullExpression":"f.ancient()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"doWith(java.util.concurrent.Callable<T>, java.util.Locale, long)","methodName":"doWith","lineNumber":["312","313","314","315","316","318"],"fullExpression":"localFaker.doWith(stringCallable, Locale.CANADA, 123)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.reflections.util.QueryFunction","methodSignature":"asClass(java.lang.ClassLoader...)","methodName":"asClass","lineNumber":["342"],"fullExpression":"SubTypes.of(AbstractProvider.class).asClass()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.reflections.util.QueryBuilder","methodSignature":"of(java.lang.reflect.AnnotatedElement...)","methodName":"of","lineNumber":["342"],"fullExpression":"SubTypes.of(AbstractProvider.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"firstName()","methodName":"firstName","lineNumber":["265","299"],"fullExpression":"localFaker.name().firstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["256","257","258","259"],"fullExpression":"assertThat(new Faker()).isInstanceOf(BaseFaker.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"name()","methodName":"name","lineNumber":["265","299"],"fullExpression":"localFaker.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["134","140","146","231","289","307","317"],"fullExpression":"assertThatThrownBy(() -> faker.expression(\"#{regexify 'a','a'}\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(T)","methodName":"assertThat","lineNumber":["256","257","258","259","361"],"fullExpression":"assertThat(new Faker())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"as(java.lang.String, java.lang.Object...)","methodName":"as","lineNumber":["380","385"],"fullExpression":"assertThat(set).as(\"Class: \" + ap.getClass().getName() + \", method: \" + m.getName() + \" should have the same return value\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["204","205","251"],"fullExpression":"assertThat(numberOfLinesFull)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/HarryPotter.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31","35"],"fullExpression":"resolve(\"harry_potter.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/StreetFighter.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29"],"fullExpression":"resolve(\"games.street_fighter.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Yoda.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13"],"fullExpression":"resolve(\"yoda.quotes\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/LocalityTest.java":[{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"locality()","methodName":"locality","lineNumber":["29","48"],"fullExpression":"f.locality()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["48","67","101"],"fullExpression":"assertThat(f.locality().displayName())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Locality","methodSignature":"localeStringWithoutReplacement(java.util.Random)","methodName":"localeStringWithoutReplacement","lineNumber":["87"],"fullExpression":"locality.localeStringWithoutReplacement(random)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["48"],"fullExpression":"assertThat(f.locality().displayName()).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.List<? extends ELEMENT>)","methodName":"assertThat","lineNumber":["43","78","90","96"],"fullExpression":"assertThat(allLocales)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Locality","methodSignature":"localeStringWithRandom(java.util.Random)","methodName":"localeStringWithRandom","lineNumber":["62","65","77"],"fullExpression":"locality.localeStringWithRandom(random1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["67"],"fullExpression":"assertThat(randomLocale1).isEqualTo(randomLocale2)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Locality","methodSignature":"localeStringWithoutReplacement()","methodName":"localeStringWithoutReplacement","lineNumber":["101"],"fullExpression":"locality.localeStringWithoutReplacement()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNotNull()","methodName":"isNotNull","lineNumber":["101"],"fullExpression":"assertThat(locality.localeStringWithoutReplacement()).isNotNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractFileAssert","methodSignature":"exists()","methodName":"exists","lineNumber":["40"],"fullExpression":"assertThat(resourceDirectory).exists()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Locality","methodSignature":"allSupportedLocales()","methodName":"allSupportedLocales","lineNumber":["30"],"fullExpression":"locality.allSupportedLocales()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"contains(ELEMENT...)","methodName":"contains","lineNumber":["78","96"],"fullExpression":"assertThat(allLocales).contains(randomLocale)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["43"],"fullExpression":"assertThat(allLocales).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"containsAll(java.lang.Iterable<? extends ELEMENT>)","methodName":"containsAll","lineNumber":["90"],"fullExpression":"assertThat(allLocales).containsAll(returnedLocales)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.io.File)","methodName":"assertThat","lineNumber":["40"],"fullExpression":"assertThat(resourceDirectory)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Locality","methodSignature":"localeString()","methodName":"localeString","lineNumber":["96"],"fullExpression":"locality.localeString()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Locality","methodSignature":"displayName()","methodName":"displayName","lineNumber":["48"],"fullExpression":"f.locality().displayName()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Australia.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21"],"fullExpression":"resolve(\"australia.locations\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/service/FakeValuesGroupingTest.java":[{"declaringType":"net.datafaker.service.FakeValuesGrouping","methodSignature":"get(java.lang.String)","methodName":"get","lineNumber":["24","33","36"],"fullExpression":"fakeValuesGrouping.get(\"address\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesGrouping","methodSignature":"add(net.datafaker.service.FakeValuesInterface)","methodName":"add","lineNumber":["19","31"],"fullExpression":"fakeValuesGrouping.add(addressValues)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"of(net.datafaker.service.FakeValuesContext)","methodName":"of","lineNumber":["18","30"],"fullExpression":"FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"address.yml\", \"address\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"get(java.lang.String)","methodName":"get","lineNumber":["24","33","36"],"fullExpression":"addressValues.get(\"address\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesContext","methodSignature":"of(java.util.Locale, java.lang.String, java.lang.String)","methodName":"of","lineNumber":["18","30"],"fullExpression":"FakeValuesContext.of(Locale.ENGLISH, \"address.yml\", \"address\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractMapAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["24","33","36"],"fullExpression":"assertThat(fakeValuesGrouping.get(\"address\")).isEqualTo(addressValues.get(\"address\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.Map<K, V>)","methodName":"assertThat","lineNumber":["24","33","36"],"fullExpression":"assertThat(fakeValuesGrouping.get(\"address\"))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/service/files/EnFileTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["14"],"fullExpression":"assertThat(e.getFile())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.files.EnFile","methodSignature":"getFile()","methodName":"getFile","lineNumber":["14"],"fullExpression":"e.getFile()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"allSatisfy(org.assertj.core.api.ThrowingConsumer<? super ELEMENT>)","methodName":"allSatisfy","lineNumber":["14"],"fullExpression":"assertThat(EnFile.getFiles()).allSatisfy(e -> assertThat(e.getFile()).isLowerCase())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.List<? extends ELEMENT>)","methodName":"assertThat","lineNumber":["14"],"fullExpression":"assertThat(EnFile.getFiles())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.files.EnFile","methodSignature":"getFiles()","methodName":"getFiles","lineNumber":["14"],"fullExpression":"EnFile.getFiles()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isLowerCase()","methodName":"isLowerCase","lineNumber":["14"],"fullExpression":"assertThat(e.getFile()).isLowerCase()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Mood.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21"],"fullExpression":"resolve(\"mood.feeling\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/annotations/FakeResolver.java":[{"declaringType":"net.datafaker.annotations.FakeResolver","methodSignature":"generateFromDefaultSchema()","methodName":"generateFromDefaultSchema","lineNumber":["37"],"fullExpression":"generateFromDefaultSchema()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.annotations.FakeResolver","methodSignature":"checkFakeAnnotation(java.lang.Class<T>)","methodName":"checkFakeAnnotation","lineNumber":["46"],"fullExpression":"checkFakeAnnotation(clazz)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Transformer","methodSignature":"apply(IN, net.datafaker.transformations.Schema<IN, ?>)","methodName":"apply","lineNumber":["40","53"],"fullExpression":"JAVA_OBJECT_TRANSFORMER.apply(clazz, schema)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/BaseFakerTest.java":[{"declaringType":"org.junit.jupiter.api.TestInfo","methodSignature":"getTestClass()","methodName":"getTestClass","lineNumber":["75"],"fullExpression":"testInfo.getTestClass()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Descriptable","methodSignature":"as(java.lang.String, java.lang.Object...)","methodName":"as","lineNumber":["83","89"],"fullExpression":"assertThat(item).as(\"Check item isn't empty\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFakerTest","methodSignature":"getBaseList(java.lang.String)","methodName":"getBaseList","lineNumber":["79","100"],"fullExpression":"getBaseList(testSpec.key)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["83","89"],"fullExpression":"assertThat(item)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.Collection<? extends E>)","methodName":"assertThat","lineNumber":["85","87","102"],"fullExpression":"assertThat(actual)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"fetchObject(java.lang.String, net.datafaker.service.FakerContext)","methodName":"fetchObject","lineNumber":["67"],"fullExpression":"faker.fakeValuesService().fetchObject(key, faker.getContext())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"getContext()","methodName":"getContext","lineNumber":["67"],"fullExpression":"faker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"as(java.lang.String, java.lang.Object...)","methodName":"as","lineNumber":["85","87","102"],"fullExpression":"assertThat(actual).as(\"Check actual list isn't empty and contains the item for the key \" + collection)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFakerTest","methodSignature":"getFaker()","methodName":"getFaker","lineNumber":["38"],"fullExpression":"getFaker()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"fakeValuesService()","methodName":"fakeValuesService","lineNumber":["67"],"fullExpression":"faker.fakeValuesService()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.MockitoAnnotations","methodSignature":"openMocks(java.lang.Object)","methodName":"openMocks","lineNumber":["43"],"fullExpression":"MockitoAnnotations.openMocks(this)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/service/FakerContext.java":[{"declaringType":"net.datafaker.internal.helper.SingletonLocale","methodSignature":"get(java.util.Locale)","methodName":"get","lineNumber":["44","50","98","99","102","112","133","149"],"fullExpression":"SingletonLocale.get(locale)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.internal.helper.SingletonLocale","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["58","90","129","147","148","148","149"],"fullExpression":"sLocale.getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.internal.helper.SingletonLocale","methodSignature":"hashCode()","methodName":"hashCode","lineNumber":["168"],"fullExpression":"sLocale.hashCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"calculateLocaleChain(net.datafaker.internal.helper.SingletonLocale)","methodName":"calculateLocaleChain","lineNumber":["133","141"],"fullExpression":"calculateLocaleChain(normalizeLocale(SingletonLocale.get(from)))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"hashCode()","methodName":"hashCode","lineNumber":["169"],"fullExpression":"randomService.hashCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"normalizeLocale(net.datafaker.internal.helper.SingletonLocale)","methodName":"normalizeLocale","lineNumber":["112","133"],"fullExpression":"normalizeLocale(SingletonLocale.get(locale))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"setCurrentLocale(java.util.Locale)","methodName":"setCurrentLocale","lineNumber":["46"],"fullExpression":"setCurrentLocale(locale)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"localeChain()","methodName":"localeChain","lineNumber":["117"],"fullExpression":"localeChain()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/WeatherTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["21","26","32","39"],"fullExpression":"assertThat(weather.temperatureCelsius())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Weather","methodSignature":"temperatureFahrenheit(int, int)","methodName":"temperatureFahrenheit","lineNumber":["39"],"fullExpression":"weather.temperatureFahrenheit(-5, 5)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Weather","methodSignature":"temperatureCelsius(int, int)","methodName":"temperatureCelsius","lineNumber":["32"],"fullExpression":"weather.temperatureCelsius(-5, 5)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Weather","methodSignature":"temperatureCelsius()","methodName":"temperatureCelsius","lineNumber":["21"],"fullExpression":"weather.temperatureCelsius()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Weather","methodSignature":"temperatureFahrenheit()","methodName":"temperatureFahrenheit","lineNumber":["26"],"fullExpression":"weather.temperatureFahrenheit()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["21","26","32","39"],"fullExpression":"assertThat(weather.temperatureCelsius()).matches(\"-?\\\\d+°C\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Zodiac.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["21"],"fullExpression":"resolve(\"zodiac.signs\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/BaseProviders.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getProvider(java.lang.Class<AP>, java.util.function.Function<PR, AP>)","methodName":"getProvider","lineNumber":["9","13","17","21","25","29","33","37","41","45","49","53","57","61","65","69","73","77","81","85","89","93","97","101","105","109","113","117","121","125","129","133","137","141","145","149","153","157","161","165","169","173","177","181","185","189","193","197","201","205","209","213","217","221","225","229","233","237","241","245","249","253","257","261","265","269","273","277","281","285","289","293","297","301","305","309","313","317","321","325","329","333","337","341","345","349","353","357","361","365","369","373","377","381","385","389","393","397","401","405","409","413","417","421","425","429","433","437","441","445","449","453","457","461","465","469","473","477","481","485","489"],"fullExpression":"getProvider(Address.class, Address::new)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Witcher.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31","35","39","43","47"],"fullExpression":"resolve(\"games.witcher.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/BossaNova.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["19","23"],"fullExpression":"resolve(\"bossa_nova.artists\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Currency.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["20","29"],"fullExpression":"resolve(\"currency.name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Gender.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["20","29","38"],"fullExpression":"resolve(\"gender.types\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/ChuckNorris.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15"],"fullExpression":"resolve(\"chuck_norris.fact\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/sport/EnglandFootBall.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19"],"fullExpression":"resolve(\"englandfootball.leagues\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/SoulKnight.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["22","29","36","43","50","57"],"fullExpression":"resolve(\"soul_knight.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Science.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29","33","37","41"],"fullExpression":"resolve(\"science.element\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Book.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25"],"fullExpression":"resolve(\"book.author\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23"],"fullExpression":"resolve(\"the_thick_of_it.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23"],"fullExpression":"resolve(\"rick_and_morty.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Twitter.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["41","72","109","154"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["74","90","115","122","158"],"fullExpression":"random.nextInt(10)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["110","113"],"fullExpression":"random.nextInt(1, sentenceMaxLength)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextDouble()","methodName":"nextDouble","lineNumber":["44","46"],"fullExpression":"random.nextDouble()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["133","140"],"fullExpression":"resolve(\"twitter.user_name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/BloodType.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","27","36","46"],"fullExpression":"resolve(\"blood_type.abo_types\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Appliance.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17"],"fullExpression":"resolve(\"appliance.brand\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/CompanyTest.java":[{"declaringType":"net.datafaker.providers.base.Company","methodSignature":"name()","methodName":"name","lineNumber":["20"],"fullExpression":"company.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["20","32","37","42","47","52"],"fullExpression":"assertThat(company.name())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Company","methodSignature":"url()","methodName":"url","lineNumber":["52"],"fullExpression":"company.url()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Company","methodSignature":"buzzword()","methodName":"buzzword","lineNumber":["32"],"fullExpression":"company.buzzword()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Company","methodSignature":"bs()","methodName":"bs","lineNumber":["42"],"fullExpression":"company.bs()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Company","methodSignature":"logo()","methodName":"logo","lineNumber":["47"],"fullExpression":"company.logo()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.util.regex.Pattern)","methodName":"matches","lineNumber":["37","42","52"],"fullExpression":"assertThat(company.catchPhrase()).matches(PHRASE_PATTERN)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Company","methodSignature":"catchPhrase()","methodName":"catchPhrase","lineNumber":["37"],"fullExpression":"company.catchPhrase()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["20","32","47"],"fullExpression":"assertThat(company.name()).matches(\"[A-Za-z\\\\-&',. ]+\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["28","37","46"],"fullExpression":"resolve(\"bojack_horseman.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/TwitterTest.java":[{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNotEqualTo(java.lang.Object)","methodName":"isNotEqualTo","lineNumber":["58"],"fullExpression":"assertThat(generatedIDOne).isNotEqualTo(generatedIDTwo)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["36","43","50","58","98","106","114","121"],"fullExpression":"assertThat(generatedID)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Twitter","methodSignature":"userName()","methodName":"userName","lineNumber":["98"],"fullExpression":"twitter.userName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"contains(java.lang.CharSequence...)","methodName":"contains","lineNumber":["121"],"fullExpression":"assertThat(twitter.getLink(\"John\", 6)).contains(\"John\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["20","29","91"],"fullExpression":"assertThat(test)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Twitter","methodSignature":"userId()","methodName":"userId","lineNumber":["106"],"fullExpression":"twitter.userId()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["36","43","50"],"fullExpression":"assertThat(generatedID).hasSize(expectedLength)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["20","29","91"],"fullExpression":"assertThat(test).isTrue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(T[])","methodName":"assertThat","lineNumber":["67"],"fullExpression":"assertThat(textwords)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractObjectArrayAssert","methodSignature":"hasSizeLessThanOrEqualTo(int)","methodName":"hasSizeLessThanOrEqualTo","lineNumber":["67"],"fullExpression":"assertThat(textwords).hasSizeLessThanOrEqualTo(sentenceMaxLength)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Twitter","methodSignature":"getLink(java.lang.String, int)","methodName":"getLink","lineNumber":["114","121"],"fullExpression":"twitter.getLink(\"John\", 6)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.util.regex.Pattern)","methodName":"matches","lineNumber":["98","106","114"],"fullExpression":"assertThat(twitter.userName()).matches(pattern)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Twitter","methodSignature":"text(java.lang.String[], int, int)","methodName":"text","lineNumber":["65","75"],"fullExpression":"twitter.text(null, sentenceMaxLength, wordMaxLength)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Twitter","methodSignature":"createdTime(boolean, java.util.Date, java.util.Date)","methodName":"createdTime","lineNumber":["18","27"],"fullExpression":"twitter.createdTime(true, testDate, constrainDate)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Twitter","methodSignature":"twitterId(int)","methodName":"twitterId","lineNumber":["35","42","49","56","57"],"fullExpression":"twitter.twitterId(expectedLength)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Cannabis.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29","33","37","41","45","49"],"fullExpression":"resolve(\"cannabis.strains\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/sport/Baseball.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["29","38","47","56"],"fullExpression":"resolve(\"baseball.teams\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Finance.java":[{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"iban(java.lang.String)","methodName":"iban","lineNumber":["124"],"fullExpression":"iban(randomCountryCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"padLeftZeros(java.lang.String, int)","methodName":"padLeftZeros","lineNumber":["181"],"fullExpression":"padLeftZeros(String.valueOf(98 - mod97), 2)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"createCountryCodeToBasicBankAccountNumberPatternMap()","methodName":"createCountryCodeToBasicBankAccountNumberPatternMap","lineNumber":["67"],"fullExpression":"createCountryCodeToBasicBankAccountNumberPatternMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"regexify(java.lang.String)","methodName":"regexify","lineNumber":["118","128"],"fullExpression":"faker.regexify(\"([A-Z]){4}([A-Z]){2}([0-9A-Z]){2}([0-9A-Z]{3})?\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"creditCard(net.datafaker.providers.base.Finance.CreditCardType)","methodName":"creditCard","lineNumber":["111"],"fullExpression":"creditCard(type)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["47","55","63","77"],"fullExpression":"resolve(\"finance.ticker.nasdaq\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"randomCreditCardType()","methodName":"randomCreditCardType","lineNumber":["110"],"fullExpression":"randomCreditCardType()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"calculateIbanChecksum(java.lang.String, java.lang.String)","methodName":"calculateIbanChecksum","lineNumber":["129"],"fullExpression":"calculateIbanChecksum(countryCode, basicBankAccountNumber)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"sumOfDigits(int)","methodName":"sumOfDigits","lineNumber":["85"],"fullExpression":"sumOfDigits(digits[i] * multiplier)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["123","134","154"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["123","134","154"],"fullExpression":"faker.random().nextInt(countryCodes.size())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance.CreditCardType","methodSignature":"values()","methodName":"values","lineNumber":["154","154"],"fullExpression":"CreditCardType.values()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["78","138"],"fullExpression":"faker.numerify(value)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21"],"fullExpression":"resolve(\"games.super_smash_bros.fighter\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Unique.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["50"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Unique","methodSignature":"fetchValues(java.lang.String)","methodName":"fetchValues","lineNumber":["41"],"fullExpression":"fetchValues(key)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["50"],"fullExpression":"faker.random().nextInt(0, values.size() - 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Unique","methodSignature":"removeAtIndex(java.util.List<java.lang.String>, int)","methodName":"removeAtIndex","lineNumber":["51"],"fullExpression":"removeAtIndex(values, index)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Unique","methodSignature":"noValuesFoundException(java.lang.String)","methodName":"noValuesFoundException","lineNumber":["69","78"],"fullExpression":"noValuesFoundException(key)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"fetchObject(java.lang.String, net.datafaker.service.FakerContext)","methodName":"fetchObject","lineNumber":["66"],"fullExpression":"faker.fakeValuesService().fetchObject(key, faker.getContext())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getContext()","methodName":"getContext","lineNumber":["35","66"],"fullExpression":"faker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"fakeValuesService()","methodName":"fakeValuesService","lineNumber":["66"],"fullExpression":"faker.fakeValuesService()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["35"],"fullExpression":"faker.getContext().getLocale()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/idnumbers/PeselNumber.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["60"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["60"],"fullExpression":"faker.random().nextInt(10)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/DrivingLicenseTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["79"],"fullExpression":"assertThat(drivingLicense.drivingLicense(licensePattern.abbv))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.util.regex.Pattern)","methodName":"matches","lineNumber":["79"],"fullExpression":"assertThat(drivingLicense.drivingLicense(licensePattern.abbv)).matches(licensePattern.pattern)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DrivingLicense","methodSignature":"drivingLicense(java.lang.String)","methodName":"drivingLicense","lineNumber":["79"],"fullExpression":"drivingLicense.drivingLicense(licensePattern.abbv)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/integration/FakerIntegrationTest.java":[{"declaringType":"net.datafaker.integration.FakerIntegrationTest","methodSignature":"isExcepted(java.lang.Object, java.lang.reflect.Method, java.util.Locale)","methodName":"isExcepted","lineNumber":["112"],"fullExpression":"isExcepted(object, method, locale)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.lang3.StringUtils","methodSignature":"substringBefore(java.lang.String, java.lang.String)","methodName":"substringBefore","lineNumber":["161"],"fullExpression":"StringUtils.substringBefore(ymlFileName, \".\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.List<? extends ELEMENT>)","methodName":"assertThat","lineNumber":["138","141","145","146"],"fullExpression":"assertThat(faker.lorem().paragraphs(1))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.reflections.util.ReflectionUtilsPredicates","methodSignature":"withReturnType(java.lang.Class<T>)","methodName":"withReturnType","lineNumber":["108"],"fullExpression":"withReturnType(String.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNotNull()","methodName":"isNotNull","lineNumber":["133","134","135","137","140","143"],"fullExpression":"assertThat(faker.bothify(\"####???\")).isNotNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getContext()","methodName":"getContext","lineNumber":["103"],"fullExpression":"((AbstractProvider) object).getFaker().getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.reflections.util.ReflectionUtilsPredicates","methodSignature":"withModifier(int)","methodName":"withModifier","lineNumber":["107"],"fullExpression":"withModifier(Modifier.PUBLIC)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"words(int)","methodName":"words","lineNumber":["146"],"fullExpression":"faker.lorem().words(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"paragraphs(int)","methodName":"paragraphs","lineNumber":["138"],"fullExpression":"faker.lorem().paragraphs(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Descriptable","methodSignature":"as(java.lang.String, java.lang.Object...)","methodName":"as","lineNumber":["118"],"fullExpression":"assertThat(returnValueAsString).as(\"For method \" + object.getClass() + \"#\" + method.getName())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"letterify(java.lang.String)","methodName":"letterify","lineNumber":["134"],"fullExpression":"faker.letterify(\"????\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.reflections.ReflectionUtils","methodSignature":"getAllMethods(java.lang.Class<?>, java.util.function.Predicate<? super java.lang.reflect.Method>...)","methodName":"getAllMethods","lineNumber":["106"],"fullExpression":"getAllMethods(object.getClass(), withModifier(Modifier.PUBLIC), withReturnType(String.class), withParametersCount(0))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"address()","methodName":"address","lineNumber":["143"],"fullExpression":"faker.address()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.integration.FakerIntegrationTest","methodSignature":"testAllMethodsThatReturnStringsActuallyReturnStrings(java.lang.Object)","methodName":"testAllMethodsThatReturnStringsActuallyReturnStrings","lineNumber":["93"],"fullExpression":"testAllMethodsThatReturnStringsActuallyReturnStrings(providerImpl)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(T)","methodName":"assertThat","lineNumber":["116"],"fullExpression":"assertThat(returnValue)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"paragraph(int)","methodName":"paragraph","lineNumber":["137"],"fullExpression":"faker.lorem().paragraph(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.reflections.util.ReflectionUtilsPredicates","methodSignature":"withParametersCount(int)","methodName":"withParametersCount","lineNumber":["109"],"fullExpression":"withParametersCount(0)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["118","133","134","135","137","140","143"],"fullExpression":"assertThat(returnValueAsString)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.integration.FakerIntegrationTest.SkippedMethods","methodSignature":"of(java.lang.Class, java.lang.String...)","methodName":"of","lineNumber":["49","50","51","52","53","54","55","56","57"],"fullExpression":"SkippedMethods.of(Name.class, \"suffix\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"sentence(int)","methodName":"sentence","lineNumber":["140"],"fullExpression":"faker.lorem().sentence(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["135"],"fullExpression":"faker.numerify(\"####\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractListAssert","methodSignature":"isNotNull()","methodName":"isNotNull","lineNumber":["138","141","145","146"],"fullExpression":"assertThat(faker.lorem().paragraphs(1)).isNotNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["101","103"],"fullExpression":"((BaseFaker) object).getContext().getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"streetAddress()","methodName":"streetAddress","lineNumber":["143"],"fullExpression":"faker.address().streetAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"sentences(int)","methodName":"sentences","lineNumber":["141"],"fullExpression":"faker.lorem().sentences(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractObjectAssert","methodSignature":"as(java.lang.String, java.lang.Object...)","methodName":"as","lineNumber":["116"],"fullExpression":"assertThat(returnValue).as(\"For method \" + object.getClass() + \"#\" + method.getName() + \"value is '\" + returnValue + \"'\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"lorem()","methodName":"lorem","lineNumber":["137","138","140","141","145","146"],"fullExpression":"faker.lorem()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.integration.FakerIntegrationTest","methodSignature":"init(java.util.Locale, java.util.Random)","methodName":"init","lineNumber":["86","132"],"fullExpression":"init(locale, random)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"getContext()","methodName":"getContext","lineNumber":["101"],"fullExpression":"((BaseFaker) object).getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"words()","methodName":"words","lineNumber":["145"],"fullExpression":"faker.lorem().words()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"getFaker()","methodName":"getFaker","lineNumber":["103"],"fullExpression":"((AbstractProvider) object).getFaker()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"bothify(java.lang.String)","methodName":"bothify","lineNumber":["133"],"fullExpression":"faker.bothify(\"####???\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.jupiter.params.provider.Arguments","methodSignature":"of(java.lang.Object...)","methodName":"of","lineNumber":["151","152","153","154","155","156","157","161"],"fullExpression":"Arguments.of(Locale.ENGLISH, new Random())","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/service/FakeValuesTest.java":[{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNotEqualTo(java.lang.Object)","methodName":"isNotEqualTo","lineNumber":["106","127"],"fullExpression":"assertThat(hebrew.getPath()).isNotEqualTo(\"iw\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNull()","methodName":"isNull","lineNumber":["82","118"],"fullExpression":"assertThat(fakeValues.get(\"dog\")).isNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["100","106"],"fullExpression":"assertThat(hebrew.getPath())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["112"],"fullExpression":"fv.getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["112","125"],"fullExpression":"assertThat(fv.getLocale()).isEqualTo(new Locale(\"uk\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractMapAssert","methodSignature":"isNotNull()","methodName":"isNotNull","lineNumber":["77","88","94"],"fullExpression":"assertThat(fakeValues.get(PATH)).isNotNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["100"],"fullExpression":"assertThat(hebrew.getPath()).isEqualTo(\"he\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["67","72"],"fullExpression":"assertThat(fakeValues.supportsPath(PATH))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesContext","methodSignature":"of(java.util.Locale)","methodName":"of","lineNumber":["87","93","99","105","111","117","134","134","135","136","137","138"],"fullExpression":"FakeValuesContext.of(Locale.FRENCH)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"get(java.lang.String)","methodName":"get","lineNumber":["77","82","88","94","118"],"fullExpression":"fakeValues.get(PATH)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"supportsPath(java.lang.String)","methodName":"supportsPath","lineNumber":["67","72"],"fullExpression":"fakeValues.supportsPath(PATH)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isFalse()","methodName":"isFalse","lineNumber":["72"],"fullExpression":"assertThat(fakeValues.supportsPath(\"dog\")).isFalse()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["67"],"fullExpression":"assertThat(fakeValues.supportsPath(PATH)).isTrue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.Map<K, V>)","methodName":"assertThat","lineNumber":["77","82","88","94","118"],"fullExpression":"assertThat(fakeValues.get(PATH))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"getPath()","methodName":"getPath","lineNumber":["100","106"],"fullExpression":"hebrew.getPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesContext","methodSignature":"of(java.util.Locale, java.lang.String, java.lang.String, java.net.URL)","methodName":"of","lineNumber":["141","141","142","142"],"fullExpression":"FakeValuesContext.of(Locale.ENGLISH, \"filepath\", \"path\", tmp.toUri().toURL())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"of(net.datafaker.service.FakeValuesContext)","methodName":"of","lineNumber":["25","87","93","99","105","111","117","134","134","135","136","137","138","138","139","139","140","140","141","141","142","142"],"fullExpression":"FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"address.yml\", PATH))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(T)","methodName":"assertThat","lineNumber":["112","125","127"],"fullExpression":"assertThat(fv.getLocale())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesContext","methodSignature":"of(java.util.Locale, java.lang.String, java.lang.String)","methodName":"of","lineNumber":["25","138","139","139","140","140"],"fullExpression":"FakeValuesContext.of(Locale.ENGLISH, \"address.yml\", PATH)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.jupiter.params.provider.Arguments","methodSignature":"of(java.lang.Object...)","methodName":"of","lineNumber":["134","135","136","137","138","139","140","141","142"],"fullExpression":"of(FakeValues.of(FakeValuesContext.of(Locale.CANADA)), FakeValues.of(FakeValuesContext.of(Locale.CANADA)), true)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/CNPJTest.java":[{"declaringType":"net.datafaker.providers.base.CNPJ","methodSignature":"valid(boolean, boolean)","methodName":"valid","lineNumber":["35","41"],"fullExpression":"cnpj1.valid(true, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["81","82","83","84"],"fullExpression":"assertThat(cnpj.valid())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.CNPJ","methodSignature":"invalid(boolean, boolean)","methodName":"invalid","lineNumber":["52","58"],"fullExpression":"cnpj1.invalid(true, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.CNPJ","methodSignature":"invalid(boolean)","methodName":"invalid","lineNumber":["84"],"fullExpression":"cnpj.invalid(true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["20","29","46","63"],"fullExpression":"assertThat(isCNPJValid(cnpj.valid()))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.CNPJ","methodSignature":"invalid()","methodName":"invalid","lineNumber":["29","83"],"fullExpression":"cnpj.invalid()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isGreaterThan(int)","methodName":"isGreaterThan","lineNumber":["45"],"fullExpression":"assertThat(parseInt(branch)).isGreaterThan(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.CNPJ","methodSignature":"valid(boolean)","methodName":"valid","lineNumber":["82"],"fullExpression":"cnpj.valid(true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.util.regex.Pattern)","methodName":"matches","lineNumber":["81","82","83","84"],"fullExpression":"assertThat(cnpj.valid()).matches(cnpjExpression)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Descriptable","methodSignature":"describedAs(java.lang.String, java.lang.Object...)","methodName":"describedAs","lineNumber":["20","29","46","62","63"],"fullExpression":"assertThat(isCNPJValid(cnpj.valid())).describedAs(\"Current value \" + cnpj)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.CNPJ","methodSignature":"valid()","methodName":"valid","lineNumber":["20","81"],"fullExpression":"cnpj.valid()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["45","62"],"fullExpression":"assertThat(parseInt(branch))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/PlanetTest.java":[{"declaringType":"net.datafaker.providers.base.Planet.PlanetName","methodSignature":"values()","methodName":"values","lineNumber":["32"],"fullExpression":"Planet.PlanetName.values()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["40","43","46","49","52","58","61","64","67","70","76","79","82","85","88","94","97","100","103","106","112","115","118","121","124","130","133","136","139","142","148","151","154","157","160","166","169","172","175","178","184","187","190","193","196"],"fullExpression":"assertThat(lengthOfDay)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"meanDistanceFromTheSun(net.datafaker.providers.base.Planet.PlanetName)","methodName":"meanDistanceFromTheSun","lineNumber":["42","60","78","96","114","132","150","168","186"],"fullExpression":"planet.meanDistanceFromTheSun(JUPITER)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"equatorialGravity(net.datafaker.providers.base.Planet.PlanetName)","methodName":"equatorialGravity","lineNumber":["45","63","81","99","117","135","153","171","189"],"fullExpression":"planet.equatorialGravity(JUPITER)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["40","43","46","49","52","58","61","64","67","70","76","79","82","85","88","94","97","100","103","106","112","115","118","121","124","130","133","136","139","142","148","151","154","157","160","166","169","172","175","178","184","187","190","193","196"],"fullExpression":"assertThat(lengthOfDay).isEqualTo(\"0d 9h 56m\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"equatorialRadius(net.datafaker.providers.base.Planet.PlanetName)","methodName":"equatorialRadius","lineNumber":["51","69","87","105","123","141","159","177","195"],"fullExpression":"planet.equatorialRadius(JUPITER)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"lengthOfDay(net.datafaker.providers.base.Planet.PlanetName)","methodName":"lengthOfDay","lineNumber":["39","57","75","93","111","129","147","165","183"],"fullExpression":"planet.lengthOfDay(JUPITER)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Planet","methodSignature":"mass(net.datafaker.providers.base.Planet.PlanetName)","methodName":"mass","lineNumber":["48","66","84","102","120","138","156","174","192"],"fullExpression":"planet.mass(JUPITER)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/DurationTest.java":[{"declaringType":"org.assertj.core.api.AbstractComparableAssert","methodSignature":"isBetween(ACTUAL, ACTUAL)","methodName":"isBetween","lineNumber":["18","28","38","48"],"fullExpression":"assertThat(randomDuration).isBetween(lowerBound, upperBound)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.time.Duration)","methodName":"assertThat","lineNumber":["18","28","38","48"],"fullExpression":"assertThat(randomDuration)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/RelationshipTest.java":[{"declaringType":"net.datafaker.providers.base.Relationship","methodSignature":"any()","methodName":"any","lineNumber":["29","45","52","61","71"],"fullExpression":"relationship.any()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["29"],"fullExpression":"assertThat(relationship.any())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"random()","methodName":"random","lineNumber":["44","51","58","68"],"fullExpression":"mockFaker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodSignature":"then(org.mockito.stubbing.Answer<?>)","methodName":"then","lineNumber":["58","68"],"fullExpression":"when(mockFaker.random()).then(invocationOnMock -> {\n    throw new IllegalAccessException();\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["29"],"fullExpression":"assertThat(relationship.any()).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"when(T)","methodName":"when","lineNumber":["44","51","58","68"],"fullExpression":"when(mockFaker.random())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["45","52","61","71"],"fullExpression":"assertThatThrownBy(() -> new Relationship(mockFaker).any()).isInstanceOf(IllegalArgumentException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["45","52","61","71"],"fullExpression":"assertThatThrownBy(() -> new Relationship(mockFaker).any())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"mock(java.lang.Class<T>)","methodName":"mock","lineNumber":["24"],"fullExpression":"Mockito.mock(BaseFaker.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodSignature":"thenThrow(java.lang.Throwable...)","methodName":"thenThrow","lineNumber":["44","51"],"fullExpression":"when(mockFaker.random()).thenThrow(new IllegalArgumentException())","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Tron.java":[{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.Class<E>)","methodName":"option","lineNumber":["17","33","49"],"fullExpression":"faker.options().option(Character.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.entertainment.Tron","methodSignature":"character(net.datafaker.providers.entertainment.Tron.Character)","methodName":"character","lineNumber":["17"],"fullExpression":"character(faker.options().option(Character.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"options()","methodName":"options","lineNumber":["17","33","49"],"fullExpression":"faker.options()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["21","25","29","37","41","45","53"],"fullExpression":"resolve(\"tron.characters.\" + character.yamlKey)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.entertainment.Tron","methodSignature":"quote(net.datafaker.providers.entertainment.Tron.Quote)","methodName":"quote","lineNumber":["33"],"fullExpression":"quote(faker.options().option(Tron.Quote.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.entertainment.Tron","methodSignature":"alternateCharacterSpelling(net.datafaker.providers.entertainment.Tron.AlternateCharacterSpelling)","methodName":"alternateCharacterSpelling","lineNumber":["49"],"fullExpression":"alternateCharacterSpelling(faker.options().option(Tron.AlternateCharacterSpelling.class))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["20","27","34","41","48"],"fullExpression":"resolve(\"games.resident_evil.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/TextTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["30","71","103","123","131"],"fullExpression":"assertThat(text)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"is(org.assertj.core.api.Condition<? super ACTUAL>)","methodName":"is","lineNumber":["71"],"fullExpression":"assertThat(text).is(new Condition<>(pw -> {\n    for (int i = 0; i < pw.length(); i++) {\n        if (Character.isLowerCase(pw.charAt(i))) {\n            return true;\n        }\n    }\n    return false;\n}, \"contains lower case\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Character)","methodName":"assertThat","lineNumber":["110","116"],"fullExpression":"assertThat(character)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharacterAssert","methodSignature":"isLowerCase()","methodName":"isLowerCase","lineNumber":["116"],"fullExpression":"assertThat(character).isLowerCase()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"matches(java.util.function.Predicate<? super ACTUAL>)","methodName":"matches","lineNumber":["30"],"fullExpression":"assertThat(text).matches(s -> {\n    int j = 0;\n    int curRuCnt = 0;\n    while (j < s.length() && curRuCnt < ruCnt) {\n        if (ruLowerCase.indexOf(s.charAt(j++)) >= 0)\n            curRuCnt++;\n    }\n    return curRuCnt >= ruCnt;\n})","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.util.regex.Pattern)","methodName":"matches","lineNumber":["103"],"fullExpression":"assertThat(character.toString()).matches(characterPattern)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"hasSizeBetween(int, int)","methodName":"hasSizeBetween","lineNumber":["131"],"fullExpression":"assertThat(text).hasSizeBetween(20, 80)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["50"],"fullExpression":"assertThatThrownBy(() -> faker.text().text(Text.TextSymbolsBuilder.builder().len(1).with(EN_LOWERCASE, 1).with(EN_UPPERCASE, 1).with(DIGITS, 1).throwIfLengthSmall(true).build()))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharacterAssert","methodSignature":"isUpperCase()","methodName":"isUpperCase","lineNumber":["110"],"fullExpression":"assertThat(character).isUpperCase()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["123"],"fullExpression":"assertThat(text).hasSize(i)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/Control.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29","33","37","41","45"],"fullExpression":"resolve(\"control.character\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/DateAndTime.java":[{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"str2durationUnit(java.lang.String)","methodName":"str2durationUnit","lineNumber":["342","355"],"fullExpression":"str2durationUnit(unit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"past(int, java.util.concurrent.TimeUnit)","methodName":"past","lineNumber":["134"],"fullExpression":"past(atMost, unit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"future(int, java.util.concurrent.TimeUnit, T)","methodName":"future","lineNumber":["40","65","110"],"fullExpression":"future(atMost, unit, aBitLaterThanNow)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"past(int, java.util.concurrent.TimeUnit, T)","methodName":"past","lineNumber":["122","147","190"],"fullExpression":"past(atMost, unit, aBitEarlierThanNow)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"numberBetween(long, long)","methodName":"numberBetween","lineNumber":["273"],"fullExpression":"faker.number().numberBetween(0, DAYS_NANOS)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"generateDuration(long, java.time.temporal.ChronoUnit)","methodName":"generateDuration","lineNumber":["330","355"],"fullExpression":"generateDuration(faker.random().nextLong(min, max), unit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"future(int, java.util.concurrent.TimeUnit)","methodName":"future","lineNumber":["52"],"fullExpression":"future(atMost, unit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"past(int, int, java.util.concurrent.TimeUnit)","methodName":"past","lineNumber":["160"],"fullExpression":"past(atMost, minimum, unit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["94","175","210","271","292","330","355","371","372","373"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextLong(long)","methodName":"nextLong","lineNumber":["94","175","210"],"fullExpression":"faker.random().nextLong(upperBound - 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"birthday(int, int)","methodName":"birthday","lineNumber":["233","252","305"],"fullExpression":"birthday(DEFAULT_MIN_AGE, DEFAULT_MAX_AGE)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["371","372","373"],"fullExpression":"faker.random().nextInt(min.getYears(), max.getYears())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"future(int, int, java.util.concurrent.TimeUnit)","methodName":"future","lineNumber":["79"],"fullExpression":"future(atMost, minimum, unit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextLong(long, long)","methodName":"nextLong","lineNumber":["271","292","330","355"],"fullExpression":"faker.random().nextLong(start, stop)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"number()","methodName":"number","lineNumber":["273"],"fullExpression":"faker.number()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"toString(java.util.Date, java.lang.String)","methodName":"toString","lineNumber":["52","79","110","134","160","190","224","252","305"],"fullExpression":"toString(future(atMost, unit), pattern)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"between(T, T)","methodName":"between","lineNumber":["224"],"fullExpression":"between(from, to)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"duration(long, long, java.time.temporal.ChronoUnit)","methodName":"duration","lineNumber":["317","342"],"fullExpression":"duration(0, max, unit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"birthdayLocalDate(int, int)","methodName":"birthdayLocalDate","lineNumber":["242"],"fullExpression":"birthdayLocalDate(DEFAULT_MIN_AGE, DEFAULT_MAX_AGE)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/UniversityTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["16"],"fullExpression":"assertThat(university.name())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.University","methodSignature":"name()","methodName":"name","lineNumber":["16"],"fullExpression":"university.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["16"],"fullExpression":"assertThat(university.name()).matches(\"[A-Za-z'() ]+\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/service/FakeValuesServiceTest.java":[{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"localeChain(java.util.Locale)","methodName":"localeChain","lineNumber":["210","217","224","239"],"fullExpression":"context.localeChain(Locale.SIMPLIFIED_CHINESE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.ArgumentMatchers","methodSignature":"anyInt()","methodName":"anyInt","lineNumber":["60","85","176"],"fullExpression":"anyInt()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLocalDateTimeAssert","methodSignature":"isStrictlyBetween(java.time.LocalDateTime, java.time.LocalDateTime)","methodName":"isStrictlyBetween","lineNumber":["309","318"],"fullExpression":"assertThat(date).isStrictlyBetween(now, nowPlus10Days)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["70","86","91","148","164","183","201","387"],"fullExpression":"assertThat(fakeValuesService.fetchString(\"property.dummy\", mockedFaker.getContext())).isEqualTo(\"x\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.List<? extends ELEMENT>)","methodName":"assertThat","lineNumber":["212","219","226","233","242"],"fullExpression":"assertThat(chain)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"safeFetch(java.lang.String, net.datafaker.service.FakerContext, java.lang.String)","methodName":"safeFetch","lineNumber":["86","91","96"],"fullExpression":"fakeValuesService.safeFetch(\"property.dummy\", mockedFaker.getContext(), null)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"resolve(java.lang.String, java.lang.Object, net.datafaker.providers.base.BaseFaker, net.datafaker.service.FakerContext)","methodName":"resolve","lineNumber":["105","113","122","131","145","161","180","198","384"],"fullExpression":"fakeValuesService.resolve(\"property.bothify_2\", dummy, f, context)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"updateFakeValuesInterfaceMap(java.util.List<net.datafaker.internal.helper.SingletonLocale>)","methodName":"updateFakeValuesInterfaceMap","lineNumber":["65"],"fullExpression":"fakeValuesService.updateFakeValuesInterfaceMap(context.getLocaleChain())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.RecursiveComparisonAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["256","263"],"fullExpression":"assertThat(fakerContext.getRandomService()).usingRecursiveComparison().isEqualTo(new RandomService())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["330","370"],"fullExpression":"assertThatThrownBy(() -> fakeValuesService.fileExpression(Paths.get(filename), faker, faker.getContext()))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"superhero()","methodName":"superhero","lineNumber":["157","165","192","203"],"fullExpression":"doReturn(person).when(mockedFaker).superhero()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"regexify(java.lang.String)","methodName":"regexify","lineNumber":["115","124","133"],"fullExpression":"verify(mockedFaker).regexify(\"[45]{2}\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"verify(T)","methodName":"verify","lineNumber":["115","124","133","149","165","166","184","203","204","205"],"fullExpression":"verify(mockedFaker)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.stubbing.Stubber","methodSignature":"when(T)","methodName":"when","lineNumber":["85","142","157","158","176","177","192","194","195"],"fullExpression":"doReturn(0).when(randomService)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["70","86","91","96","106","114","123","132","148","164","183","201","338","349","387"],"fullExpression":"assertThat(fakeValuesService.fetchString(\"property.dummy\", mockedFaker.getContext()))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"fetchString(java.lang.String, net.datafaker.service.FakerContext)","methodName":"fetchString","lineNumber":["70"],"fullExpression":"fakeValuesService.fetchString(\"property.dummy\", mockedFaker.getContext())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocaleChain()","methodName":"getLocaleChain","lineNumber":["65","231","240"],"fullExpression":"context.getLocaleChain()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getRandomService()","methodName":"getRandomService","lineNumber":["256"],"fullExpression":"fakerContext.getRandomService()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesServiceTest","methodSignature":"expressionShouldFailWithContaining(java.lang.String, java.lang.String)","methodName":"expressionShouldFailWithContaining","lineNumber":["279","285","299","366"],"fullExpression":"expressionShouldFailWithContaining(\"#{ObjectNotOnFaker.methodName}\", \"Unable to resolve #{ObjectNotOnFaker.methodName} directive\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"mock(java.lang.Class<T>)","methodName":"mock","lineNumber":["101","111","120","129","141","155","156","175","190","191","380"],"fullExpression":"mock(DummyService.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["249"],"fullExpression":"fakerContext.getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["106"],"fullExpression":"assertThat(value).matches(\"[A-Z]{2}\\\\d{2}\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["60","85","176"],"fullExpression":"randomService.nextInt(anyInt())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Superhero","methodSignature":"name()","methodName":"name","lineNumber":["158","166"],"fullExpression":"doReturn(\"Luke Cage\").when(person).name()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"spy(T)","methodName":"spy","lineNumber":["64"],"fullExpression":"Mockito.spy(new FakeValuesService())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"fetchObject(java.lang.String, net.datafaker.service.FakerContext)","methodName":"fetchObject","lineNumber":["80"],"fullExpression":"fakeValuesService.fetchObject(\"property.dummy\", mockedFaker.getContext())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.jupiter.params.provider.Arguments","methodSignature":"of(java.lang.Object...)","methodName":"of","lineNumber":["271","272","273"],"fullExpression":"Arguments.of(new FakerContext(new Locale(\"en\"), new RandomService()), new FakerContext(new Locale(\"uk\"), new RandomService()), false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"setRandomService(net.datafaker.service.RandomService)","methodName":"setRandomService","lineNumber":["255"],"fullExpression":"fakerContext.setRandomService(new RandomService())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"fail(java.lang.String, java.lang.Throwable)","methodName":"fail","lineNumber":["341","352"],"fullExpression":"fail(\"Fail \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["75","249"],"fullExpression":"assertThat(fakeValuesService.fetch(\"property.dummy\", mockedFaker.getContext())).isEqualTo(\"x\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["80"],"fullExpression":"assertThat((Iterable<?>) fakeValuesService.fetchObject(\"property.dummy\", mockedFaker.getContext())).isEqualTo(List.of(\"x\", \"y\", \"z\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"setLocale(java.util.Locale)","methodName":"setLocale","lineNumber":["248"],"fullExpression":"fakerContext.setLocale(new Locale(\"uk\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesServiceTest.DummyService","methodSignature":"hello()","methodName":"hello","lineNumber":["142","149","177","184","194","205","381"],"fullExpression":"doReturn(\"Yo!\").when(dummy).hello()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.time.LocalDateTime)","methodName":"assertThat","lineNumber":["309","318"],"fullExpression":"assertThat(date)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"doReturn(java.lang.Object)","methodName":"doReturn","lineNumber":["85","142","157","158","176","177","192","194","195"],"fullExpression":"doReturn(0)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractObjectAssert","methodSignature":"usingRecursiveComparison()","methodName":"usingRecursiveComparison","lineNumber":["256","263","265"],"fullExpression":"assertThat(fakerContext.getRandomService()).usingRecursiveComparison()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"when(T)","methodName":"when","lineNumber":["60","62","381"],"fullExpression":"when(randomService.nextInt(anyInt()))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"fetch(java.lang.String, net.datafaker.service.FakerContext)","methodName":"fetch","lineNumber":["75"],"fullExpression":"fakeValuesService.fetch(\"property.dummy\", mockedFaker.getContext())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"map(org.assertj.core.api.iterable.ThrowingExtractor<? super ELEMENT, V, EXCEPTION>)","methodName":"map","lineNumber":["212","219","226","233"],"fullExpression":"assertThat(chain).map(SingletonLocale::getLocale)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.ListAssert","methodSignature":"isEqualTo(java.lang.Object)","methodName":"isEqualTo","lineNumber":["242"],"fullExpression":"assertThat(chain).isEqualTo(processedChain)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["370"],"fullExpression":"assertThatThrownBy(() -> fakeValuesService.expression(expression, faker, context)).isInstanceOf(RuntimeException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(T)","methodName":"assertThat","lineNumber":["75","249","256","263","265"],"fullExpression":"assertThat(fakeValuesService.fetch(\"property.dummy\", mockedFaker.getContext()))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodSignature":"thenReturn(T)","methodName":"thenReturn","lineNumber":["60","62","381"],"fullExpression":"when(randomService.nextInt(anyInt())).thenReturn(0)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Superhero","methodSignature":"descriptor()","methodName":"descriptor","lineNumber":["195","204"],"fullExpression":"doReturn(\"up up and away\").when(person).descriptor()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Iterable<? extends ELEMENT>)","methodName":"assertThat","lineNumber":["80"],"fullExpression":"assertThat((Iterable<?>) fakeValuesService.fetchObject(\"property.dummy\", mockedFaker.getContext()))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.RecursiveComparisonAssert","methodSignature":"isNotEqualTo(java.lang.Object)","methodName":"isNotEqualTo","lineNumber":["265"],"fullExpression":"assertThat(fc1).usingRecursiveComparison().isNotEqualTo(fc2)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"getContext()","methodName":"getContext","lineNumber":["62","70","75","80","86","91","96","113","122","131","145","161","180","198","384"],"fullExpression":"mockedFaker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isEmpty()","methodName":"isEmpty","lineNumber":["96"],"fullExpression":"assertThat(fakeValuesService.safeFetch(\"property.dummy2\", mockedFaker.getContext(), \"\")).isEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isIn(java.lang.Object...)","methodName":"isIn","lineNumber":["114","123","132"],"fullExpression":"assertThat(value).isIn(\"55\", \"44\", \"45\", \"54\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21"],"fullExpression":"resolve(\"brooklyn_nine_nine.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/formats/SqlTest.java":[{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"contains(java.lang.CharSequence...)","methodName":"contains","lineNumber":["310","328","350","362"],"fullExpression":"assertThat(transformer.generate(schema, limit)).contains(\"insert into \")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer.SqlTransformerBuilder","methodSignature":"batch()","methodName":"batch","lineNumber":["61","105","143","163","290","344","356"],"fullExpression":"SqlTransformer.<Integer>builder().batch()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"bool()","methodName":"bool","lineNumber":["122","140","161"],"fullExpression":"faker.bool()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"generate(net.datafaker.transformations.Schema<IN, ?>, int)","methodName":"generate","lineNumber":["126","146","168","183","205","226","247","268","295","310","328","348","360","380","396","407"],"fullExpression":"transformer.generate(schema, 2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["50","79","132","153","174","183","205","226","247","268","407"],"fullExpression":"assertThat(sql).isEqualTo(expected)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer.SqlTransformerBuilder","methodSignature":"sqlQuoteIdentifier(java.lang.String)","methodName":"sqlQuoteIdentifier","lineNumber":["181"],"fullExpression":"SqlTransformer.<String>builder().sqlQuoteIdentifier(\"`\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Field","methodSignature":"compositeField(java.lang.String, net.datafaker.transformations.Field<MyObject, MyType>[])","methodName":"compositeField","lineNumber":["436","438","439","441","443"],"fullExpression":"compositeField(\"row\", new Field[] { field(\"name\", () -> \"2\") })","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer.SqlTransformerBuilder","methodSignature":"dialect(net.datafaker.transformations.sql.SqlDialect)","methodName":"dialect","lineNumber":["203","224","245","266","290","306","324","344","356","376","392","405"],"fullExpression":"SqlTransformer.<String>builder().schemaName(tableSchemaName).dialect(SqlDialect.ORACLE)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer.SqlTransformerBuilder","methodSignature":"tableName(java.lang.String)","methodName":"tableName","lineNumber":["163","181"],"fullExpression":"SqlTransformer.builder().tableName(\"MY_TABLE\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Bool","methodSignature":"bool()","methodName":"bool","lineNumber":["122","140","161"],"fullExpression":"faker.bool().bool()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"number()","methodName":"number","lineNumber":["38","65","91","109"],"fullExpression":"faker.number()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"lastName()","methodName":"lastName","lineNumber":["288","304","322","342","374","390"],"fullExpression":"faker.name().lastName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["112"],"fullExpression":"assertThatThrownBy(() -> transformer.generate(fakeSequence, schema)).isInstanceOf(IllegalArgumentException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"name()","methodName":"name","lineNumber":["121","139","160","287","288","303","304","321","322","341","342","373","374","389","390"],"fullExpression":"faker.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["112"],"fullExpression":"assertThatThrownBy(() -> transformer.generate(fakeSequence, schema))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"stream()","methodName":"stream","lineNumber":["90","108"],"fullExpression":"faker.<Integer>stream()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractObjectArrayAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["296","349","361","381","382","397","398"],"fullExpression":"assertThat(output.split(LINE_SEPARATOR)).hasSize(limit + 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"builder()","methodName":"builder","lineNumber":["36","61","87","105","125","143","163","181","203","224","245","266","290","306","324","344","356","376","392","405"],"fullExpression":"SqlTransformer.<Integer>builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer.SqlTransformerBuilder","methodSignature":"forceUseSqlQuoteIdentifier()","methodName":"forceUseSqlQuoteIdentifier","lineNumber":["163"],"fullExpression":"SqlTransformer.builder().tableName(\"MY_TABLE\").forceUseSqlQuoteIdentifier()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer.SqlTransformerBuilder","methodSignature":"keywordCase(net.datafaker.transformations.sql.SqlTransformer.Case)","methodName":"keywordCase","lineNumber":["306","324","356"],"fullExpression":"SqlTransformer.<String>builder().keywordCase(SqlTransformer.Case.LOWERCASE)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Schema","methodSignature":"of(net.datafaker.transformations.Field<IN, OUT>...)","methodName":"of","lineNumber":["85","188","210","231","252","273","412"],"fullExpression":"Schema.of()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["50","79","94","132","153","174","183","205","226","247","268","310","328","350","362","407"],"fullExpression":"assertThat(sql)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(T[])","methodName":"assertThat","lineNumber":["296","349","361","381","382","397","398"],"fullExpression":"assertThat(output.split(LINE_SEPARATOR))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"randomDigit()","methodName":"randomDigit","lineNumber":["38","65","91","109"],"fullExpression":"faker.number().randomDigit()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"internet()","methodName":"internet","lineNumber":["33","58","102"],"fullExpression":"faker.internet()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer","methodSignature":"generate(java.lang.Iterable<IN>, net.datafaker.transformations.Schema<IN, ?>)","methodName":"generate","lineNumber":["42","69","94","112"],"fullExpression":"transformer.generate(fakeSequence, schema)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"len(int)","methodName":"len","lineNumber":["37","64"],"fullExpression":"faker.<Integer>collection().suppliers(() -> faker.number().randomDigit()).len(5)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer.SqlTransformerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["36","61","87","105","125","143","163","181","203","224","245","266","290","306","324","344","356","376","392","405"],"fullExpression":"SqlTransformer.<Integer>builder().build()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer.SqlTransformerBuilder","methodSignature":"batch(int)","methodName":"batch","lineNumber":["376","392"],"fullExpression":"SqlTransformer.<String>builder().batch(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"firstName()","methodName":"firstName","lineNumber":["121","139","160","287","303","321","341","373","389"],"fullExpression":"faker.name().firstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.sql.SqlTransformer.SqlTransformerBuilder","methodSignature":"schemaName(java.lang.String)","methodName":"schemaName","lineNumber":["181","203","224","245","266","405"],"fullExpression":"SqlTransformer.<String>builder().sqlQuoteIdentifier(\"`\").schemaName(tableSchemaName)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"suppliers(java.util.function.Supplier<T>...)","methodName":"suppliers","lineNumber":["37","64","90","108"],"fullExpression":"faker.<Integer>collection().suppliers(() -> faker.number().randomDigit())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"collection()","methodName":"collection","lineNumber":["37","64"],"fullExpression":"faker.<Integer>collection()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isEmpty()","methodName":"isEmpty","lineNumber":["94"],"fullExpression":"assertThat(transformer.generate(fakeSequence, schema)).isEmpty()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/foods/CoffeeTest.java":[{"declaringType":"net.datafaker.providers.food.Coffee","methodSignature":"region(net.datafaker.providers.food.Coffee.Country)","methodName":"region","lineNumber":["34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51"],"fullExpression":"coffee.region(Coffee.Country.BRAZIL)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/HololiveTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["23"],"fullExpression":"assertThat(JA_FAKER.hololive().talent())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Hololive","methodSignature":"talent()","methodName":"talent","lineNumber":["23"],"fullExpression":"JA_FAKER.hololive().talent()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"hololive()","methodName":"hololive","lineNumber":["23"],"fullExpression":"JA_FAKER.hololive()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["23"],"fullExpression":"assertThat(JA_FAKER.hololive().talent()).matches(\"^AZKi|[\\\\u3040-\\\\u30FF\\\\u4E00-\\\\u9FAF]+$\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Pokemon.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27"],"fullExpression":"resolve(\"games.pokemon.names\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/idnumbers/PtNifIdNumberTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["24","30","35"],"fullExpression":"assertThat(idNumber.getInvalid(ptFaker))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.IdNumber","methodSignature":"valid()","methodName":"valid","lineNumber":["35"],"fullExpression":"ptFaker.idNumber().valid()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"idNumber()","methodName":"idNumber","lineNumber":["35"],"fullExpression":"ptFaker.idNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["24","30","35"],"fullExpression":"assertThat(idNumber.getInvalid(ptFaker)).matches(\"[0-9]{9,10}\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Emoji.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19"],"fullExpression":"resolve(\"emoji.smileys\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/CommerceTest.java":[{"declaringType":"net.datafaker.providers.base.Commerce","methodSignature":"promotionCode()","methodName":"promotionCode","lineNumber":["50"],"fullExpression":"commerce.promotionCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["23","28","40","45","50","55"],"fullExpression":"assertThat(commerce.department())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Commerce","methodSignature":"department()","methodName":"department","lineNumber":["23"],"fullExpression":"commerce.department()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Commerce","methodSignature":"promotionCode(int)","methodName":"promotionCode","lineNumber":["55"],"fullExpression":"commerce.promotionCode(3)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Commerce","methodSignature":"price(double, double)","methodName":"price","lineNumber":["45"],"fullExpression":"commerce.price(100, 1000)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Commerce","methodSignature":"productName()","methodName":"productName","lineNumber":["28"],"fullExpression":"commerce.productName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["23","28","40","45","50","55"],"fullExpression":"assertThat(commerce.department()).matches(\"(\\\\w+(, | & )?){1,3}\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Commerce","methodSignature":"price()","methodName":"price","lineNumber":["40"],"fullExpression":"commerce.price()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/NatoPhoneticAlphabet.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15"],"fullExpression":"resolve(\"nato_phonetic_alphabet.code_word\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Relationship.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["50"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["50"],"fullExpression":"faker.random().nextInt(methods.length)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","22","26","30","34","38"],"fullExpression":"resolve(\"relationship.familial.direct\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/DragonBall.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15"],"fullExpression":"resolve(\"dragon_ball.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/annotations/FakeAnnotationTest.java":[{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"populate(java.lang.Class<T>, net.datafaker.transformations.Schema<java.lang.Object, ?>)","methodName":"populate","lineNumber":["57","94"],"fullExpression":"Faker.populate(SimplePerson.class, customSchema())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["60","86"],"fullExpression":"assertThat(person.name)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["60"],"fullExpression":"assertThat(person.name).isEqualTo(\"Aztar Ivy\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.Collection<? extends E>)","methodName":"assertThat","lineNumber":["98"],"fullExpression":"assertThat(new HashSet<>(list))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNotNull()","methodName":"isNotNull","lineNumber":["59","85","86"],"fullExpression":"assertThat(person).isNotNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"color()","methodName":"color","lineNumber":["124"],"fullExpression":"faker.color()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Color","methodSignature":"name()","methodName":"name","lineNumber":["124"],"fullExpression":"faker.color().name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"address()","methodName":"address","lineNumber":["123"],"fullExpression":"faker.address()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"populate(java.lang.Class<T>)","methodName":"populate","lineNumber":["83"],"fullExpression":"Faker.populate(DefaultPerson.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"len(int)","methodName":"len","lineNumber":["93"],"fullExpression":"new FakeCollection.Builder<DefaultPerson>().suppliers(() -> Faker.populate(DefaultPerson.class, schema)).len(expectedSize)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.annotations.FakeAnnotationTest","methodSignature":"customSchema()","methodName":"customSchema","lineNumber":["41","49","57","65","92"],"fullExpression":"customSchema()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Superhero","methodSignature":"name()","methodName":"name","lineNumber":["116","122"],"fullExpression":"faker.superhero().name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"fullAddress()","methodName":"fullAddress","lineNumber":["123"],"fullExpression":"faker.address().fullAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"name()","methodName":"name","lineNumber":["111"],"fullExpression":"faker.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(T)","methodName":"assertThat","lineNumber":["59","85"],"fullExpression":"assertThat(person)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.annotations.FakeAnnotationTest","methodSignature":"complexSchema()","methodName":"complexSchema","lineNumber":["73"],"fullExpression":"complexSchema()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"suppliers(java.util.function.Supplier<T>...)","methodName":"suppliers","lineNumber":["93"],"fullExpression":"new FakeCollection.Builder<DefaultPerson>().suppliers(() -> Faker.populate(DefaultPerson.class, schema))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"superhero()","methodName":"superhero","lineNumber":["116","122"],"fullExpression":"faker.superhero()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"fullName()","methodName":"fullName","lineNumber":["111"],"fullExpression":"faker.name().fullName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["98"],"fullExpression":"assertThat(new HashSet<>(list)).hasSize(expectedSize)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/transformations/Transformer.java":[{"declaringType":"net.datafaker.transformations.Transformer","methodSignature":"apply(IN, net.datafaker.transformations.Schema<IN, ?>)","methodName":"apply","lineNumber":["10"],"fullExpression":"apply(input, schema)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/AbstractProvider.java":[{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"resolve(java.lang.String, java.lang.Object, net.datafaker.providers.base.ProviderRegistration, java.util.function.Supplier<java.lang.String>, net.datafaker.service.FakerContext)","methodName":"resolve","lineNumber":["22"],"fullExpression":"faker.fakeValuesService().resolve(key, this, faker, message, faker.getContext())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"resolve(java.lang.String, net.datafaker.providers.base.AbstractProvider<?>, net.datafaker.service.FakerContext)","methodName":"resolve","lineNumber":["18"],"fullExpression":"faker.fakeValuesService().resolve(key, this, faker.getContext())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getContext()","methodName":"getContext","lineNumber":["18","22"],"fullExpression":"faker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"fakeValuesService()","methodName":"fakeValuesService","lineNumber":["18","22"],"fullExpression":"faker.fakeValuesService()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/formats/Xml.java":[{"declaringType":"net.datafaker.formats.Xml","methodSignature":"generate(boolean)","methodName":"generate","lineNumber":["19"],"fullExpression":"generate(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.formats.Xml","methodSignature":"escape(java.lang.String)","methodName":"escape","lineNumber":["33","39"],"fullExpression":"escape(entry.getValue())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.formats.Xml","methodSignature":"generate(net.datafaker.formats.Xml.XmlNode, java.lang.StringBuilder, boolean)","methodName":"generate","lineNumber":["23","48"],"fullExpression":"generate(xmlNode, new StringBuilder(), pretty)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.formats.Xml","methodSignature":"createEscapeMap()","methodName":"createEscapeMap","lineNumber":["9"],"fullExpression":"createEscapeMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.formats.Xml","methodSignature":"offset(int)","methodName":"offset","lineNumber":["29","52"],"fullExpression":"offset(tagIndex)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Lorem.java":[{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"character(boolean)","methodName":"character","lineNumber":["19"],"fullExpression":"character(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"characters(int, boolean)","methodName":"characters","lineNumber":["23","27","31","35","47"],"fullExpression":"characters(includeUppercase ? 2 : 1, includeUppercase)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.internal.helper.WordUtils","methodSignature":"capitalize(java.lang.String)","methodName":"capitalize","lineNumber":["118"],"fullExpression":"WordUtils.capitalize(word())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["81","85"],"fullExpression":"resolve(\"lorem.words\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"sentence(int)","methodName":"sentence","lineNumber":["94","184","187"],"fullExpression":"sentence(3)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"words(int)","methodName":"words","lineNumber":["77"],"fullExpression":"words(3)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"sentence(int, int)","methodName":"sentence","lineNumber":["103"],"fullExpression":"sentence(wordCount, 6)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["35","114","138"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"characters(int, int, boolean, boolean)","methodName":"characters","lineNumber":["39"],"fullExpression":"characters(minimumLength, maximumLength, includeUppercase, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["114","138"],"fullExpression":"faker.random().nextInt(randomWordsToAdd)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"internet()","methodName":"internet","lineNumber":["51","56","65"],"fullExpression":"faker.internet()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["35"],"fullExpression":"faker.random().nextInt(minimumLength, maximumLength)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"sentences(int)","methodName":"sentences","lineNumber":["138"],"fullExpression":"sentences(sentenceCount + faker.random().nextInt(3))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"sentence()","methodName":"sentence","lineNumber":["129","167"],"fullExpression":"sentence()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"characters(int, boolean, boolean, boolean)","methodName":"characters","lineNumber":["60"],"fullExpression":"characters(fixedNumberOfCharacters, includeUppercase, false, includeDigit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"characters(int, int, boolean, boolean, boolean)","methodName":"characters","lineNumber":["43"],"fullExpression":"characters(minimumLength, maximumLength, includeUppercase, false, includeDigit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"word()","methodName":"word","lineNumber":["71","118","121"],"fullExpression":"word()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"password(int, int, boolean)","methodName":"password","lineNumber":["51"],"fullExpression":"faker.internet().password(fixedNumberOfCharacters, fixedNumberOfCharacters, includeUppercase)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"password(int, int, boolean, boolean, boolean)","methodName":"password","lineNumber":["56","65"],"fullExpression":"faker.internet().password(minimumLength, maximumLength, includeUppercase, includeSpecial, includeDigit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"paragraph(int)","methodName":"paragraph","lineNumber":["142"],"fullExpression":"paragraph(3)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"paragraph()","methodName":"paragraph","lineNumber":["148"],"fullExpression":"paragraph()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/ClashOfClans.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"clash_of_clans.troops\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/Overwatch.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"games.overwatch.heroes\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/DcComics.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29"],"fullExpression":"resolve(\"dc_comics.hero\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/ElderScrolls.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29","33","37","41","45"],"fullExpression":"resolve(\"games.elder_scrolls.race\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/StrangerThings.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21"],"fullExpression":"resolve(\"stranger_things.character\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/PhoneNumber.java":[{"declaringType":"net.datafaker.providers.base.PhoneNumber","methodSignature":"phoneNumberNational()","methodName":"phoneNumberNational","lineNumber":["22"],"fullExpression":"phoneNumberNational()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.PhoneNumber","methodSignature":"subscriberNumber(int)","methodName":"subscriberNumber","lineNumber":["42"],"fullExpression":"subscriberNumber(4)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","26","30"],"fullExpression":"resolve(\"cell_phone.formats\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.PhoneNumber","methodSignature":"subscriberNumber()","methodName":"subscriberNumber","lineNumber":["34"],"fullExpression":"subscriberNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["13","26","30","38"],"fullExpression":"faker.numerify(resolve(\"cell_phone.formats\"))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["20","29"],"fullExpression":"resolve(\"big_bang_theory.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Aws.java":[{"declaringType":"net.datafaker.providers.base.App","methodSignature":"name()","methodName":"name","lineNumber":["74"],"fullExpression":"faker.app().name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Aws","methodSignature":"randHex(int)","methodName":"randHex","lineNumber":["62","66","70","82"],"fullExpression":"randHex(17)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["19"],"fullExpression":"resolve(\"aws.regions\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"uuid()","methodName":"uuid","lineNumber":["32"],"fullExpression":"faker.internet().uuid()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Aws","methodSignature":"region()","methodName":"region","lineNumber":["28","37","48"],"fullExpression":"region()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"text()","methodName":"text","lineNumber":["58"],"fullExpression":"faker.text()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["78"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"internet()","methodName":"internet","lineNumber":["32"],"fullExpression":"faker.internet()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"app()","methodName":"app","lineNumber":["74"],"fullExpression":"faker.app()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Aws","methodSignature":"appName()","methodName":"appName","lineNumber":["41","52"],"fullExpression":"appName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Aws","methodSignature":"randHex()","methodName":"randHex","lineNumber":["43","54"],"fullExpression":"randHex()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["23"],"fullExpression":"faker.numerify(\"0#########\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Aws","methodSignature":"accountId()","methodName":"accountId","lineNumber":["30","39","50"],"fullExpression":"accountId()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Text","methodSignature":"text(net.datafaker.providers.base.Text.TextRuleConfig)","methodName":"text","lineNumber":["58"],"fullExpression":"faker.text().text(configForRoute53ZoneId)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"hex(int, boolean)","methodName":"hex","lineNumber":["78"],"fullExpression":"faker.random().hex(length, false)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Community.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19"],"fullExpression":"resolve(\"community.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/ProviderRegistration.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getFaker()","methodName":"getFaker","lineNumber":["21"],"fullExpression":"getFaker()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getProvider(java.lang.Class<AP>, java.util.function.Function<PR, AP>)","methodName":"getProvider","lineNumber":["156"],"fullExpression":"getProvider(Options.class, Options::new)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"getProvider(java.lang.Class<AP>, java.util.function.Function<PR, AP>, PR)","methodName":"getProvider","lineNumber":["21"],"fullExpression":"BaseFaker.getProvider(clazz, valueSupplier, getFaker())","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Cat.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21"],"fullExpression":"resolve(\"creature.cat.name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/SuperMario.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"games.super_mario.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23"],"fullExpression":"resolve(\"studio_ghibli.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Number.java":[{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"pow(long, int)","methodName":"pow","lineNumber":["87","100","103"],"fullExpression":"pow(10, numberOfDigits - 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"randomNumber(int, boolean)","methodName":"randomNumber","lineNumber":["112"],"fullExpression":"randomNumber(numberOfDigits, false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"randomDouble(int, long, long)","methodName":"randomDouble","lineNumber":["116"],"fullExpression":"randomDouble(maxNumberOfDecimals, min, (long) max)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextDouble()","methodName":"nextDouble","lineNumber":["145"],"fullExpression":"faker.random().nextDouble()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"numberBetween(long, long)","methodName":"numberBetween","lineNumber":["59"],"fullExpression":"numberBetween(realMin, (long) realMax)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["21","28","57","74","85","90","93","111","145","152"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"digits(int)","methodName":"digits","lineNumber":["160"],"fullExpression":"digits(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["57","85"],"fullExpression":"faker.random().nextInt(amplitude)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"numberBetween(int, int)","methodName":"numberBetween","lineNumber":["35","42"],"fullExpression":"numberBetween(1, Integer.MAX_VALUE)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextLong(long)","methodName":"nextLong","lineNumber":["74","90","93"],"fullExpression":"faker.random().nextLong(amplitude)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["21","28","111"],"fullExpression":"faker.random().nextInt(0, 9)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"decimalBetween(long, long)","methodName":"decimalBetween","lineNumber":["76","127"],"fullExpression":"decimalBetween(realMin, realMax)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextRandomBytes(int)","methodName":"nextRandomBytes","lineNumber":["152"],"fullExpression":"faker.random().nextRandomBytes(count)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/AnimalTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["20","25","30"],"fullExpression":"assertThat(animal.scientificName())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Animal","methodSignature":"scientificName()","methodName":"scientificName","lineNumber":["20"],"fullExpression":"animal.scientificName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Animal","methodSignature":"genus()","methodName":"genus","lineNumber":["25"],"fullExpression":"animal.genus()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Animal","methodSignature":"species()","methodName":"species","lineNumber":["30"],"fullExpression":"animal.species()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["20","25","30"],"fullExpression":"assertThat(animal.scientificName()).matches(\"[A-Z][a-z]+ [a-z]+\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Business.java":[{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"numberBetween(int, int)","methodName":"numberBetween","lineNumber":["23"],"fullExpression":"faker.number().numberBetween(1, 20)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.DateAndTime","methodSignature":"future(int, java.util.concurrent.TimeUnit, java.lang.String)","methodName":"future","lineNumber":["23"],"fullExpression":"faker.date().future(365 * faker.number().numberBetween(1, 20), TimeUnit.DAYS, \"YYYY-MM-dd\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"number()","methodName":"number","lineNumber":["23"],"fullExpression":"faker.number()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","27"],"fullExpression":"resolve(\"business.credit_card_numbers_format\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["15","27"],"fullExpression":"faker.numerify(resolve(\"business.credit_card_numbers_format\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"date()","methodName":"date","lineNumber":["23"],"fullExpression":"faker.date()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Lebowski.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23"],"fullExpression":"resolve(\"lebowski.actors\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"games.sonic_the_hedgehog.zone\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Mbti.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["16"],"fullExpression":"this.faker.resolve(\"mbti.choice\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["20","24","28","32","36","40"],"fullExpression":"resolve(\"mbti.\".concat(choice.get()).concat(\".type\"))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/CustomFakerTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["71","77","83","89"],"fullExpression":"assertThat(myFaker.insect().nextInsectName())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.CustomFakerTest.Insect","methodSignature":"nextInsectName()","methodName":"nextInsectName","lineNumber":["71"],"fullExpression":"myFaker.insect().nextInsectName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"addPath(java.util.Locale, java.nio.file.Path)","methodName":"addPath","lineNumber":["43","44"],"fullExpression":"faker.addPath(Locale.ENGLISH, Paths.get(\"src/test/ants.yml\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"addPath(java.util.Locale, java.nio.file.Path)","methodName":"addPath","lineNumber":["58","64"],"fullExpression":"new BaseFaker().addPath(Locale.ENGLISH, null)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.CustomFakerTest.InsectFromFile","methodSignature":"ant()","methodName":"ant","lineNumber":["83"],"fullExpression":"myFaker.insectFromFile().ant()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["48","52"],"fullExpression":"resolve(KEY + \".ants\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.CustomFakerTest.MyCustomFaker","methodSignature":"insect()","methodName":"insect","lineNumber":["71"],"fullExpression":"myFaker.insect()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["71","77","83"],"fullExpression":"assertThat(myFaker.insect().nextInsectName()).matches(\"[A-Za-z ]+\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"endsWith(java.lang.CharSequence)","methodName":"endsWith","lineNumber":["89"],"fullExpression":"assertThat(myFaker.insectFromFile().bee()).endsWith(\"bee\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["34"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["34"],"fullExpression":"faker.random().nextInt(INSECT_NAMES.length)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.CustomFakerTest.MyCustomFaker","methodSignature":"insectFromFile()","methodName":"insectFromFile","lineNumber":["83","89"],"fullExpression":"myFaker.insectFromFile()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"getProvider(java.lang.Class<AP>, java.util.function.Function<PR, AP>, PR)","methodName":"getProvider","lineNumber":["18","22","95","101"],"fullExpression":"getProvider(Insect.class, Insect::new, this)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"expression(java.lang.String)","methodName":"expression","lineNumber":["77"],"fullExpression":"myFaker.expression(\"#{Insect.nextInsectName}\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.CustomFakerTest.InsectFromFile","methodSignature":"bee()","methodName":"bee","lineNumber":["89"],"fullExpression":"myFaker.insectFromFile().bee()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["58","64"],"fullExpression":"assertThatThrownBy(() -> new BaseFaker().addPath(Locale.ENGLISH, null)).isInstanceOf(IllegalArgumentException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["58","64"],"fullExpression":"assertThatThrownBy(() -> new BaseFaker().addPath(Locale.ENGLISH, null))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Shakespeare.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["82"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["82"],"fullExpression":"faker.random().nextInt(values.length)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Shakespeare","methodSignature":"randomElement(java.lang.String[])","methodName":"randomElement","lineNumber":["66","70","74","78"],"fullExpression":"randomElement(hamletQuotes)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29","33","37","41","45","49"],"fullExpression":"resolve(\"red_dead_redemption2.protagonists\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/food/Tea.java":[{"declaringType":"net.datafaker.providers.food.Tea","methodSignature":"type()","methodName":"type","lineNumber":["20"],"fullExpression":"type()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["20","29"],"fullExpression":"resolve(\"tea.variety.\" + type().toLowerCase())","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/OptionsTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.math.BigDecimal)","methodName":"assertThat","lineNumber":["44"],"fullExpression":"assertThat(opt.option(bigDecimalOptions))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Double)","methodName":"assertThat","lineNumber":["38"],"fullExpression":"assertThat(opt.option(doubleOptions))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(E...)","methodName":"option","lineNumber":["30","32","34","36","38","40","42","44","46"],"fullExpression":"opt.option(1, 3, 4, 5)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Long)","methodName":"assertThat","lineNumber":["32"],"fullExpression":"assertThat(opt.option(longOptions))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.Collection<? extends E>)","methodName":"assertThat","lineNumber":["52","56","60","64","69","73","83","85","91","95"],"fullExpression":"assertThat(opt.subset(1, integerOptions))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"doesNotContainAnyElementsOf(java.lang.Iterable<? extends ELEMENT>)","methodName":"doesNotContainAnyElementsOf","lineNumber":["52","56","60","64","69","73"],"fullExpression":"assertThat(opt.subset(1, integerOptions)).doesNotContainAnyElementsOf(List.of(2, 6))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"subset(int, java.lang.String...)","methodName":"subset","lineNumber":["69","73","85","95","96"],"fullExpression":"opt.subset(strOptions.length + 1, strOptions)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"isEmpty()","methodName":"isEmpty","lineNumber":["91","95"],"fullExpression":"assertThat(opt.subset(0, array)).isEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.Class<E>)","methodName":"option","lineNumber":["101"],"fullExpression":"opt.option(Day.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isIn(java.lang.Iterable<?>)","methodName":"isIn","lineNumber":["117"],"fullExpression":"assertThat(opt.nextElement(list)).isIn(list)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.OptionsTest.Day","methodSignature":"values()","methodName":"values","lineNumber":["101"],"fullExpression":"Day.values()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"subset(int, E...)","methodName":"subset","lineNumber":["52","56","60","64","83","91","92"],"fullExpression":"opt.subset(1, integerOptions)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["92","96"],"fullExpression":"assertThatThrownBy(() -> opt.subset(-1, array)).isInstanceOf(IllegalArgumentException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["92","96"],"fullExpression":"assertThatThrownBy(() -> opt.subset(-1, array))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(T)","methodName":"assertThat","lineNumber":["101"],"fullExpression":"assertThat(opt.option(Day.class))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Byte)","methodName":"assertThat","lineNumber":["36"],"fullExpression":"assertThat(opt.option(byteOptions))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.String...)","methodName":"option","lineNumber":["19","24"],"fullExpression":"opt.option(options)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Integer)","methodName":"assertThat","lineNumber":["30","109","117"],"fullExpression":"assertThat(opt.option(1, 3, 4, 5))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["19","24"],"fullExpression":"assertThat(opt.option(options))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Short)","methodName":"assertThat","lineNumber":["34"],"fullExpression":"assertThat(opt.option(shortOptions))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"nextElement(java.util.List<E>)","methodName":"nextElement","lineNumber":["117"],"fullExpression":"opt.nextElement(list)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"nextElement(E[])","methodName":"nextElement","lineNumber":["109"],"fullExpression":"opt.nextElement(array)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Boolean)","methodName":"assertThat","lineNumber":["46"],"fullExpression":"assertThat(opt.option(booleanOptions))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Float)","methodName":"assertThat","lineNumber":["40"],"fullExpression":"assertThat(opt.option(floatOptions))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.math.BigInteger)","methodName":"assertThat","lineNumber":["42"],"fullExpression":"assertThat(opt.option(bigIntegerOptions))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isIn(java.lang.Object...)","methodName":"isIn","lineNumber":["19","24","30","32","34","36","38","40","42","44","46","101","109"],"fullExpression":"assertThat(opt.option(options)).isIn((Object[]) options)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["83","85"],"fullExpression":"assertThat(opt.subset(5, array)).hasSize(2)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Hobbit.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27"],"fullExpression":"resolve(\"hobbit.character\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/SlackEmoji.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29","33","37","41","45"],"fullExpression":"resolve(\"slack_emoji.people\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/AquaTeenHungerForce.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15"],"fullExpression":"resolve(\"aqua_teen_hunger_force.character\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/service/RandomServiceTest.java":[{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextLong()","methodName":"nextLong","lineNumber":["66"],"fullExpression":"randomService.nextLong()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractFloatAssert","methodSignature":"isEqualTo(float)","methodName":"isEqualTo","lineNumber":["76"],"fullExpression":"assertThat(f1).isEqualTo(0.41291267F)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isFalse()","methodName":"isFalse","lineNumber":["82"],"fullExpression":"assertThat(b).isFalse()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(double)","methodName":"assertThat","lineNumber":["91"],"fullExpression":"assertThat(randomService.nextDouble(-5, 5))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt()","methodName":"nextInt","lineNumber":["60"],"fullExpression":"randomService.nextInt()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextLong(long, long)","methodName":"nextLong","lineNumber":["68","101"],"fullExpression":"randomService.nextLong(100, 1000)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["25"],"fullExpression":"assertThatThrownBy(() -> randomService.nextLong(0L)).isInstanceOf(IllegalArgumentException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["25"],"fullExpression":"assertThatThrownBy(() -> randomService.nextLong(0L))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isStrictlyBetween(java.lang.Long, java.lang.Long)","methodName":"isStrictlyBetween","lineNumber":["42"],"fullExpression":"assertThat(randomService.nextLong(Long.MAX_VALUE)).isStrictlyBetween(0L, Long.MAX_VALUE)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.Integer)","methodName":"assertThat","lineNumber":["51"],"fullExpression":"assertThat(randomService.nextInt(-5, 5))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["108","114"],"fullExpression":"assertThat(randomService.hex(8))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isEqualTo(long)","methodName":"isEqualTo","lineNumber":["78","80"],"fullExpression":"assertThat(l1).isEqualTo(1092083446069765248L)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isLessThan(long)","methodName":"isLessThan","lineNumber":["35"],"fullExpression":"assertThat(randomService.nextLong(2)).isLessThan(2L)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextFloat()","methodName":"nextFloat","lineNumber":["64"],"fullExpression":"randomService.nextFloat()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["82"],"fullExpression":"assertThat(b)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(float)","methodName":"assertThat","lineNumber":["76"],"fullExpression":"assertThat(f1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"hex()","methodName":"hex","lineNumber":["114"],"fullExpression":"randomService.hex()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isZero()","methodName":"isZero","lineNumber":["32"],"fullExpression":"assertThat(randomService.nextLong(1)).isZero()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isEqualTo(int)","methodName":"isEqualTo","lineNumber":["72","73","74"],"fullExpression":"assertThat(i1).isEqualTo(-1157793070)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractLongAssert","methodSignature":"isOne()","methodName":"isOne","lineNumber":["79"],"fullExpression":"assertThat(l2).isOne()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["108","114"],"fullExpression":"assertThat(randomService.hex(8)).matches(\"^[0-9A-F]{8}$\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["61"],"fullExpression":"randomService.nextInt(100)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextDouble(double, double)","methodName":"nextDouble","lineNumber":["91"],"fullExpression":"randomService.nextDouble(-5, 5)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextLong(long)","methodName":"nextLong","lineNumber":["25","32","35","42","67"],"fullExpression":"randomService.nextLong(0L)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["51","62"],"fullExpression":"randomService.nextInt(-5, 5)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"hex(int)","methodName":"hex","lineNumber":["108"],"fullExpression":"randomService.hex(8)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextBoolean()","methodName":"nextBoolean","lineNumber":["70"],"fullExpression":"randomService.nextBoolean()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(long)","methodName":"assertThat","lineNumber":["32","35","42","78","79","80","101"],"fullExpression":"assertThat(randomService.nextLong(1))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.jupiter.params.provider.Arguments","methodSignature":"of(java.lang.Object...)","methodName":"of","lineNumber":["119"],"fullExpression":"Arguments.of(new RandomService(), new RandomService(new Random()))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["72","73","74"],"fullExpression":"assertThat(i1)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/TireTest.java":[{"declaringType":"net.datafaker.providers.base.Tire","methodSignature":"code(boolean)","methodName":"code","lineNumber":["17","18"],"fullExpression":"tire.code(true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["17","18","24"],"fullExpression":"assertThat(tire.code(true))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Tire","methodSignature":"code(java.lang.String)","methodName":"code","lineNumber":["24"],"fullExpression":"tire.code(prefix)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["17","18","24"],"fullExpression":"assertThat(tire.code(true)).matches(\"P\" + CODE_PATTERN)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Ancient.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25"],"fullExpression":"resolve(\"ancient.god\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27"],"fullExpression":"resolve(\"how_i_met_your_mother.character\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/InternetTest.java":[{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"safeEmailAddress()","methodName":"safeEmailAddress","lineNumber":["393"],"fullExpression":"f.internet().safeEmailAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"is(org.assertj.core.api.Condition<? super ACTUAL>)","methodName":"is","lineNumber":["287"],"fullExpression":"assertThat(addr).is(anyOf(new Condition<>(s -> s.matches(tenDot), \"tenDot\"), new Condition<>(s -> s.matches(oneTwoSeven), \"oneTwoSeven\"), new Condition<>(s -> s.matches(oneSixNine), \"oneSixNine\"), new Condition<>(s -> s.matches(oneNineTwo), \"oneNineTwo\"), new Condition<>(s -> s.matches(oneSevenTwo), \"oneSevenTwo\")))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"fail(java.lang.String, java.lang.Throwable)","methodName":"fail","lineNumber":["259","295","317","330"],"fullExpression":"fail(\"Failed with \", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["391","392","393","394"],"fullExpression":"assertThat(f.internet().domainName()).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.List<? extends ELEMENT>)","methodName":"assertThat","lineNumber":["71","86"],"fullExpression":"assertThat(emails.stream().filter(t -> t.endsWith(\"@\" + safeDomain)).collect(Collectors.toList()))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["371","372","373"],"fullExpression":"assertThat(faker1Uuidv3First).isEqualTo(faker2Uuidv3First)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"webdomain()","methodName":"webdomain","lineNumber":["394"],"fullExpression":"f.internet().webdomain()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"doReturn(java.lang.Object)","methodName":"doReturn","lineNumber":["43","44"],"fullExpression":"doReturn(\"Compound Name\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["51","58","66","81"],"fullExpression":"assertThat(EmailValidator.getInstance().isValid(emailAddress)).isTrue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["71","86"],"fullExpression":"assertThat(emails.stream().filter(t -> t.endsWith(\"@\" + safeDomain)).collect(Collectors.toList())).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isPositive()","methodName":"isPositive","lineNumber":["197","198"],"fullExpression":"assertThat(min.size()).isPositive()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"doesNotMatch(java.lang.CharSequence)","methodName":"doesNotMatch","lineNumber":["311"],"fullExpression":"assertThat(addr).doesNotMatch(tenDot)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"domainName()","methodName":"domainName","lineNumber":["391"],"fullExpression":"f.internet().domainName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"name()","methodName":"name","lineNumber":["44"],"fullExpression":"doReturn(name).when(mockedFaker).name()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"startsWith(java.lang.CharSequence)","methodName":"startsWith","lineNumber":["57","80","93","99"],"fullExpression":"assertThat(emailAddress).startsWith(\"john@\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"anyOf(org.assertj.core.api.Condition<? super T>...)","methodName":"anyOf","lineNumber":["287"],"fullExpression":"anyOf(new Condition<>(s -> s.matches(tenDot), \"tenDot\"), new Condition<>(s -> s.matches(oneTwoSeven), \"oneTwoSeven\"), new Condition<>(s -> s.matches(oneSixNine), \"oneSixNine\"), new Condition<>(s -> s.matches(oneNineTwo), \"oneNineTwo\"), new Condition<>(s -> s.matches(oneSevenTwo), \"oneSevenTwo\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.stubbing.Stubber","methodSignature":"when(T)","methodName":"when","lineNumber":["43","44"],"fullExpression":"doReturn(\"Compound Name\").when(name)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["45","57","80","93","99","118","139","155","287","311","371","372","373","391","392","393","394"],"fullExpression":"assertThat(mockedFaker.internet().username())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"uuidv3()","methodName":"uuidv3","lineNumber":["364","365","366","367","368","369"],"fullExpression":"faker1.internet().uuidv3()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isBetween(java.lang.Integer, java.lang.Integer)","methodName":"isBetween","lineNumber":["254","255","256","257"],"fullExpression":"assertThat(parseInt(octets[0])).isBetween(0, 255)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.jupiter.api.Assertions","methodSignature":"assertDoesNotThrow(org.junit.jupiter.api.function.Executable)","methodName":"assertDoesNotThrow","lineNumber":["112"],"fullExpression":"assertDoesNotThrow(() -> new URL(url))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"username()","methodName":"username","lineNumber":["45"],"fullExpression":"mockedFaker.internet().username()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["51","58","66","81"],"fullExpression":"assertThat(EmailValidator.getInstance().isValid(emailAddress))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet.BotUserAgent","methodSignature":"values()","methodName":"values","lineNumber":["410"],"fullExpression":"Internet.BotUserAgent.values()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["155"],"fullExpression":"assertThat(password).hasSize(32)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["45","118","139"],"fullExpression":"assertThat(mockedFaker.internet().username()).matches(\"^(\\\\w+)\\\\.(\\\\w+)$\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"emailAddress()","methodName":"emailAddress","lineNumber":["392"],"fullExpression":"f.internet().emailAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.InternetTest","methodSignature":"getCharacterCondition(char, int)","methodName":"getCharacterCondition","lineNumber":["229","249","267","268","324","338","339"],"fullExpression":"getCharacterCondition(':', 5)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"internet()","methodName":"internet","lineNumber":["45","154","364","365","366","367","368","369","391","392","393","394"],"fullExpression":"mockedFaker.internet()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.validator.routines.EmailValidator","methodSignature":"isValid(java.lang.String)","methodName":"isValid","lineNumber":["51","58","66","81"],"fullExpression":"EmailValidator.getInstance().isValid(emailAddress)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.validator.routines.EmailValidator","methodSignature":"getInstance()","methodName":"getInstance","lineNumber":["51","58","66","81"],"fullExpression":"EmailValidator.getInstance()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"firstName()","methodName":"firstName","lineNumber":["43"],"fullExpression":"doReturn(\"Compound Name\").when(name).firstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"spy(T)","methodName":"spy","lineNumber":["42"],"fullExpression":"Mockito.spy(new Name(mockedFaker))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet.UserAgent","methodSignature":"values()","methodName":"values","lineNumber":["399"],"fullExpression":"Internet.UserAgent.values()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"password(int, int, boolean, boolean, boolean)","methodName":"password","lineNumber":["154"],"fullExpression":"new BaseFaker().internet().password(32, 32, true, true, true)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["197","198","254","255","256","257"],"fullExpression":"assertThat(min.size())","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27"],"fullExpression":"resolve(\"the_it_crowd.actors\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/formats/JsonTest.java":[{"declaringType":"net.datafaker.transformations.JsonTransformer","methodSignature":"generate(net.datafaker.transformations.Schema<IN, ?>, int)","methodName":"generate","lineNumber":["41","152","161","171"],"fullExpression":"transformer.generate(schema, 2)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"bool()","methodName":"bool","lineNumber":["37"],"fullExpression":"faker.bool()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["47","74","101","126","152","161","171","258","287"],"fullExpression":"assertThat(json).isEqualTo(expected)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Field","methodSignature":"compositeField(java.lang.String, net.datafaker.transformations.Field<MyObject, MyType>[])","methodName":"compositeField","lineNumber":["179","204","245","250","272","277"],"fullExpression":"compositeField(\"key\", new Field[] { field(\"key\", () -> \"value\") })","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Bool","methodSignature":"bool()","methodName":"bool","lineNumber":["37"],"fullExpression":"faker.bool().bool()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer.JsonTransformerBuilder","methodSignature":"formattedAs(net.datafaker.transformations.JsonTransformer.JsonTransformerBuilder.FormattedAs)","methodName":"formattedAs","lineNumber":["112","137","159"],"fullExpression":"JsonTransformer.<Integer>builder().formattedAs(FormattedAs.JSON_ARRAY)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"number()","methodName":"number","lineNumber":["60","87","115","140"],"fullExpression":"faker.number()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"name()","methodName":"name","lineNumber":["36","218"],"fullExpression":"faker.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer.JsonTransformerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["40","58","85","112","137","151","159","169","212","239","264"],"fullExpression":"JsonTransformer.builder().build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["143"],"fullExpression":"assertThatThrownBy(() -> transformer.generate(fakeSequence, schema)).isInstanceOf(IllegalArgumentException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["143"],"fullExpression":"assertThatThrownBy(() -> transformer.generate(fakeSequence, schema))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"stream()","methodName":"stream","lineNumber":["114","139"],"fullExpression":"faker.<Integer>stream()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Schema","methodSignature":"of(net.datafaker.transformations.Field<IN, OUT>...)","methodName":"of","lineNumber":["177"],"fullExpression":"Schema.of()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.PhoneNumber","methodSignature":"phoneNumber()","methodName":"phoneNumber","lineNumber":["222"],"fullExpression":"faker.phoneNumber().phoneNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer","methodSignature":"builder()","methodName":"builder","lineNumber":["40","58","85","112","137","151","159","169","212","239","264"],"fullExpression":"JsonTransformer.builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["47","74","101","126","152","161","171","258","287"],"fullExpression":"assertThat(json)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer.JsonTransformerBuilder","methodSignature":"withCommaBetweenObjects(boolean)","methodName":"withCommaBetweenObjects","lineNumber":["58","112","169"],"fullExpression":"JsonTransformer.<Integer>builder().withCommaBetweenObjects(false)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"maxLen(int)","methodName":"maxLen","lineNumber":["215","220"],"fullExpression":"faker.collection().minLen(limit).maxLen(limit)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isEqualTo(int)","methodName":"isEqualTo","lineNumber":["234"],"fullExpression":"assertThat(numberOfLines).isEqualTo(limit - 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer","methodSignature":"generate(java.lang.Iterable<IN>, net.datafaker.transformations.Schema<IN, ?>)","methodName":"generate","lineNumber":["64","91","119","143"],"fullExpression":"transformer.generate(fakeSequence, schema)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"randomDigit()","methodName":"randomDigit","lineNumber":["60","87","115","140"],"fullExpression":"faker.number().randomDigit()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"internet()","methodName":"internet","lineNumber":["55","82","109","134"],"fullExpression":"faker.internet()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"phoneNumber()","methodName":"phoneNumber","lineNumber":["222"],"fullExpression":"faker.phoneNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"len(int)","methodName":"len","lineNumber":["59","86","114"],"fullExpression":"faker.<Integer>collection().suppliers(() -> faker.number().randomDigit()).len(5)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"firstName()","methodName":"firstName","lineNumber":["36","218"],"fullExpression":"faker.name().firstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"build()","methodName":"build","lineNumber":["215"],"fullExpression":"faker.collection().minLen(limit).maxLen(limit).suppliers(faker::name).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"suppliers(java.util.function.Supplier<T>...)","methodName":"suppliers","lineNumber":["59","86","114","139","215","220"],"fullExpression":"faker.<Integer>collection().suppliers(() -> faker.number().randomDigit())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"collection()","methodName":"collection","lineNumber":["59","86","215","220"],"fullExpression":"faker.<Integer>collection()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"minLen(int)","methodName":"minLen","lineNumber":["215"],"fullExpression":"faker.collection().minLen(limit)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["234"],"fullExpression":"assertThat(numberOfLines)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/integration/MostSpecificLocaleTest.java":[{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocaleChain()","methodName":"getLocaleChain","lineNumber":["33","36"],"fullExpression":"en.getLocaleChain()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.List<? extends ELEMENT>)","methodName":"assertThat","lineNumber":["39","40","42"],"fullExpression":"assertThat(enDefaultCountries)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"fetchObject(java.lang.String, net.datafaker.service.FakerContext)","methodName":"fetchObject","lineNumber":["34","37"],"fullExpression":"fakeValuesService.fetchObject(\"address.default_country\", en)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractListAssert","methodSignature":"as(java.lang.String, java.lang.Object...)","methodName":"as","lineNumber":["42"],"fullExpression":"assertThat(enDefaultCountries).as(\"the default country for en is not en_US\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["39","40"],"fullExpression":"assertThat(enDefaultCountries).hasSize(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"updateFakeValuesInterfaceMap(java.util.List<net.datafaker.internal.helper.SingletonLocale>)","methodName":"updateFakeValuesInterfaceMap","lineNumber":["33","36"],"fullExpression":"fakeValuesService.updateFakeValuesInterfaceMap(en.getLocaleChain())","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/EldenRing.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29","33"],"fullExpression":"resolve(\"elden_ring.location\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/File.java":[{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"slug()","methodName":"slug","lineNumber":["26"],"fullExpression":"faker.internet().slug()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"internet()","methodName":"internet","lineNumber":["26"],"fullExpression":"faker.internet()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"lorem()","methodName":"lorem","lineNumber":["27"],"fullExpression":"faker.lorem()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.File","methodSignature":"fileName(java.lang.String, java.lang.String, java.lang.String, java.lang.String)","methodName":"fileName","lineNumber":["21"],"fullExpression":"fileName(null, null, null, null)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17"],"fullExpression":"resolve(\"file.extension\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Lorem","methodSignature":"word()","methodName":"word","lineNumber":["27"],"fullExpression":"faker.lorem().word()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getContext()","methodName":"getContext","lineNumber":["27"],"fullExpression":"faker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["27"],"fullExpression":"faker.getContext().getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.File","methodSignature":"extension()","methodName":"extension","lineNumber":["28"],"fullExpression":"extension()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"fresh_prince_of_bel_air.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/MedicalTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["31","41","50","57"],"fullExpression":"assertThat(actual)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Medical","methodSignature":"diagnosisCode()","methodName":"diagnosisCode","lineNumber":["30","40","49"],"fullExpression":"faker.medical().diagnosisCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"medical()","methodName":"medical","lineNumber":["30","40","49"],"fullExpression":"faker.medical()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["31","41","50","57"],"fullExpression":"assertThat(actual).matches(\"[A-TV-Z][0-9][0-9AB](\\\\.[0-9A-TV-Z]{0,4})?\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/StarWars.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"options()","methodName":"options","lineNumber":["29","53"],"fullExpression":"getFaker().options()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["21","25","29","33","37","41","45","49","53"],"fullExpression":"resolve(\"star_wars.characters\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"getFaker()","methodName":"getFaker","lineNumber":["29","53"],"fullExpression":"getFaker()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["25"],"fullExpression":"faker.numerify(resolve(\"star_wars.call_sign\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Options","methodSignature":"option(java.lang.String...)","methodName":"option","lineNumber":["29","53"],"fullExpression":"getFaker().options().option(CHARACTERS)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/idnumbers/ZhCNIdNumberTest.java":[{"declaringType":"net.datafaker.providers.base.IdNumber","methodSignature":"valid()","methodName":"valid","lineNumber":["16","24"],"fullExpression":"faker.idNumber().valid()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"idNumber()","methodName":"idNumber","lineNumber":["16","24"],"fullExpression":"faker.idNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["48","74"],"fullExpression":"assertThat(isSatisfied)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["48","74"],"fullExpression":"assertThat(isSatisfied).isTrue()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/UniqueTest.java":[{"declaringType":"org.mockito.Mockito","methodSignature":"verify(T)","methodName":"verify","lineNumber":["46","47","48","49","50"],"fullExpression":"verify(randomService)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.stubbing.Stubber","methodSignature":"when(T)","methodName":"when","lineNumber":["30"],"fullExpression":"doCallRealMethod().when(randomService)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"doCallRealMethod()","methodName":"doCallRealMethod","lineNumber":["30"],"fullExpression":"doCallRealMethod()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["58","70","71","73","74","110","116","122"],"fullExpression":"assertThat(faker.unique().fetchFromYaml(key))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.ArgumentMatchers","methodSignature":"anyInt()","methodName":"anyInt","lineNumber":["30","30"],"fullExpression":"anyInt()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.Collection<? extends E>)","methodName":"assertThat","lineNumber":["42"],"fullExpression":"assertThat(results)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["58","70","71","73","74","110","116","122"],"fullExpression":"assertThat(faker.unique().fetchFromYaml(key)).isEqualTo(\"theOnlyValue\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.List<? extends ELEMENT>)","methodName":"assertThat","lineNumber":["105"],"fullExpression":"assertThat(defaultValues)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Unique","methodSignature":"fetchFromYaml(java.lang.String)","methodName":"fetchFromYaml","lineNumber":["36","37","38","39","40","58","59","70","71","73","74","79","85","91","100","110","116","122"],"fullExpression":"faker.unique().fetchFromYaml(key)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["103"],"fullExpression":"faker.unique().resolve(key)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"unique()","methodName":"unique","lineNumber":["36","37","38","39","40","58","59","70","71","73","74","79","85","91","100","103","110","116","122"],"fullExpression":"faker.unique()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractThrowableAssert","methodSignature":"hasMessage(java.lang.String)","methodName":"hasMessage","lineNumber":["59","79","85","91"],"fullExpression":"assertThatThrownBy(() -> faker.unique().fetchFromYaml(key)).hasMessage(\"All possible values have been generated for key unique.single-value under locale test\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"contains(ELEMENT...)","methodName":"contains","lineNumber":["105"],"fullExpression":"assertThat(defaultValues).contains(result)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"verifyNoMoreInteractions(java.lang.Object...)","methodName":"verifyNoMoreInteractions","lineNumber":["51"],"fullExpression":"verifyNoMoreInteractions(randomService)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["30","46","47","48","49","50"],"fullExpression":"doCallRealMethod().when(randomService).nextInt(anyInt(), anyInt())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"spy(T)","methodName":"spy","lineNumber":["29"],"fullExpression":"Mockito.spy(new RandomService(new Random()))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["59","79","85","91"],"fullExpression":"assertThatThrownBy(() -> faker.unique().fetchFromYaml(key))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"getContext()","methodName":"getContext","lineNumber":["72"],"fullExpression":"faker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"setCurrentLocale(java.util.Locale)","methodName":"setCurrentLocale","lineNumber":["72"],"fullExpression":"faker.getContext().setCurrentLocale(new Locale(\"test_otherlocale\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["42"],"fullExpression":"assertThat(results).hasSize(5)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/formats/YamlTest.java":[{"declaringType":"net.datafaker.transformations.Schema","methodSignature":"of(net.datafaker.transformations.Field<IN, OUT>...)","methodName":"of","lineNumber":["37"],"fullExpression":"Schema.of()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["32"],"fullExpression":"assertThat(yamlTransformer.generate(schema, 1))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Schema","methodSignature":"getFields()","methodName":"getFields","lineNumber":["94"],"fullExpression":"schema.getFields()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["32"],"fullExpression":"assertThat(yamlTransformer.generate(schema, 1)).isEqualTo(expected)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.YamlTransformer","methodSignature":"generate(net.datafaker.transformations.Schema<IN, ?>, int)","methodName":"generate","lineNumber":["32"],"fullExpression":"yamlTransformer.generate(schema, 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"suppliers(java.util.function.Supplier<T>...)","methodName":"suppliers","lineNumber":["84","107"],"fullExpression":"faker.<Name>collection().suppliers(faker::name)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"collection()","methodName":"collection","lineNumber":["84","107"],"fullExpression":"faker.<Name>collection()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isEqualTo(int)","methodName":"isEqualTo","lineNumber":["94","117"],"fullExpression":"assertThat(numberOfLines).isEqualTo((limit * (schema.getFields().length + 1)) - 1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["94","117"],"fullExpression":"assertThat(numberOfLines)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getProvider(java.lang.Class<AP>, java.util.function.Function<PR, AP>)","methodName":"getProvider","lineNumber":["7","11","15","19","23","27","31","35","39","43","47","51","55","59","63","67","71","75","79","83","87","91","95","99","103","107","111","115","119","123"],"fullExpression":"getProvider(Battlefield1.class, Battlefield1::new)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/sequence/FakeCollection.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["60"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeCollection","methodSignature":"get()","methodName":"get","lineNumber":["29"],"fullExpression":"get()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["19"],"fullExpression":"randomService.nextInt(minLength, maxLength)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence","methodSignature":"singleton()","methodName":"singleton","lineNumber":["22"],"fullExpression":"singleton()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"maxLen(int)","methodName":"maxLen","lineNumber":["48"],"fullExpression":"maxLen(FAKE_COLLECTION_DEFAULT_SIZE)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Photography.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","25","32","39","46","53","60","67","74"],"fullExpression":"resolve(\"photography.term\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Compass.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["50","53","67","70","84","87"],"fullExpression":"resolve(\"compass.direction\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/ComputerTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["16"],"fullExpression":"assertThat(computer.operatingSystem())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Computer","methodSignature":"operatingSystem()","methodName":"operatingSystem","lineNumber":["16"],"fullExpression":"computer.operatingSystem()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["16"],"fullExpression":"assertThat(computer.operatingSystem()).isNotEmpty()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Kaamelott.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19"],"fullExpression":"resolve(\"kaamelott.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/Issue759.java":[{"declaringType":"net.datafaker.Issue759","methodSignature":"getIterations(net.datafaker.Issue759.WorkerThread[])","methodName":"getIterations","lineNumber":["82","85"],"fullExpression":"getIterations(threads)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"address()","methodName":"address","lineNumber":["33","34","36"],"fullExpression":"faker.address()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"zipCodeByState(java.lang.String)","methodName":"zipCodeByState","lineNumber":["34"],"fullExpression":"faker.address().zipCodeByState(state)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.Issue759.WorkerThread","methodSignature":"getIterations()","methodName":"getIterations","lineNumber":["45"],"fullExpression":"threads[i].getIterations()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.Issue759","methodSignature":"printIterations(int[])","methodName":"printIterations","lineNumber":["92"],"fullExpression":"printIterations(iters)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"stateAbbr()","methodName":"stateAbbr","lineNumber":["33"],"fullExpression":"faker.address().stateAbbr()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.Issue759","methodSignature":"allElementsEqual(int[], int)","methodName":"allElementsEqual","lineNumber":["89"],"fullExpression":"allElementsEqual(iters, iterationsPerThread)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.Issue759","methodSignature":"fakeSomeData(net.datafaker.Faker)","methodName":"fakeSomeData","lineNumber":["27"],"fullExpression":"fakeSomeData(_faker)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"countyByZipCode(java.lang.String)","methodName":"countyByZipCode","lineNumber":["36"],"fullExpression":"faker.address().countyByZipCode(zipCode)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/transformations/CompositeField.java":[{"declaringType":"net.datafaker.transformations.Schema","methodSignature":"hashCode()","methodName":"hashCode","lineNumber":["36"],"fullExpression":"super.hashCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Schema","methodSignature":"equals(java.lang.Object)","methodName":"equals","lineNumber":["29"],"fullExpression":"super.equals(o)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Measurement.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","27","36","45","54","63","72","81"],"fullExpression":"resolve(\"measurement.height\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29"],"fullExpression":"resolve(\"the_venture_bros.character\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Weather.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["67"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Weather","methodSignature":"temperature(int, int, java.lang.String)","methodName":"temperature","lineNumber":["32","41","52","63"],"fullExpression":"temperature(DEFAULT_MIN_TEMP_C, DEFAULT_MAX_TEMP_C, \"weather.temperature.celsius\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["67"],"fullExpression":"faker.random().nextInt(minTemperature, maxTemperature)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["23","67"],"fullExpression":"resolve(\"weather.description\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/service/FakeValuesGrouping.java":[{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"getPath()","methodName":"getPath","lineNumber":["24"],"fullExpression":"((FakeValues) fakeValue).getPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.files.EnFile","methodSignature":"getFile()","methodName":"getFile","lineNumber":["18"],"fullExpression":"file.getFile()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesGrouping","methodSignature":"add(net.datafaker.service.FakeValuesInterface)","methodName":"add","lineNumber":["18"],"fullExpression":"ENGLISH_FAKE_VALUE_GROUPING.add(FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, file.getFile(), file.getPath())))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesInterface","methodSignature":"get(java.lang.String)","methodName":"get","lineNumber":["39","41"],"fullExpression":"fakeValues.get(key)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.files.EnFile","methodSignature":"getPath()","methodName":"getPath","lineNumber":["18"],"fullExpression":"file.getPath()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.files.EnFile","methodSignature":"getFiles()","methodName":"getFiles","lineNumber":["17"],"fullExpression":"EnFile.getFiles()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValues","methodSignature":"of(net.datafaker.service.FakeValuesContext)","methodName":"of","lineNumber":["18"],"fullExpression":"FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, file.getFile(), file.getPath()))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesContext","methodSignature":"of(java.util.Locale, java.lang.String, java.lang.String)","methodName":"of","lineNumber":["18"],"fullExpression":"FakeValuesContext.of(Locale.ENGLISH, file.getFile(), file.getPath())","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Doraemon.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23"],"fullExpression":"resolve(\"doraemon.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/RockBand.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13"],"fullExpression":"resolve(\"rock_band.name\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Demographic.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["13","17","21","25","29"],"fullExpression":"resolve(\"demographic.race\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Nation.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["48","53"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["48","53"],"fullExpression":"faker.random().nextInt(isoLangs.length)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakeValuesService","methodSignature":"fetch(java.lang.String, net.datafaker.service.FakerContext)","methodName":"fetch","lineNumber":["35"],"fullExpression":"faker.fakeValuesService().fetch(\"nation.flag\", faker.getContext())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["22","26","30"],"fullExpression":"resolve(\"nation.nationality\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getContext()","methodName":"getContext","lineNumber":["35"],"fullExpression":"faker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"fakeValuesService()","methodName":"fakeValuesService","lineNumber":["35"],"fullExpression":"faker.fakeValuesService()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/VForVendetta.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"v_for_vendetta.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/idnumbers/EnZAIdNumberTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["41","42"],"fullExpression":"assertThat(f.idNumber().valid())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.IdNumber","methodSignature":"valid()","methodName":"valid","lineNumber":["34","41"],"fullExpression":"idNumber.valid()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.IdNumber","methodSignature":"invalid()","methodName":"invalid","lineNumber":["35","42"],"fullExpression":"idNumber.invalid()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"idNumber()","methodName":"idNumber","lineNumber":["33","41","42"],"fullExpression":"f.idNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["21","22","23","25","26","34","35"],"fullExpression":"assertThat(idNumber.isValidEnZASsn(\"9202204720085\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isFalse()","methodName":"isFalse","lineNumber":["21","22","23","35"],"fullExpression":"assertThat(idNumber.isValidEnZASsn(\"9202204720085\")).isFalse()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["25","26","34"],"fullExpression":"assertThat(idNumber.isValidEnZASsn(\"9202204720083\")).isTrue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["41","42"],"fullExpression":"assertThat(f.idNumber().valid()).matches(\"\\\\d{10}[01]8\\\\d\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Azure.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["22","23","24","25","26","149"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Azure","methodSignature":"subscriptionId()","methodName":"subscriptionId","lineNumber":["30"],"fullExpression":"subscriptionId()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Azure","methodSignature":"randHex()","methodName":"randHex","lineNumber":["33","37","41","45","49","53","57","61","65","69","73","77","81","85","89","93","97","101","105","109","113","117","121","125","129","133","137","141","145"],"fullExpression":"randHex()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18"],"fullExpression":"resolve(\"azure.regions\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"hex(int, boolean)","methodName":"hex","lineNumber":["22","23","24","25","26","149"],"fullExpression":"faker.random().hex(8, false)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/formats/CsvTest.java":[{"declaringType":"net.datafaker.transformations.Schema","methodSignature":"getFields()","methodName":"getFields","lineNumber":["75"],"fullExpression":"schema.getFields()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"bool()","methodName":"bool","lineNumber":["100"],"fullExpression":"faker.bool()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractStringAssert","methodSignature":"isEqualTo(java.lang.String)","methodName":"isEqualTo","lineNumber":["92","116","143","169"],"fullExpression":"assertThat(csv).isEqualTo(expected)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Bool","methodSignature":"bool()","methodName":"bool","lineNumber":["100"],"fullExpression":"faker.bool().bool()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"address()","methodName":"address","lineNumber":["31"],"fullExpression":"faker.address()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer","methodSignature":"builder()","methodName":"builder","lineNumber":["33","61","84","105","127","154","181","195","217","237","259","283","299","320"],"fullExpression":"CsvTransformer.<String>builder()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"expression(java.lang.String)","methodName":"expression","lineNumber":["58","59"],"fullExpression":"faker.expression(\"#{Name.first_name}\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"number()","methodName":"number","lineNumber":["99","130","157","177","184"],"fullExpression":"faker.number()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"lastName()","methodName":"lastName","lineNumber":["30"],"fullExpression":"faker.name().lastName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"name()","methodName":"name","lineNumber":["29","30","101","178"],"fullExpression":"faker.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isInstanceOf(java.lang.Class<?>)","methodName":"isInstanceOf","lineNumber":["186","282","319"],"fullExpression":"assertThatThrownBy(() -> transformer.generate(fakeSequence, schema)).isInstanceOf(IllegalArgumentException.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThatThrownBy(org.assertj.core.api.ThrowableAssert.ThrowingCallable)","methodName":"assertThatThrownBy","lineNumber":["186","282","319"],"fullExpression":"assertThatThrownBy(() -> transformer.generate(fakeSequence, schema))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"stream()","methodName":"stream","lineNumber":["156","183","278","294"],"fullExpression":"faker.<Integer>stream()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer.CsvTransformerBuilder","methodSignature":"header(boolean)","methodName":"header","lineNumber":["33","61","84","105","127","154","181","195","217","237","259","283","299","320"],"fullExpression":"CsvTransformer.<String>builder().header(true)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer","methodSignature":"generate(java.lang.Iterable<IN>, net.datafaker.transformations.Schema<IN, ?>)","methodName":"generate","lineNumber":["133","161","186"],"fullExpression":"transformer.generate(fakeSequence, schema)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["92","116","143","169"],"fullExpression":"assertThat(csv)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isEqualTo(int)","methodName":"isEqualTo","lineNumber":["46","47","74","75","206","230","248","272","312"],"fullExpression":"assertThat(limit).isEqualTo(numberOfLines)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"streetAddress()","methodName":"streetAddress","lineNumber":["31"],"fullExpression":"faker.address().streetAddress()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"randomDigit()","methodName":"randomDigit","lineNumber":["99","130","157","184"],"fullExpression":"faker.number().randomDigit()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"internet()","methodName":"internet","lineNumber":["124","151"],"fullExpression":"faker.internet()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"len(int)","methodName":"len","lineNumber":["129","156"],"fullExpression":"faker.<Integer>collection().suppliers(() -> faker.number().randomDigit()).len(5)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer.CsvTransformerBuilder","methodSignature":"build()","methodName":"build","lineNumber":["33","61","84","105","127","154","181","195","217","237","259","283","299","320"],"fullExpression":"CsvTransformer.<String>builder().header(true).separator(separator).build()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer.CsvTransformerBuilder","methodSignature":"separator(java.lang.String)","methodName":"separator","lineNumber":["33","61","84","105","127","154","181","195","217","259","283","299","320"],"fullExpression":"CsvTransformer.<String>builder().header(true).separator(separator)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.CsvTransformer","methodSignature":"generate(net.datafaker.transformations.Schema<IN, ?>, int)","methodName":"generate","lineNumber":["35","63","86","107","320"],"fullExpression":"transformer.generate(schema, limit)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"firstName()","methodName":"firstName","lineNumber":["29","101","178"],"fullExpression":"faker.name().firstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence.Builder","methodSignature":"suppliers(java.util.function.Supplier<T>...)","methodName":"suppliers","lineNumber":["129","156","183","196","220","238","262","278","294"],"fullExpression":"faker.<Integer>collection().suppliers(() -> faker.number().randomDigit())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"collection()","methodName":"collection","lineNumber":["129","196","220","238","262"],"fullExpression":"faker.<Integer>collection()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["46","47","74","75","206","230","248","272","312"],"fullExpression":"assertThat(limit)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/FamousLastWords.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18"],"fullExpression":"resolve(\"famous_last_words.last_words\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/sport/Football.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31"],"fullExpression":"resolve(\"football.teams\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/DarkSouls.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","22","26","30"],"fullExpression":"resolve(\"dark_souls.stats\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Bool.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["13"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextBoolean()","methodName":"nextBoolean","lineNumber":["13"],"fullExpression":"faker.random().nextBoolean()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/SouthPark.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21"],"fullExpression":"resolve(\"south_park.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/House.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","27"],"fullExpression":"resolve(\"house.furniture\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/transformations/JsonTransformer.java":[{"declaringType":"net.datafaker.transformations.JsonTransformer","methodSignature":"apply(IN, net.datafaker.transformations.Schema<IN, ?>)","methodName":"apply","lineNumber":["59","98"],"fullExpression":"apply(iterator.next(), schema)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer","methodSignature":"value2String(java.lang.Object, java.lang.StringBuilder)","methodName":"value2String","lineNumber":["35","84"],"fullExpression":"value2String((fields[i].getName()), sb)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Transformer","methodSignature":"apply(IN, net.datafaker.transformations.Schema<IN, ?>, int)","methodName":"apply","lineNumber":["38","70"],"fullExpression":"apply(input, (CompositeField) fields[i], i)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer","methodSignature":"applyValue(IN, java.lang.StringBuilder, java.lang.Object)","methodName":"applyValue","lineNumber":["40","100"],"fullExpression":"applyValue(input, sb, ((SimpleField) fields[i]).transform(input))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Schema","methodSignature":"getFields()","methodName":"getFields","lineNumber":["31"],"fullExpression":"schema.getFields()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer","methodSignature":"createEscapeMap()","methodName":"createEscapeMap","lineNumber":["15"],"fullExpression":"createEscapeMap()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.sequence.FakeSequence","methodSignature":"isInfinite()","methodName":"isInfinite","lineNumber":["52"],"fullExpression":"((FakeSequence) input).isInfinite()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.JsonTransformer","methodSignature":"generate(IN, java.util.Collection<java.lang.Object>)","methodName":"generate","lineNumber":["80","82"],"fullExpression":"generate(input, (Collection) value)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Field","methodSignature":"getName()","methodName":"getName","lineNumber":["35"],"fullExpression":"fields[i].getName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.SimpleField","methodSignature":"transform(MyObject)","methodName":"transform","lineNumber":["40"],"fullExpression":"((SimpleField) fields[i]).transform(input)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/idnumbers/SwedishIdNumberTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["12","13","19","20","21","22","23","24"],"fullExpression":"assertThat(idNumber.isValidSwedishSsn(\"670919-9530\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isFalse()","methodName":"isFalse","lineNumber":["19","20","21","22","23","24"],"fullExpression":"assertThat(idNumber.isValidSwedishSsn(\"8112289873\")).isFalse()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["12","13"],"fullExpression":"assertThat(idNumber.isValidSwedishSsn(\"670919-9530\")).isTrue()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Educator.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["14","16","20","22","26","28","32","34","38"],"fullExpression":"resolve(\"educator.name\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["28"],"fullExpression":"faker.numerify(resolve(\"educator.tertiary.degree.course_number\"))","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Sip.java":[{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"messagingPort()","methodName":"messagingPort","lineNumber":["209"],"fullExpression":"messagingPort()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"bodyString()","methodName":"bodyString","lineNumber":["200"],"fullExpression":"bodyString()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["28","38","126","136","146","156","166","176"],"fullExpression":"resolve(\"sip.methods\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"uuid()","methodName":"uuid","lineNumber":["186"],"fullExpression":"faker.internet().uuid()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["47","56"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["56"],"fullExpression":"faker.random().nextInt(portPool.length)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Sip","methodSignature":"rtpPort()","methodName":"rtpPort","lineNumber":["190"],"fullExpression":"rtpPort()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["66","76","86","96","106","116"],"fullExpression":"faker.resolve(\"sip.response.codes.provisional\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"internet()","methodName":"internet","lineNumber":["186","186","188","209"],"fullExpression":"faker.internet()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["47"],"fullExpression":"faker.random().nextInt(1000, 9999)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"domainName()","methodName":"domainName","lineNumber":["186"],"fullExpression":"faker.internet().domainName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Name","methodSignature":"firstName()","methodName":"firstName","lineNumber":["186","209"],"fullExpression":"faker.name().firstName()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"name()","methodName":"name","lineNumber":["186","209"],"fullExpression":"faker.name()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Internet","methodSignature":"ipV4Address()","methodName":"ipV4Address","lineNumber":["188","209"],"fullExpression":"faker.internet().ipV4Address()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Commerce.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["20","62"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Number","methodSignature":"digits(int)","methodName":"digits","lineNumber":["73"],"fullExpression":"faker.number().digits(digits)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["20"],"fullExpression":"faker.random().nextInt(4)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["23","71"],"fullExpression":"faker.resolve(\"commerce.department\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Commerce","methodSignature":"promotionCode(int)","methodName":"promotionCode","lineNumber":["67"],"fullExpression":"promotionCode(6)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"number()","methodName":"number","lineNumber":["73"],"fullExpression":"faker.number()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Commerce","methodSignature":"price(double, double)","methodName":"price","lineNumber":["58"],"fullExpression":"price(0, 100)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["36","37","38","43","47","51","72"],"fullExpression":"resolve(\"commerce.product_name.adjective\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextDouble()","methodName":"nextDouble","lineNumber":["62"],"fullExpression":"faker.random().nextDouble()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getContext()","methodName":"getContext","lineNumber":["16"],"fullExpression":"faker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["16"],"fullExpression":"faker.getContext().getLocale()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Barcode.java":[{"declaringType":"net.datafaker.providers.base.Barcode","methodSignature":"calculateVar(int, int, int)","methodName":"calculateVar","lineNumber":["71"],"fullExpression":"calculateVar(length, odd, even)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Barcode","methodSignature":"ean(int)","methodName":"ean","lineNumber":["13","17","21","25"],"fullExpression":"ean(13)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"number()","methodName":"number","lineNumber":["48"],"fullExpression":"this.faker.number()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Barcode","methodSignature":"roundToHighestMultiplyOfTen(int)","methodName":"roundToHighestMultiplyOfTen","lineNumber":["73"],"fullExpression":"roundToHighestMultiplyOfTen((var))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Barcode","methodSignature":"ean8()","methodName":"ean8","lineNumber":["33"],"fullExpression":"ean8()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["91"],"fullExpression":"resolve(\"barcode.types\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Barcode","methodSignature":"ean13()","methodName":"ean13","lineNumber":["29"],"fullExpression":"ean13()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/StarTrek.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19","23","27","31"],"fullExpression":"resolve(\"star_trek.character\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["22","26","40","40","65","74","74"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["22","40","40","65","74","74"],"fullExpression":"faker.random().nextInt(9)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["26"],"fullExpression":"faker.random().nextInt(1, 9999)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/AviationTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["18","19","20","21","27","28","29","30","35","40","45"],"fullExpression":"assertThat(aviation.flight(\"ICAO\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Aviation","methodSignature":"flight()","methodName":"flight","lineNumber":["35"],"fullExpression":"aviation.flight()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["40","45"],"fullExpression":"assertThat(aviation.aircraft()).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.util.regex.Pattern)","methodName":"matches","lineNumber":["18","19","20","21","27","28","29","30"],"fullExpression":"assertThat(aviation.flight(\"ICAO\")).matches(regex)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Aviation","methodSignature":"flight(java.lang.String)","methodName":"flight","lineNumber":["18","19","20","21","27","28","29","30"],"fullExpression":"aviation.flight(\"ICAO\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Aviation","methodSignature":"aircraft()","methodName":"aircraft","lineNumber":["40"],"fullExpression":"aviation.aircraft()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["35"],"fullExpression":"assertThat(aviation.flight()).matches(\"[A-Z0-9]{2}\\\\d{1,4}\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Aviation","methodSignature":"gate()","methodName":"gate","lineNumber":["45"],"fullExpression":"aviation.gate()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/AzureTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["12"],"fullExpression":"assertThat(region)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["12"],"fullExpression":"assertThat(region).matches(\"(eastus|eastus2|southcentralus|westus2|westus3|australiaeast|southeastasia|northeurope|swedencentral|uksouth|westeurope|centralus|southafricanorth|centralindia|eastasia|japaneast|koreacentral|canadacentral|francecentral|germanywestcentral|norwayeast|switzerlandnorth|uaenorth|brazilsouth|eastus2euap|qatarcentral|centralusstage|eastusstage|eastus2stage|northcentralusstage|southcentralusstage|westusstage|westus2stage|asia|asiapacific|australia|brazil|canada|europe|france|germany|global|india|japan|korea|norway|singapore|southafrica|switzerland|uae|uk|unitedstates|unitedstateseuap|eastasiastage|southeastasiastage|eastusstg|southcentralusstg|northcentralus|westus|jioindiawest|centraluseuap|westcentralus|southafricawest|australiacentral|australiacentral2|australiasoutheast|japanwest|jioindiacentral|koreasouth|southindia|westindia|canadaeast|francesouth|germanynorth|norwaywest|switzerlandwest|ukwest|uaecentral|brazilsoutheast)\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Money.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["61"],"fullExpression":"faker.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int)","methodName":"nextInt","lineNumber":["61"],"fullExpression":"faker.random().nextInt(availableCurrencies.size())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Money","methodSignature":"getRandomCurrency()","methodName":"getRandomCurrency","lineNumber":["27","37","48","57"],"fullExpression":"getRandomCurrency()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/Battlefield1.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["21","28","35","42","49"],"fullExpression":"resolve(\"battlefield1.classes\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Mountaineering.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15"],"fullExpression":"resolve(\"mountaineering.mountaineer\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25","29","33","37"],"fullExpression":"resolve(\"games.league_of_legends.champion\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/providers/base/FinanceTest.java":[{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"iban(java.lang.String)","methodName":"iban","lineNumber":["56","68","85"],"fullExpression":"finance.iban(\"DE\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.Collection<? extends E>)","methodName":"assertThat","lineNumber":["61"],"fullExpression":"assertThat(Finance.ibanSupportedCountries())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"getContext()","methodName":"getContext","lineNumber":["68"],"fullExpression":"faker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"fr.marcwrobel.jbanking.iban.Iban","methodSignature":"isValid(java.lang.String)","methodName":"isValid","lineNumber":["86"],"fullExpression":"fr.marcwrobel.jbanking.iban.Iban.isValid(ibanFaker)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractBooleanAssert","methodSignature":"isTrue()","methodName":"isTrue","lineNumber":["26","86"],"fullExpression":"assertThat(LuhnCheckDigit.LUHN_CHECK_DIGIT.isValid(creditCardStripped)).isTrue()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.commons.validator.routines.checkdigit.CheckDigit","methodSignature":"isValid(java.lang.String)","methodName":"isValid","lineNumber":["26"],"fullExpression":"LuhnCheckDigit.LUHN_CHECK_DIGIT.isValid(creditCardStripped)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"isNotEmpty()","methodName":"isNotEmpty","lineNumber":["61"],"fullExpression":"assertThat(Finance.ibanSupportedCountries()).isNotEmpty()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"nasdaqTicker()","methodName":"nasdaqTicker","lineNumber":["31"],"fullExpression":"finance.nasdaqTicker()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"iban()","methodName":"iban","lineNumber":["51"],"fullExpression":"finance.iban()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"startsWith(java.lang.CharSequence)","methodName":"startsWith","lineNumber":["92","98"],"fullExpression":"assertThat(creditCard).startsWith(\"4\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"nyseTicker()","methodName":"nyseTicker","lineNumber":["36"],"fullExpression":"finance.nyseTicker()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["31","36","46","51","56","69","92","98","104"],"fullExpression":"assertThat(finance.nasdaqTicker())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIntegerAssert","methodSignature":"isZero()","methodName":"isZero","lineNumber":["112"],"fullExpression":"assertThat(check % 10).isZero()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(boolean)","methodName":"assertThat","lineNumber":["26","86"],"fullExpression":"assertThat(LuhnCheckDigit.LUHN_CHECK_DIGIT.isValid(creditCardStripped))","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"bic()","methodName":"bic","lineNumber":["46"],"fullExpression":"finance.bic()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"creditCard(net.datafaker.providers.base.Finance.CreditCardType)","methodName":"creditCard","lineNumber":["76","91","97"],"fullExpression":"finance.creditCard(type)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"usRoutingNumber()","methodName":"usRoutingNumber","lineNumber":["103"],"fullExpression":"finance.usRoutingNumber()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.FakerContext","methodSignature":"getLocale()","methodName":"getLocale","lineNumber":["68","85"],"fullExpression":"faker.getContext().getLocale()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"creditCard()","methodName":"creditCard","lineNumber":["20"],"fullExpression":"finance.creditCard()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["31","36","46","51","56","104"],"fullExpression":"assertThat(finance.nasdaqTicker()).matches(\"[A-Z.-]+\")","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance.CreditCardType","methodSignature":"values()","methodName":"values","lineNumber":["75"],"fullExpression":"CreditCardType.values()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.FinanceTest","methodSignature":"assertCardLuhnDigit(java.lang.String)","methodName":"assertCardLuhnDigit","lineNumber":["21","77"],"fullExpression":"assertCardLuhnDigit(creditCard)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"finance()","methodName":"finance","lineNumber":["16"],"fullExpression":"faker.finance()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseFaker","methodSignature":"getContext()","methodName":"getContext","lineNumber":["85"],"fullExpression":"faker.getContext()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Finance","methodSignature":"ibanSupportedCountries()","methodName":"ibanSupportedCountries","lineNumber":["61","66"],"fullExpression":"Finance.ibanSupportedCountries()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"isNotBlank()","methodName":"isNotBlank","lineNumber":["69"],"fullExpression":"assertThat(iban).isNotBlank()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(int)","methodName":"assertThat","lineNumber":["112"],"fullExpression":"assertThat(check % 10)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","22","26","30","34","38","42","46","50"],"fullExpression":"resolve(\"dnd.alignments\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/transformations/JavaObjectTransformerTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.Date)","methodName":"assertThat","lineNumber":["37"],"fullExpression":"assertThat(person.birthDate)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["38","39"],"fullExpression":"assertThat(person.lastName)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.transformations.Transformer","methodSignature":"apply(IN, net.datafaker.transformations.Schema<IN, ?>)","methodName":"apply","lineNumber":["36"],"fullExpression":"jTransformer.apply(Person.class, schema)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.util.Collection<? extends E>)","methodName":"assertThat","lineNumber":["42"],"fullExpression":"assertThat(persons)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractAssert","methodSignature":"isNotNull()","methodName":"isNotNull","lineNumber":["37","38","39"],"fullExpression":"assertThat(person.birthDate).isNotNull()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractIterableAssert","methodSignature":"hasSize(int)","methodName":"hasSize","lineNumber":["42"],"fullExpression":"assertThat(persons).hasSize(10)","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/test/java/net/datafaker/integration/Issue194SlashFormatRegexTest.java":[{"declaringType":"org.assertj.core.api.Assertions","methodSignature":"assertThat(java.lang.String)","methodName":"assertThat","lineNumber":["18","27","36"],"fullExpression":"assertThat(postalCode)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Address","methodSignature":"zipCode()","methodName":"zipCode","lineNumber":["16","25","34"],"fullExpression":"new BaseFaker(uk).address().zipCode()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"address()","methodName":"address","lineNumber":["16","25","34"],"fullExpression":"new BaseFaker(uk).address()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.assertj.core.api.AbstractCharSequenceAssert","methodSignature":"matches(java.lang.CharSequence)","methodName":"matches","lineNumber":["18","27","36"],"fullExpression":"assertThat(postalCode).matches(\"[A-PR-UWYZ]([A-HK-Y][0-9][ABEHMNPRVWXY0-9]?|[0-9][ABCDEFGHJKPSTUW0-9]?) [0-9][ABD-HJLNP-UW-Z]{2}\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/base/Camera.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["18","27","36"],"fullExpression":"resolve(\"camera.brand\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/idnumbers/KoKrIdNumber.java":[{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"random()","methodName":"random","lineNumber":["24"],"fullExpression":"f.random()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Gender","methodSignature":"shortBinaryTypes()","methodName":"shortBinaryTypes","lineNumber":["20"],"fullExpression":"f.gender().shortBinaryTypes()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.service.RandomService","methodSignature":"nextInt(int, int)","methodName":"nextInt","lineNumber":["57","58","59"],"fullExpression":"rand.nextInt(yearStart, yearEnd)","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"nation()","methodName":"nation","lineNumber":["19"],"fullExpression":"f.nation()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.BaseProviders","methodSignature":"gender()","methodName":"gender","lineNumber":["20"],"fullExpression":"f.gender()","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.ProviderRegistration","methodSignature":"numerify(java.lang.String)","methodName":"numerify","lineNumber":["38"],"fullExpression":"f.numerify(patternBuilder.toString())","currentLayer":0,"declarationInfo":null},{"declaringType":"net.datafaker.providers.base.Nation","methodSignature":"isoCountry()","methodName":"isoCountry","lineNumber":["19"],"fullExpression":"f.nation().isoCountry()","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/FinalSpace.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["17","21","25"],"fullExpression":"resolve(\"final_space.characters\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Joke.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["16","20"],"fullExpression":"resolve(\"joke.puns\")","currentLayer":0,"declarationInfo":null}],"Application/datafaker-main/src/main/java/net/datafaker/providers/entertainment/Babylon5.java":[{"declaringType":"net.datafaker.providers.base.AbstractProvider","methodSignature":"resolve(java.lang.String)","methodName":"resolve","lineNumber":["15","19"],"fullExpression":"resolve(\"babylon5.characters\")","currentLayer":0,"declarationInfo":null}]}