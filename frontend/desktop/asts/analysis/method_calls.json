{"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/FilterImplTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["28","29","35","36","42","43","49","50"],"fullExpression":"assertEquals(\"Should return path specified\", PATH_TEST, filter.getPath())","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/main/java/spark/embeddedserver/jetty/websocket/WebSocketServletContextHandlerFactory.java":[{"declaringType":"org.eclipse.jetty.websocket.servlet.WebSocketServletFactory","methodSignature":"getPolicy()","methodName":"getPolicy","lineNumber":["52"],"fullExpression":"webSocketUpgradeFilter.getFactory().getPolicy()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter","methodSignature":"getFactory()","methodName":"getFactory","lineNumber":["52"],"fullExpression":"webSocketUpgradeFilter.getFactory()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["35"],"fullExpression":"LoggerFactory.getLogger(WebSocketServletContextHandlerFactory.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["64"],"fullExpression":"logger.error(\"creation of websocket context handler failed.\", ex)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/RouteImplTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","methodName":"assertNotNull","lineNumber":["53"],"fullExpression":"assertNotNull(\"Should return an Object because we configured it to have one\", value)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["24","30","31","37","38","44","45","54"],"fullExpression":"assertEquals(\"Should return path specified\", PATH_TEST, route.getPath())","currentLayer":0,"declarationInfo":null},{"declaringType":"junit.framework.TestCase","methodSignature":"assertNull(java.lang.String, java.lang.Object)","methodName":"assertNull","lineNumber":["61"],"fullExpression":"assertNull(\"Should return null because the element from render is null\", value)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/ResponseTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["70","79"],"fullExpression":"assertEquals(\"Should return body specified\", finalBody, returnBody)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"times(int)","methodName":"times","lineNumber":["265"],"fullExpression":"times(2)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/staticfiles/StaticFilesTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["61"],"fullExpression":"LOGGER.debug(\"tearDown().deleting: \" + tmpExternalFile)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["44"],"fullExpression":"LoggerFactory.getLogger(StaticFilesTest.class)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/utils/ObjectUtilsTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["12"],"fullExpression":"assertTrue(\"Should return false because array is empty\", ObjectUtils.isEmpty(new Object[] {}))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(java.lang.String, boolean)","methodName":"assertFalse","lineNumber":["19"],"fullExpression":"assertFalse(\"Should return false because array is not empty\", ObjectUtils.isEmpty(new Integer[] { 1, 2 }))","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/main/java/spark/resource/ClassPathResourceHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["93"],"fullExpression":"LOG.debug(e.getClass().getSimpleName() + \" when trying to get resource. \" + e.getMessage())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["92"],"fullExpression":"LOG.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["33"],"fullExpression":"LoggerFactory.getLogger(ClassPathResourceHandler.class)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/embeddedserver/jetty/websocket/WebSocketServletContextHandlerFactoryTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","methodName":"assertNotNull","lineNumber":["55","91"],"fullExpression":"assertNotNull(\"Should return a WebSocketUpgradeFilter because we configured it to have one\", webSocketUpgradeFilter)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.NativeWebSocketConfiguration","methodSignature":"getFactory()","methodName":"getFactory","lineNumber":["96"],"fullExpression":"webSocketConfiguration.getFactory()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.WebSocketServerFactory","methodSignature":"getPolicy()","methodName":"getPolicy","lineNumber":["98"],"fullExpression":"webSocketServerFactory.getPolicy()","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/examples/transformer/JsonTransformer.java":[{"declaringType":"com.google.gson.Gson","methodSignature":"toJson(java.lang.Object)","methodName":"toJson","lineNumber":["13"],"fullExpression":"gson.toJson(model)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/BooksIntegrationTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["65","66","77","79","92","93","108","109","123","124","137","138"],"fullExpression":"assertNotNull(response)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["67","80","82","95","96","97","98","111","112","126","127","140","141"],"fullExpression":"assertTrue(Integer.valueOf(response.body) > 0)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["68","81","94","110","125","139"],"fullExpression":"assertEquals(201, response.status)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/main/java/spark/http/matching/MatcherFilter.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String, java.lang.Object...)","methodName":"info","lineNumber":["167"],"fullExpression":"LOG.info(\"The requested route [{}] has not been mapped in Spark for {}: [{}]\", uri, ACCEPT_TYPE_REQUEST_MIME_HEADER, acceptType)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["47"],"fullExpression":"org.slf4j.LoggerFactory.getLogger(MatcherFilter.class)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/MultipleFiltersTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["32","36"],"fullExpression":"Assert.assertEquals(counter, 2)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/main/java/spark/Response.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"debug","lineNumber":["137"],"fullExpression":"LOG.debug(\"Redirecting ({} to {}\", httpStatusCode, location)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["119","136"],"fullExpression":"LOG.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["38"],"fullExpression":"LoggerFactory.getLogger(Response.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Throwable)","methodName":"warn","lineNumber":["125","145"],"fullExpression":"LOG.warn(\"Redirect failure\", ioException)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/embeddedserver/jetty/SocketConnectorFactoryTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["126"],"fullExpression":"assertTrue(\"Should return true because factory for SSL should have been set\", factories.containsKey(\"ssl\") && factories.get(\"ssl\") != null)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, long, long)","methodName":"assertEquals","lineNumber":["58","122"],"fullExpression":"assertEquals(\"Server Connector Port should be set to the specified port\", port, internalPort)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.SslConnectionFactory","methodSignature":"getSslContextFactory()","methodName":"getSslContextFactory","lineNumber":["130"],"fullExpression":"sslConnectionFactory.getSslContextFactory()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["57","59","121"],"fullExpression":"assertEquals(\"Server Connector Host should be set to the specified server\", host, internalHost)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["26","40","69","82","95"],"fullExpression":"assertEquals(\"'server' must not be null\", ex.getMessage())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"fail(java.lang.String)","methodName":"fail","lineNumber":["24","38","67","80","93"],"fullExpression":"fail(\"SocketConnector creation should have thrown an IllegalArgumentException\")","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/embeddedserver/jetty/EmbeddedJettyFactoryTest.java":[{"declaringType":"org.mockito.Mockito","methodSignature":"times(int)","methodName":"times","lineNumber":["41","62","81"],"fullExpression":"times(1)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"verifyNoMoreInteractions(java.lang.Object...)","methodName":"verifyNoMoreInteractions","lineNumber":["42","63","82"],"fullExpression":"verifyNoMoreInteractions(jettyServerFactory)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"verify(T, org.mockito.verification.VerificationMode)","methodName":"verify","lineNumber":["41","62","81"],"fullExpression":"verify(jettyServerFactory, times(1))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"mock(java.lang.Class<T>)","methodName":"mock","lineNumber":["27","28","29","30","49","50","51","52","68","69","70","71","87","88","89"],"fullExpression":"mock(JettyServerFactory.class)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/main/java/spark/Request.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["529"],"fullExpression":"LOG.debug(\"matchedPart: \" + matchedPart + \" = \" + decodedReq)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["48"],"fullExpression":"org.slf4j.LoggerFactory.getLogger(Request.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Throwable)","methodName":"warn","lineNumber":["275"],"fullExpression":"LOG.warn(\"Exception when reading body\", e)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/embeddedserver/jetty/JettyServerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, long, long)","methodName":"assertEquals","lineNumber":["22","23","24","37","38","39"],"fullExpression":"assertEquals(\"Server thread pool default minThreads should be 8\", 8, minThreads)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodSignature":"getThreadPool()","methodName":"getThreadPool","lineNumber":["16","31"],"fullExpression":"server.getThreadPool()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["50"],"fullExpression":"assertEquals(\"max threads (2) less than min threads (8)\", expected.getMessage())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"fail(java.lang.String)","methodName":"fail","lineNumber":["47"],"fullExpression":"fail(\"expected IllegalArgumentException\")","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/main/java/spark/embeddedserver/jetty/EmbeddedJettyServer.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["149","180"],"fullExpression":"logger.info(\">> Listening on Custom Server ports!\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["177"],"fullExpression":"logger.error(\"stop failed\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodSignature":"getThreadPool()","methodName":"getThreadPool","lineNumber":["188","188"],"fullExpression":"server.getThreadPool()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.AbstractConnector","methodSignature":"getServer()","methodName":"getServer","lineNumber":["119"],"fullExpression":"connector.getServer()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodSignature":"getConnectors()","methodName":"getConnectors","lineNumber":["118"],"fullExpression":"server.getConnectors()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodSignature":"join()","methodName":"join","lineNumber":["163"],"fullExpression":"server.join()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["55"],"fullExpression":"LoggerFactory.getLogger(this.getClass())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"info","lineNumber":["151"],"fullExpression":"logger.info(\">> Listening on {}:{}\", host, port)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Object)","methodName":"error","lineNumber":["98"],"fullExpression":"logger.error(\"Could not get first available port (port set to 0), using default: {}\", SPARK_DEFAULT_PORT)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String, java.lang.Object)","methodName":"info","lineNumber":["147","171"],"fullExpression":"logger.info(\"== {} has ignited ...\", NAME)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/main/java/spark/http/matching/GeneralError.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["32"],"fullExpression":"org.slf4j.LoggerFactory.getLogger(GeneralError.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["55"],"fullExpression":"LOG.error(\"\", e)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/GzipTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["58"],"fullExpression":"Assert.assertEquals(\"Content of css file\", decompressed)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/QueryParamsMapTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["42","46","48"],"fullExpression":"assertTrue(queryMap.hasKey(\"user\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(long, long)","methodName":"assertEquals","lineNumber":["118"],"fullExpression":"assertEquals(2, map.size())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNull(java.lang.Object)","methodName":"assertNull","lineNumber":["94"],"fullExpression":"assertNull(ret)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["25","26","39","40","58","59","60","61","62","69","70","79","80","84","85","104","119","120"],"fullExpression":"assertEquals(\"fede\", queryMap.get(\"user\").get(\"info\").get(\"name\").value())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(boolean)","methodName":"assertFalse","lineNumber":["36","37","38","43","44","47","101","102","103"],"fullExpression":"assertFalse(queryMap.getQueryMap().isEmpty())","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/GenericIntegrationTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["155"],"fullExpression":"Assert.assertNotNull(a.body())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["218","410","416","516","524","532"],"fullExpression":"Assert.assertTrue(response.status == 401)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(float, float, float)","methodName":"assertEquals","lineNumber":["507"],"fullExpression":"Assert.assertEquals(3, events.size(), 3)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["51"],"fullExpression":"LoggerFactory.getLogger(GenericIntegrationTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["508","509","510"],"fullExpression":"Assert.assertEquals(\"onConnect\", events.get(0))","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/MultipleServicesTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["115"],"fullExpression":"Assert.assertTrue(isUriOnList)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["104","105","106","107","112","116"],"fullExpression":"Assert.assertEquals(routeMatch.getAcceptType(), \"*/*\")","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/utils/SparkUtilsTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["29","46"],"fullExpression":"assertTrue(\"Should return true because parameter follows convention of a parameter (:paramname)\", SparkUtils.isParam(\":param\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(java.lang.String, boolean)","methodName":"assertFalse","lineNumber":["37","53"],"fullExpression":"assertFalse(\"Should return false because parameter does not follows convention of a parameter (:paramname)\", SparkUtils.isParam(\".param\"))","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/serialization/InputStreamSerializerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["30"],"fullExpression":"Assert.assertTrue(\"Expected stream to be closed\", input.closed)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertArrayEquals(byte[], byte[])","methodName":"assertArrayEquals","lineNumber":["20"],"fullExpression":"Assert.assertArrayEquals(bytes, output.toByteArray())","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/util/SparkTestUtil.java":[{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodSignature":"build()","methodName":"build","lineNumber":["52","86"],"fullExpression":"httpClientBuilder().build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodSignature":"setConnectionManager(org.apache.http.conn.HttpClientConnectionManager)","methodName":"setConnectionManager","lineNumber":["64"],"fullExpression":"HttpClientBuilder.create().setConnectionManager(connManager)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodSignature":"create()","methodName":"create","lineNumber":["64"],"fullExpression":"HttpClientBuilder.create()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodSignature":"setRedirectStrategy(org.apache.http.client.RedirectStrategy)","methodName":"setRedirectStrategy","lineNumber":["86"],"fullExpression":"httpClientBuilder().setRedirectStrategy(redirectStrategy)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/utils/MimeParseTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["19","32"],"fullExpression":"assertEquals(\"bestMatch should return the supported mime type with the highest quality factor\" + \"because it is preferred mime type as indicated in the HTTP header\", \"text/html\", MimeParse.bestMatch(supported, header))","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/util/ResourceUtilsTest.java":[{"declaringType":"org.junit.rules.ExpectedException","methodSignature":"none()","methodName":"none","lineNumber":["20"],"fullExpression":"ExpectedException.none()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["44"],"fullExpression":"assertEquals(\"Should be equals because URL protocol is file\", file, new File(ResourceUtils.toURI(url).getSchemeSpecificPart()))","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/StaticFilesFromArchiveTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["86","89"],"fullExpression":"assertEquals(expectedContentType, \"text/css\")","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/RequestTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["217"],"fullExpression":"assertNotNull(session)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"times(int)","methodName":"times","lineNumber":["184","195","207","218"],"fullExpression":"times(2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, long, long)","methodName":"assertEquals","lineNumber":["344","428"],"fullExpression":"assertEquals(\"The server port of the the underlying servlet request should be returned\", port, request.port())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["73","82","91","102","111","120","126","135","139","143","171","240","272","296","308","320","332","356","368","380","392","404","416","441","490","502"],"fullExpression":"assertEquals(\"Invalid name in query string\", \"Federico\", name)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["237","252"],"fullExpression":"assertTrue(\"The count of cookies returned should be the same as those in the request\", request.cookies().size() == 2)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","methodName":"assertNotNull","lineNumber":["249","269"],"fullExpression":"assertNotNull(\"A Map of Cookies should have been instantiated even if cookies are not present in the request\", request.cookies())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertArrayEquals(java.lang.String, java.lang.Object[], java.lang.Object[])","methodName":"assertArrayEquals","lineNumber":["453","479"],"fullExpression":"assertArrayEquals(\"An array of Strings for a parameter with multiple values should be returned\", paramValues, request.queryParamsValues(\"id\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNull(java.lang.String, java.lang.Object)","methodName":"assertNull","lineNumber":["284","463"],"fullExpression":"assertNull(\"A null value should have been returned because the cookie with that key does not exist\", request.cookie(cookieKey))","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/main/java/spark/CustomErrorPages.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["32"],"fullExpression":"LoggerFactory.getLogger(CustomErrorPages.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"warn","lineNumber":["66"],"fullExpression":"LOG.warn(\"Custom error page handler for status code {} has thrown an exception: {}. Using default page instead.\", status, e.getMessage())","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/utils/CollectionUtilsTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["17","37","57"],"fullExpression":"assertTrue(\"Should return true because collection is empty\", CollectionUtils.isEmpty(testCollection))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(java.lang.String, boolean)","methodName":"assertFalse","lineNumber":["28","46","66"],"fullExpression":"assertFalse(\"Should return false because collection is not empty\", CollectionUtils.isEmpty(testCollection))","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/InitExceptionHandlerTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["27"],"fullExpression":"Assert.assertEquals(\"Custom init error\", errorMessage)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/examples/templateview/FreeMarkerTemplateEngine.java":[{"declaringType":"freemarker.template.Configuration","methodSignature":"setClassForTemplateLoading(java.lang.Class, java.lang.String)","methodName":"setClassForTemplateLoading","lineNumber":["38"],"fullExpression":"retVal.setClassForTemplateLoading(FreeMarkerTemplateEngine.class, \"freemarker\")","currentLayer":0,"declarationInfo":null},{"declaringType":"freemarker.template.Template","methodSignature":"process(java.lang.Object, java.io.Writer)","methodName":"process","lineNumber":["26"],"fullExpression":"template.process(modelAndView.getModel(), stringWriter)","currentLayer":0,"declarationInfo":null},{"declaringType":"freemarker.template.Configuration","methodSignature":"getTemplate(java.lang.String)","methodName":"getTemplate","lineNumber":["25"],"fullExpression":"configuration.getTemplate(modelAndView.getViewName())","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/ServiceTest.java":[{"declaringType":"org.junit.rules.ExpectedException","methodSignature":"none()","methodName":"none","lineNumber":["31"],"fullExpression":"ExpectedException.none()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, long, long)","methodName":"assertEquals","lineNumber":["123","140","169","179","188","189","190","199","200","201"],"fullExpression":"assertEquals(\"Port should be set to the Port that was specified\", 8080, port)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(boolean)","methodName":"assertFalse","lineNumber":["304"],"fullExpression":"assertFalse(service.initialized)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"verify(T)","methodName":"verify","lineNumber":["290","303"],"fullExpression":"Mockito.verify(server)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["40","48","89","106","218","219","220","221"],"fullExpression":"assertEquals(\"Should return defaultIdentifier()\", EmbeddedServers.defaultIdentifier(), service.embeddedServerIdentifier())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"mock(java.lang.Class<T>)","methodName":"mock","lineNumber":["276","277","296","297"],"fullExpression":"Mockito.mock(Routes.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","methodName":"assertNotNull","lineNumber":["217"],"fullExpression":"assertNotNull(\"Should return a SslStores because we configured it to have one\", sslStores)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/embeddedserver/EmbeddedServersTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertNotNull(java.lang.Object)","methodName":"assertNotNull","lineNumber":["44"],"fullExpression":"assertNotNull(embeddedServer)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["49","75"],"fullExpression":"assertTrue(requestLogFile.exists())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"verify(T)","methodName":"verify","lineNumber":["51"],"fullExpression":"verify(serverFactory)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"mock(java.lang.Class<T>)","methodName":"mock","lineNumber":["36"],"fullExpression":"mock(JettyServerFactory.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.rules.TemporaryFolder","methodSignature":"newFolder()","methodName":"newFolder","lineNumber":["33","56"],"fullExpression":"temporaryFolder.newFolder()","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/servlet/ServletTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["123","129"],"fullExpression":"Assert.assertTrue(urlResponse.status == 401)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["62","66"],"fullExpression":"LOGGER.info(\">>> STARTING EMBEDDED JETTY SERVER for jUnit testing of SparkFilter\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodSignature":"join()","methodName":"join","lineNumber":["68"],"fullExpression":"server.join()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/main/java/spark/staticfiles/StaticFilesFolder.java":[{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["14"],"fullExpression":"LoggerFactory.getLogger(StaticFilesFolder.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"warn","lineNumber":["29"],"fullExpression":"LOG.warn(\"Registering external static files folder [{}] as [{}].\", folder, unixLikeFolder)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/staticfiles/StaticFilesTestExternal.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["63"],"fullExpression":"LOGGER.debug(\"tearDown(). Deleting tmp files\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["44"],"fullExpression":"LoggerFactory.getLogger(StaticFilesTestExternal.class)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/route/HttpMethodTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["32","39"],"fullExpression":"Assert.assertEquals(get, method)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/CookiesIntegrationTest.java":[{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodSignature":"build()","methodName":"build","lineNumber":["23"],"fullExpression":"HttpClientBuilder.create().build()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodSignature":"create()","methodName":"create","lineNumber":["23"],"fullExpression":"HttpClientBuilder.create()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"fail(java.lang.String)","methodName":"fail","lineNumber":["130"],"fullExpression":"fail(ex.toString())","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/main/java/spark/resource/ExternalResourceHandler.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["92"],"fullExpression":"LOG.debug(e.getClass().getSimpleName() + \" when trying to get resource. \" + e.getMessage())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["91"],"fullExpression":"LOG.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["33"],"fullExpression":"LoggerFactory.getLogger(ExternalResourceHandler.class)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/ServicePortIntegrationTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["35"],"fullExpression":"LOGGER.info(\"got port \")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["19"],"fullExpression":"LoggerFactory.getLogger(ServicePortIntegrationTest.class)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/embeddedserver/jetty/websocket/WebSocketCreatorFactoryTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["20","21","25","26"],"fullExpression":"assertTrue(annotated instanceof SparkWebSocketCreator)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["35","47"],"fullExpression":"assertEquals(\"WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'\", ex.getMessage())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"fail(java.lang.String)","methodName":"fail","lineNumber":["33","45"],"fullExpression":"fail(\"Handler creation should have thrown an IllegalArgumentException\")","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/GenericSecureIntegrationTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["142","148"],"fullExpression":"Assert.assertTrue(urlResponse.status == 401)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["27"],"fullExpression":"LoggerFactory.getLogger(GenericSecureIntegrationTest.class)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/main/java/spark/servlet/SparkFilter.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["152"],"fullExpression":"LOG.debug(relativePath)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"isDebugEnabled()","methodName":"isDebugEnabled","lineNumber":["151"],"fullExpression":"LOG.isDebugEnabled()","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["49"],"fullExpression":"LoggerFactory.getLogger(SparkFilter.class)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/examples/filter/DummyFilter.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["32","36"],"fullExpression":"LOGGER.info(\"Before\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["28"],"fullExpression":"LoggerFactory.getLogger(DummyFilter.class)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/route/RouteEntryTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["19","33","82","93","115"],"fullExpression":"assertTrue(\"Should return true because HTTP method is \\\"Before\\\", the methods of route and match request match,\" + \" and the path provided is same as ALL_PATHS (+/*paths)\", entry.matches(HttpMethod.before, SparkUtils.ALL_PATHS))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(java.lang.String, boolean)","methodName":"assertFalse","lineNumber":["47","58","71","104"],"fullExpression":"assertFalse(\"Should return false because path names did not match\", entry.matches(HttpMethod.get, \"/path\"))","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/main/java/spark/route/Routes.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["191"],"fullExpression":"LOG.debug(\"Adds route: \" + entry)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["292"],"fullExpression":"LOG.error(\"The @Route value: \" + route + \" is not in the correct format\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"debug","lineNumber":["255"],"fullExpression":"LOG.debug(\"Removing path {}\", path, httpMethod == null ? \"\" : \" with HTTP method \" + httpMethod)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["39"],"fullExpression":"org.slf4j.LoggerFactory.getLogger(Routes.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["283"],"fullExpression":"LOG.error(\"The @Route value: \" + route + \" has an invalid HTTP method part: \" + httpMethod + \".\")","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/Base64Test.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(boolean)","methodName":"assertTrue","lineNumber":["27"],"fullExpression":"Assert.assertTrue(in.equals(decode))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(boolean)","methodName":"assertFalse","lineNumber":["16"],"fullExpression":"Assert.assertFalse(in.equals(encode))","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/main/java/spark/Service.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["94","647"],"fullExpression":"LOG.error(\"ignite failed\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"warn(java.lang.String)","methodName":"warn","lineNumber":["346","366","531"],"fullExpression":"LOG.warn(\"Static file location has already been set\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.String)","methodName":"getLogger","lineNumber":["58"],"fullExpression":"LoggerFactory.getLogger(\"spark.Spark\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["498"],"fullExpression":"LOG.info(\"Interrupted by another thread\")","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/StaticFilesMemberTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["60"],"fullExpression":"LOGGER.debug(\"tearDown().deleting: \" + tmpExternalFile)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["43"],"fullExpression":"LoggerFactory.getLogger(StaticFilesMemberTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["107","110"],"fullExpression":"Assert.assertEquals(expectedContentType, \"application/javascript\")","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/ResponseBodyTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["61","71","81","91"],"fullExpression":"assertEquals(HELLO_WORLD, body)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/examples/filter/FilterExampleAttributes.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["42"],"fullExpression":"LOGGER.info(\"attr: \" + attr)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["32"],"fullExpression":"LoggerFactory.getLogger(FilterExampleAttributes.class)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/resource/UriPathTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["60"],"fullExpression":"assertEquals(\"canonical \" + aCanonical[0], aCanonical[1], UriPath.canonical(aCanonical[0]))","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/SessionTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["79","98","114","154"],"fullExpression":"assertEquals(\"Should return attribute from HttpSession\", \"Jett\", session.attribute(\"name\"))","currentLayer":0,"declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodSignature":"mock(java.lang.Class<T>)","methodName":"mock","lineNumber":["27"],"fullExpression":"mock(Request.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.String, long, long)","methodName":"assertEquals","lineNumber":["106","122","130"],"fullExpression":"assertEquals(\"Should return creationTime from HttpSession\", 10000000l, session.creationTime())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["41","55"],"fullExpression":"assertEquals(\"session cannot be null\", ex.getMessage())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"fail(java.lang.String)","methodName":"fail","lineNumber":["37","51"],"fullExpression":"fail(\"Session instantiation with a null HttpSession should throw an IllegalArgumentException\")","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/staticfiles/DisableMimeGuessingTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["56"],"fullExpression":"LOGGER.debug(\"tearDown().deleting: \" + tmpExternalFile)","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/globalstate/ServletFlagTest.java":[{"declaringType":"org.junit.Assert","methodSignature":"assertFalse(java.lang.String, boolean)","methodName":"assertFalse","lineNumber":["27","42"],"fullExpression":"assertFalse(\"Should be false because it is the default value\", isRunningFromServlet.get())","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertTrue(java.lang.String, boolean)","methodName":"assertTrue","lineNumber":["36","50"],"fullExpression":"assertTrue(\"Should be true because it flag has been set after runFromServlet\", isRunningFromServlet.get())","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/main/java/spark/staticfiles/StaticFilesConfiguration.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"info(java.lang.String)","methodName":"info","lineNumber":["150","175"],"fullExpression":"LOG.info(\"StaticResourceHandler configured with folder = \" + folder)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["48"],"fullExpression":"LoggerFactory.getLogger(StaticFilesConfiguration.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String, java.lang.Throwable)","methodName":"error","lineNumber":["177"],"fullExpression":"LOG.error(\"Error when creating external StaticResourceHandler\", e)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodSignature":"error(java.lang.String)","methodName":"error","lineNumber":["167"],"fullExpression":"LOG.error(\"External Static resource location must be a folder\")","currentLayer":0,"declarationInfo":null}],"/Users/yunzezhao/Code/CovSBOM/Application/spark-master/src/test/java/spark/BodyAvailabilityTest.java":[{"declaringType":"org.slf4j.Logger","methodSignature":"debug(java.lang.String)","methodName":"debug","lineNumber":["41","50","55","61"],"fullExpression":"LOGGER.debug(\"setup()\")","currentLayer":0,"declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodSignature":"getLogger(java.lang.Class<?>)","methodName":"getLogger","lineNumber":["18"],"fullExpression":"LoggerFactory.getLogger(BodyAvailabilityTest.class)","currentLayer":0,"declarationInfo":null},{"declaringType":"org.junit.Assert","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","methodName":"assertEquals","lineNumber":["75","76","77"],"fullExpression":"Assert.assertEquals(BODY_CONTENT, beforeBody)","currentLayer":0,"declarationInfo":null}]}