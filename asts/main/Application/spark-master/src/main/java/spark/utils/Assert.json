{"!":"com.github.javaparser.ast.CompilationUnit","range":{"beginLine":1,"beginColumn":1,"endLine":128,"endColumn":2},"tokenRange":{"beginToken":{"kind":9,"text":"/*\n * Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */"},"endToken":{"kind":0,"text":""}},"imports":[],"packageDeclaration":{"!":"com.github.javaparser.ast.PackageDeclaration","range":{"beginLine":17,"beginColumn":1,"endLine":17,"endColumn":20},"tokenRange":{"beginToken":{"kind":45,"text":"package"},"endToken":{"kind":106,"text":";"}},"annotations":[],"name":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":17,"beginColumn":9,"endLine":17,"endColumn":19},"tokenRange":{"beginToken":{"kind":97,"text":"spark"},"endToken":{"kind":97,"text":"utils"}},"identifier":"utils","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":17,"beginColumn":9,"endLine":17,"endColumn":13},"tokenRange":{"beginToken":{"kind":97,"text":"spark"},"endToken":{"kind":97,"text":"spark"}},"identifier":"spark"}}},"types":[{"!":"com.github.javaparser.ast.body.ClassOrInterfaceDeclaration","range":{"beginLine":40,"beginColumn":1,"endLine":128,"endColumn":1},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":103,"text":"}"}},"extendedTypes":[],"implementedTypes":[],"isInterface":"false","permittedTypes":[],"typeParameters":[],"members":[{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":51,"beginColumn":5,"endLine":55,"endColumn":5},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":103,"text":"}"}},"body":{"!":"com.github.javaparser.ast.stmt.BlockStmt","range":{"beginLine":51,"beginColumn":67,"endLine":55,"endColumn":5},"tokenRange":{"beginToken":{"kind":102,"text":"{"},"endToken":{"kind":103,"text":"}"}},"statements":[{"!":"com.github.javaparser.ast.stmt.IfStmt","range":{"beginLine":52,"beginColumn":9,"endLine":54,"endColumn":9},"tokenRange":{"beginToken":{"kind":34,"text":"if"},"endToken":{"kind":103,"text":"}"}},"condition":{"!":"com.github.javaparser.ast.expr.UnaryExpr","range":{"beginLine":52,"beginColumn":13,"endLine":52,"endColumn":23},"tokenRange":{"beginToken":{"kind":114,"text":"!"},"endToken":{"kind":97,"text":"expression"}},"expression":{"!":"com.github.javaparser.ast.expr.NameExpr","range":{"beginLine":52,"beginColumn":14,"endLine":52,"endColumn":23},"tokenRange":{"beginToken":{"kind":97,"text":"expression"},"endToken":{"kind":97,"text":"expression"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":52,"beginColumn":14,"endLine":52,"endColumn":23},"tokenRange":{"beginToken":{"kind":97,"text":"expression"},"endToken":{"kind":97,"text":"expression"}},"identifier":"expression"}},"operator":"LOGICAL_COMPLEMENT"},"thenStmt":{"!":"com.github.javaparser.ast.stmt.BlockStmt","range":{"beginLine":52,"beginColumn":26,"endLine":54,"endColumn":9},"tokenRange":{"beginToken":{"kind":102,"text":"{"},"endToken":{"kind":103,"text":"}"}},"statements":[{"!":"com.github.javaparser.ast.stmt.ThrowStmt","range":{"beginLine":53,"beginColumn":13,"endLine":53,"endColumn":56},"tokenRange":{"beginToken":{"kind":60,"text":"throw"},"endToken":{"kind":106,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.ObjectCreationExpr","range":{"beginLine":53,"beginColumn":19,"endLine":53,"endColumn":55},"tokenRange":{"beginToken":{"kind":42,"text":"new"},"endToken":{"kind":101,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.NameExpr","range":{"beginLine":53,"beginColumn":48,"endLine":53,"endColumn":54},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":53,"beginColumn":48,"endLine":53,"endColumn":54},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"identifier":"message"}}],"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":53,"beginColumn":23,"endLine":53,"endColumn":46},"tokenRange":{"beginToken":{"kind":97,"text":"IllegalArgumentException"},"endToken":{"kind":97,"text":"IllegalArgumentException"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":53,"beginColumn":23,"endLine":53,"endColumn":46},"tokenRange":{"beginToken":{"kind":97,"text":"IllegalArgumentException"},"endToken":{"kind":97,"text":"IllegalArgumentException"}},"identifier":"IllegalArgumentException"},"annotations":[]}}}]}}]},"type":{"!":"com.github.javaparser.ast.type.VoidType","range":{"beginLine":51,"beginColumn":19,"endLine":51,"endColumn":22},"tokenRange":{"beginToken":{"kind":65,"text":"void"},"endToken":{"kind":65,"text":"void"}},"annotations":[]},"modifiers":[{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":51,"beginColumn":5,"endLine":51,"endColumn":10},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":49,"text":"public"}},"keyword":"PUBLIC"},{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":51,"beginColumn":12,"endLine":51,"endColumn":17},"tokenRange":{"beginToken":{"kind":54,"text":"static"},"endToken":{"kind":54,"text":"static"}},"keyword":"STATIC"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":51,"beginColumn":24,"endLine":51,"endColumn":29},"tokenRange":{"beginToken":{"kind":97,"text":"isTrue"},"endToken":{"kind":97,"text":"isTrue"}},"identifier":"isTrue"},"parameters":[{"!":"com.github.javaparser.ast.body.Parameter","range":{"beginLine":51,"beginColumn":31,"endLine":51,"endColumn":48},"tokenRange":{"beginToken":{"kind":13,"text":"boolean"},"endToken":{"kind":97,"text":"expression"}},"annotations":[],"isVarArgs":"false","modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":51,"beginColumn":39,"endLine":51,"endColumn":48},"tokenRange":{"beginToken":{"kind":97,"text":"expression"},"endToken":{"kind":97,"text":"expression"}},"identifier":"expression"},"type":{"!":"com.github.javaparser.ast.type.PrimitiveType","range":{"beginLine":51,"beginColumn":31,"endLine":51,"endColumn":37},"tokenRange":{"beginToken":{"kind":13,"text":"boolean"},"endToken":{"kind":13,"text":"boolean"}},"type":"BOOLEAN","annotations":[]},"varArgsAnnotations":[]},{"!":"com.github.javaparser.ast.body.Parameter","range":{"beginLine":51,"beginColumn":51,"endLine":51,"endColumn":64},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"message"}},"annotations":[],"isVarArgs":"false","modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":51,"beginColumn":58,"endLine":51,"endColumn":64},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"identifier":"message"},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":51,"beginColumn":51,"endLine":51,"endColumn":56},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":51,"beginColumn":51,"endLine":51,"endColumn":56},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"identifier":"String"},"annotations":[]},"varArgsAnnotations":[]}],"thrownExceptions":[],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":42,"beginColumn":5,"endLine":50,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * Assert a boolean expression, throwing {@code IllegalArgumentException}\n     * if the test result is {@code false}.\n     * <pre class=\"code\">Assert.isTrue(i &gt; 0, \"The value must be greater than zero\");</pre>\n     *\n     * @param expression a boolean expression\n     * @param message    the exception message to use if the assertion fails\n     * @throws IllegalArgumentException if expression is {@code false}\n     */"},"endToken":{"kind":8,"text":"/**\n     * Assert a boolean expression, throwing {@code IllegalArgumentException}\n     * if the test result is {@code false}.\n     * <pre class=\"code\">Assert.isTrue(i &gt; 0, \"The value must be greater than zero\");</pre>\n     *\n     * @param expression a boolean expression\n     * @param message    the exception message to use if the assertion fails\n     * @throws IllegalArgumentException if expression is {@code false}\n     */"}},"content":"\n     * Assert a boolean expression, throwing {@code IllegalArgumentException}\n     * if the test result is {@code false}.\n     * <pre class=\"code\">Assert.isTrue(i &gt; 0, \"The value must be greater than zero\");</pre>\n     *\n     * @param expression a boolean expression\n     * @param message    the exception message to use if the assertion fails\n     * @throws IllegalArgumentException if expression is {@code false}\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":65,"beginColumn":5,"endLine":69,"endColumn":5},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":103,"text":"}"}},"body":{"!":"com.github.javaparser.ast.stmt.BlockStmt","range":{"beginLine":65,"beginColumn":63,"endLine":69,"endColumn":5},"tokenRange":{"beginToken":{"kind":102,"text":"{"},"endToken":{"kind":103,"text":"}"}},"statements":[{"!":"com.github.javaparser.ast.stmt.IfStmt","range":{"beginLine":66,"beginColumn":9,"endLine":68,"endColumn":9},"tokenRange":{"beginToken":{"kind":34,"text":"if"},"endToken":{"kind":103,"text":"}"}},"condition":{"!":"com.github.javaparser.ast.expr.BinaryExpr","range":{"beginLine":66,"beginColumn":13,"endLine":66,"endColumn":26},"tokenRange":{"beginToken":{"kind":97,"text":"object"},"endToken":{"kind":44,"text":"null"}},"left":{"!":"com.github.javaparser.ast.expr.NameExpr","range":{"beginLine":66,"beginColumn":13,"endLine":66,"endColumn":18},"tokenRange":{"beginToken":{"kind":97,"text":"object"},"endToken":{"kind":97,"text":"object"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":66,"beginColumn":13,"endLine":66,"endColumn":18},"tokenRange":{"beginToken":{"kind":97,"text":"object"},"endToken":{"kind":97,"text":"object"}},"identifier":"object"}},"operator":"EQUALS","right":{"!":"com.github.javaparser.ast.expr.NullLiteralExpr","range":{"beginLine":66,"beginColumn":23,"endLine":66,"endColumn":26},"tokenRange":{"beginToken":{"kind":44,"text":"null"},"endToken":{"kind":44,"text":"null"}}}},"thenStmt":{"!":"com.github.javaparser.ast.stmt.BlockStmt","range":{"beginLine":66,"beginColumn":29,"endLine":68,"endColumn":9},"tokenRange":{"beginToken":{"kind":102,"text":"{"},"endToken":{"kind":103,"text":"}"}},"statements":[{"!":"com.github.javaparser.ast.stmt.ThrowStmt","range":{"beginLine":67,"beginColumn":13,"endLine":67,"endColumn":56},"tokenRange":{"beginToken":{"kind":60,"text":"throw"},"endToken":{"kind":106,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.ObjectCreationExpr","range":{"beginLine":67,"beginColumn":19,"endLine":67,"endColumn":55},"tokenRange":{"beginToken":{"kind":42,"text":"new"},"endToken":{"kind":101,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.NameExpr","range":{"beginLine":67,"beginColumn":48,"endLine":67,"endColumn":54},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":67,"beginColumn":48,"endLine":67,"endColumn":54},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"identifier":"message"}}],"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":67,"beginColumn":23,"endLine":67,"endColumn":46},"tokenRange":{"beginToken":{"kind":97,"text":"IllegalArgumentException"},"endToken":{"kind":97,"text":"IllegalArgumentException"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":67,"beginColumn":23,"endLine":67,"endColumn":46},"tokenRange":{"beginToken":{"kind":97,"text":"IllegalArgumentException"},"endToken":{"kind":97,"text":"IllegalArgumentException"}},"identifier":"IllegalArgumentException"},"annotations":[]}}}]}}]},"type":{"!":"com.github.javaparser.ast.type.VoidType","range":{"beginLine":65,"beginColumn":19,"endLine":65,"endColumn":22},"tokenRange":{"beginToken":{"kind":65,"text":"void"},"endToken":{"kind":65,"text":"void"}},"annotations":[]},"modifiers":[{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":65,"beginColumn":5,"endLine":65,"endColumn":10},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":49,"text":"public"}},"keyword":"PUBLIC"},{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":65,"beginColumn":12,"endLine":65,"endColumn":17},"tokenRange":{"beginToken":{"kind":54,"text":"static"},"endToken":{"kind":54,"text":"static"}},"keyword":"STATIC"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":65,"beginColumn":24,"endLine":65,"endColumn":30},"tokenRange":{"beginToken":{"kind":97,"text":"notNull"},"endToken":{"kind":97,"text":"notNull"}},"identifier":"notNull"},"parameters":[{"!":"com.github.javaparser.ast.body.Parameter","range":{"beginLine":65,"beginColumn":32,"endLine":65,"endColumn":44},"tokenRange":{"beginToken":{"kind":97,"text":"Object"},"endToken":{"kind":97,"text":"object"}},"annotations":[],"isVarArgs":"false","modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":65,"beginColumn":39,"endLine":65,"endColumn":44},"tokenRange":{"beginToken":{"kind":97,"text":"object"},"endToken":{"kind":97,"text":"object"}},"identifier":"object"},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":65,"beginColumn":32,"endLine":65,"endColumn":37},"tokenRange":{"beginToken":{"kind":97,"text":"Object"},"endToken":{"kind":97,"text":"Object"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":65,"beginColumn":32,"endLine":65,"endColumn":37},"tokenRange":{"beginToken":{"kind":97,"text":"Object"},"endToken":{"kind":97,"text":"Object"}},"identifier":"Object"},"annotations":[]},"varArgsAnnotations":[]},{"!":"com.github.javaparser.ast.body.Parameter","range":{"beginLine":65,"beginColumn":47,"endLine":65,"endColumn":60},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"message"}},"annotations":[],"isVarArgs":"false","modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":65,"beginColumn":54,"endLine":65,"endColumn":60},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"identifier":"message"},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":65,"beginColumn":47,"endLine":65,"endColumn":52},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":65,"beginColumn":47,"endLine":65,"endColumn":52},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"identifier":"String"},"annotations":[]},"varArgsAnnotations":[]}],"thrownExceptions":[],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":57,"beginColumn":5,"endLine":64,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * Assert that an object is not {@code null} .\n     * <pre class=\"code\">Assert.notNull(clazz, \"The class must not be null\");</pre>\n     *\n     * @param object  the object to check\n     * @param message the exception message to use if the assertion fails\n     * @throws IllegalArgumentException if the object is {@code null}\n     */"},"endToken":{"kind":8,"text":"/**\n     * Assert that an object is not {@code null} .\n     * <pre class=\"code\">Assert.notNull(clazz, \"The class must not be null\");</pre>\n     *\n     * @param object  the object to check\n     * @param message the exception message to use if the assertion fails\n     * @throws IllegalArgumentException if the object is {@code null}\n     */"}},"content":"\n     * Assert that an object is not {@code null} .\n     * <pre class=\"code\">Assert.notNull(clazz, \"The class must not be null\");</pre>\n     *\n     * @param object  the object to check\n     * @param message the exception message to use if the assertion fails\n     * @throws IllegalArgumentException if the object is {@code null}\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":78,"beginColumn":5,"endLine":80,"endColumn":5},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":103,"text":"}"}},"body":{"!":"com.github.javaparser.ast.stmt.BlockStmt","range":{"beginLine":78,"beginColumn":47,"endLine":80,"endColumn":5},"tokenRange":{"beginToken":{"kind":102,"text":"{"},"endToken":{"kind":103,"text":"}"}},"statements":[{"!":"com.github.javaparser.ast.stmt.ExpressionStmt","range":{"beginLine":79,"beginColumn":9,"endLine":79,"endColumn":95},"tokenRange":{"beginToken":{"kind":97,"text":"notNull"},"endToken":{"kind":106,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.MethodCallExpr","range":{"beginLine":79,"beginColumn":9,"endLine":79,"endColumn":94},"tokenRange":{"beginToken":{"kind":97,"text":"notNull"},"endToken":{"kind":101,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.NameExpr","range":{"beginLine":79,"beginColumn":17,"endLine":79,"endColumn":22},"tokenRange":{"beginToken":{"kind":97,"text":"object"},"endToken":{"kind":97,"text":"object"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":79,"beginColumn":17,"endLine":79,"endColumn":22},"tokenRange":{"beginToken":{"kind":97,"text":"object"},"endToken":{"kind":97,"text":"object"}},"identifier":"object"}},{"!":"com.github.javaparser.ast.expr.StringLiteralExpr","range":{"beginLine":79,"beginColumn":25,"endLine":79,"endColumn":93},"tokenRange":{"beginToken":{"kind":93,"text":"\"[Assertion failed] - this argument is required; it must not be null\""},"endToken":{"kind":93,"text":"\"[Assertion failed] - this argument is required; it must not be null\""}},"value":"[Assertion failed] - this argument is required; it must not be null"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":79,"beginColumn":9,"endLine":79,"endColumn":15},"tokenRange":{"beginToken":{"kind":97,"text":"notNull"},"endToken":{"kind":97,"text":"notNull"}},"identifier":"notNull"}}}]},"type":{"!":"com.github.javaparser.ast.type.VoidType","range":{"beginLine":78,"beginColumn":19,"endLine":78,"endColumn":22},"tokenRange":{"beginToken":{"kind":65,"text":"void"},"endToken":{"kind":65,"text":"void"}},"annotations":[]},"modifiers":[{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":78,"beginColumn":5,"endLine":78,"endColumn":10},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":49,"text":"public"}},"keyword":"PUBLIC"},{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":78,"beginColumn":12,"endLine":78,"endColumn":17},"tokenRange":{"beginToken":{"kind":54,"text":"static"},"endToken":{"kind":54,"text":"static"}},"keyword":"STATIC"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":78,"beginColumn":24,"endLine":78,"endColumn":30},"tokenRange":{"beginToken":{"kind":97,"text":"notNull"},"endToken":{"kind":97,"text":"notNull"}},"identifier":"notNull"},"parameters":[{"!":"com.github.javaparser.ast.body.Parameter","range":{"beginLine":78,"beginColumn":32,"endLine":78,"endColumn":44},"tokenRange":{"beginToken":{"kind":97,"text":"Object"},"endToken":{"kind":97,"text":"object"}},"annotations":[],"isVarArgs":"false","modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":78,"beginColumn":39,"endLine":78,"endColumn":44},"tokenRange":{"beginToken":{"kind":97,"text":"object"},"endToken":{"kind":97,"text":"object"}},"identifier":"object"},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":78,"beginColumn":32,"endLine":78,"endColumn":37},"tokenRange":{"beginToken":{"kind":97,"text":"Object"},"endToken":{"kind":97,"text":"Object"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":78,"beginColumn":32,"endLine":78,"endColumn":37},"tokenRange":{"beginToken":{"kind":97,"text":"Object"},"endToken":{"kind":97,"text":"Object"}},"identifier":"Object"},"annotations":[]},"varArgsAnnotations":[]}],"thrownExceptions":[],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":71,"beginColumn":5,"endLine":77,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * Assert that an object is not {@code null} .\n     * <pre class=\"code\">Assert.notNull(clazz);</pre>\n     *\n     * @param object the object to check\n     * @throws IllegalArgumentException if the object is {@code null}\n     */"},"endToken":{"kind":8,"text":"/**\n     * Assert that an object is not {@code null} .\n     * <pre class=\"code\">Assert.notNull(clazz);</pre>\n     *\n     * @param object the object to check\n     * @throws IllegalArgumentException if the object is {@code null}\n     */"}},"content":"\n     * Assert that an object is not {@code null} .\n     * <pre class=\"code\">Assert.notNull(clazz);</pre>\n     *\n     * @param object the object to check\n     * @throws IllegalArgumentException if the object is {@code null}\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":91,"beginColumn":5,"endLine":95,"endColumn":5},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":103,"text":"}"}},"body":{"!":"com.github.javaparser.ast.stmt.BlockStmt","range":{"beginLine":91,"beginColumn":63,"endLine":95,"endColumn":5},"tokenRange":{"beginToken":{"kind":102,"text":"{"},"endToken":{"kind":103,"text":"}"}},"statements":[{"!":"com.github.javaparser.ast.stmt.IfStmt","range":{"beginLine":92,"beginColumn":9,"endLine":94,"endColumn":9},"tokenRange":{"beginToken":{"kind":34,"text":"if"},"endToken":{"kind":103,"text":"}"}},"condition":{"!":"com.github.javaparser.ast.expr.UnaryExpr","range":{"beginLine":92,"beginColumn":13,"endLine":92,"endColumn":40},"tokenRange":{"beginToken":{"kind":114,"text":"!"},"endToken":{"kind":101,"text":")"}},"expression":{"!":"com.github.javaparser.ast.expr.MethodCallExpr","range":{"beginLine":92,"beginColumn":14,"endLine":92,"endColumn":40},"tokenRange":{"beginToken":{"kind":97,"text":"StringUtils"},"endToken":{"kind":101,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.NameExpr","range":{"beginLine":92,"beginColumn":36,"endLine":92,"endColumn":39},"tokenRange":{"beginToken":{"kind":97,"text":"text"},"endToken":{"kind":97,"text":"text"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":92,"beginColumn":36,"endLine":92,"endColumn":39},"tokenRange":{"beginToken":{"kind":97,"text":"text"},"endToken":{"kind":97,"text":"text"}},"identifier":"text"}}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":92,"beginColumn":26,"endLine":92,"endColumn":34},"tokenRange":{"beginToken":{"kind":97,"text":"hasLength"},"endToken":{"kind":97,"text":"hasLength"}},"identifier":"hasLength"},"scope":{"!":"com.github.javaparser.ast.expr.NameExpr","range":{"beginLine":92,"beginColumn":14,"endLine":92,"endColumn":24},"tokenRange":{"beginToken":{"kind":97,"text":"StringUtils"},"endToken":{"kind":97,"text":"StringUtils"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":92,"beginColumn":14,"endLine":92,"endColumn":24},"tokenRange":{"beginToken":{"kind":97,"text":"StringUtils"},"endToken":{"kind":97,"text":"StringUtils"}},"identifier":"StringUtils"}}},"operator":"LOGICAL_COMPLEMENT"},"thenStmt":{"!":"com.github.javaparser.ast.stmt.BlockStmt","range":{"beginLine":92,"beginColumn":43,"endLine":94,"endColumn":9},"tokenRange":{"beginToken":{"kind":102,"text":"{"},"endToken":{"kind":103,"text":"}"}},"statements":[{"!":"com.github.javaparser.ast.stmt.ThrowStmt","range":{"beginLine":93,"beginColumn":13,"endLine":93,"endColumn":56},"tokenRange":{"beginToken":{"kind":60,"text":"throw"},"endToken":{"kind":106,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.ObjectCreationExpr","range":{"beginLine":93,"beginColumn":19,"endLine":93,"endColumn":55},"tokenRange":{"beginToken":{"kind":42,"text":"new"},"endToken":{"kind":101,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.NameExpr","range":{"beginLine":93,"beginColumn":48,"endLine":93,"endColumn":54},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":93,"beginColumn":48,"endLine":93,"endColumn":54},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"identifier":"message"}}],"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":93,"beginColumn":23,"endLine":93,"endColumn":46},"tokenRange":{"beginToken":{"kind":97,"text":"IllegalArgumentException"},"endToken":{"kind":97,"text":"IllegalArgumentException"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":93,"beginColumn":23,"endLine":93,"endColumn":46},"tokenRange":{"beginToken":{"kind":97,"text":"IllegalArgumentException"},"endToken":{"kind":97,"text":"IllegalArgumentException"}},"identifier":"IllegalArgumentException"},"annotations":[]}}}]}}]},"type":{"!":"com.github.javaparser.ast.type.VoidType","range":{"beginLine":91,"beginColumn":19,"endLine":91,"endColumn":22},"tokenRange":{"beginToken":{"kind":65,"text":"void"},"endToken":{"kind":65,"text":"void"}},"annotations":[]},"modifiers":[{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":91,"beginColumn":5,"endLine":91,"endColumn":10},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":49,"text":"public"}},"keyword":"PUBLIC"},{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":91,"beginColumn":12,"endLine":91,"endColumn":17},"tokenRange":{"beginToken":{"kind":54,"text":"static"},"endToken":{"kind":54,"text":"static"}},"keyword":"STATIC"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":91,"beginColumn":24,"endLine":91,"endColumn":32},"tokenRange":{"beginToken":{"kind":97,"text":"hasLength"},"endToken":{"kind":97,"text":"hasLength"}},"identifier":"hasLength"},"parameters":[{"!":"com.github.javaparser.ast.body.Parameter","range":{"beginLine":91,"beginColumn":34,"endLine":91,"endColumn":44},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"text"}},"annotations":[],"isVarArgs":"false","modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":91,"beginColumn":41,"endLine":91,"endColumn":44},"tokenRange":{"beginToken":{"kind":97,"text":"text"},"endToken":{"kind":97,"text":"text"}},"identifier":"text"},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":91,"beginColumn":34,"endLine":91,"endColumn":39},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":91,"beginColumn":34,"endLine":91,"endColumn":39},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"identifier":"String"},"annotations":[]},"varArgsAnnotations":[]},{"!":"com.github.javaparser.ast.body.Parameter","range":{"beginLine":91,"beginColumn":47,"endLine":91,"endColumn":60},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"message"}},"annotations":[],"isVarArgs":"false","modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":91,"beginColumn":54,"endLine":91,"endColumn":60},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"identifier":"message"},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":91,"beginColumn":47,"endLine":91,"endColumn":52},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":91,"beginColumn":47,"endLine":91,"endColumn":52},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"identifier":"String"},"annotations":[]},"varArgsAnnotations":[]}],"thrownExceptions":[],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":82,"beginColumn":5,"endLine":90,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * Assert that the given String is not empty; that is,\n     * it must not be {@code null} and not the empty String.\n     * <pre class=\"code\">Assert.hasLength(name, \"Name must not be empty\");</pre>\n     *\n     * @param text    the String to check\n     * @param message the exception message to use if the assertion fails\n     * @see StringUtils#hasLength\n     */"},"endToken":{"kind":8,"text":"/**\n     * Assert that the given String is not empty; that is,\n     * it must not be {@code null} and not the empty String.\n     * <pre class=\"code\">Assert.hasLength(name, \"Name must not be empty\");</pre>\n     *\n     * @param text    the String to check\n     * @param message the exception message to use if the assertion fails\n     * @see StringUtils#hasLength\n     */"}},"content":"\n     * Assert that the given String is not empty; that is,\n     * it must not be {@code null} and not the empty String.\n     * <pre class=\"code\">Assert.hasLength(name, \"Name must not be empty\");</pre>\n     *\n     * @param text    the String to check\n     * @param message the exception message to use if the assertion fails\n     * @see StringUtils#hasLength\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":106,"beginColumn":5,"endLine":110,"endColumn":5},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":103,"text":"}"}},"body":{"!":"com.github.javaparser.ast.stmt.BlockStmt","range":{"beginLine":106,"beginColumn":65,"endLine":110,"endColumn":5},"tokenRange":{"beginToken":{"kind":102,"text":"{"},"endToken":{"kind":103,"text":"}"}},"statements":[{"!":"com.github.javaparser.ast.stmt.IfStmt","range":{"beginLine":107,"beginColumn":9,"endLine":109,"endColumn":9},"tokenRange":{"beginToken":{"kind":34,"text":"if"},"endToken":{"kind":103,"text":"}"}},"condition":{"!":"com.github.javaparser.ast.expr.MethodCallExpr","range":{"beginLine":107,"beginColumn":13,"endLine":107,"endColumn":38},"tokenRange":{"beginToken":{"kind":97,"text":"ObjectUtils"},"endToken":{"kind":101,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.NameExpr","range":{"beginLine":107,"beginColumn":33,"endLine":107,"endColumn":37},"tokenRange":{"beginToken":{"kind":97,"text":"array"},"endToken":{"kind":97,"text":"array"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":107,"beginColumn":33,"endLine":107,"endColumn":37},"tokenRange":{"beginToken":{"kind":97,"text":"array"},"endToken":{"kind":97,"text":"array"}},"identifier":"array"}}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":107,"beginColumn":25,"endLine":107,"endColumn":31},"tokenRange":{"beginToken":{"kind":97,"text":"isEmpty"},"endToken":{"kind":97,"text":"isEmpty"}},"identifier":"isEmpty"},"scope":{"!":"com.github.javaparser.ast.expr.NameExpr","range":{"beginLine":107,"beginColumn":13,"endLine":107,"endColumn":23},"tokenRange":{"beginToken":{"kind":97,"text":"ObjectUtils"},"endToken":{"kind":97,"text":"ObjectUtils"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":107,"beginColumn":13,"endLine":107,"endColumn":23},"tokenRange":{"beginToken":{"kind":97,"text":"ObjectUtils"},"endToken":{"kind":97,"text":"ObjectUtils"}},"identifier":"ObjectUtils"}}},"thenStmt":{"!":"com.github.javaparser.ast.stmt.BlockStmt","range":{"beginLine":107,"beginColumn":41,"endLine":109,"endColumn":9},"tokenRange":{"beginToken":{"kind":102,"text":"{"},"endToken":{"kind":103,"text":"}"}},"statements":[{"!":"com.github.javaparser.ast.stmt.ThrowStmt","range":{"beginLine":108,"beginColumn":13,"endLine":108,"endColumn":56},"tokenRange":{"beginToken":{"kind":60,"text":"throw"},"endToken":{"kind":106,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.ObjectCreationExpr","range":{"beginLine":108,"beginColumn":19,"endLine":108,"endColumn":55},"tokenRange":{"beginToken":{"kind":42,"text":"new"},"endToken":{"kind":101,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.NameExpr","range":{"beginLine":108,"beginColumn":48,"endLine":108,"endColumn":54},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":108,"beginColumn":48,"endLine":108,"endColumn":54},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"identifier":"message"}}],"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":108,"beginColumn":23,"endLine":108,"endColumn":46},"tokenRange":{"beginToken":{"kind":97,"text":"IllegalArgumentException"},"endToken":{"kind":97,"text":"IllegalArgumentException"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":108,"beginColumn":23,"endLine":108,"endColumn":46},"tokenRange":{"beginToken":{"kind":97,"text":"IllegalArgumentException"},"endToken":{"kind":97,"text":"IllegalArgumentException"}},"identifier":"IllegalArgumentException"},"annotations":[]}}}]}}]},"type":{"!":"com.github.javaparser.ast.type.VoidType","range":{"beginLine":106,"beginColumn":19,"endLine":106,"endColumn":22},"tokenRange":{"beginToken":{"kind":65,"text":"void"},"endToken":{"kind":65,"text":"void"}},"annotations":[]},"modifiers":[{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":106,"beginColumn":5,"endLine":106,"endColumn":10},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":49,"text":"public"}},"keyword":"PUBLIC"},{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":106,"beginColumn":12,"endLine":106,"endColumn":17},"tokenRange":{"beginToken":{"kind":54,"text":"static"},"endToken":{"kind":54,"text":"static"}},"keyword":"STATIC"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":106,"beginColumn":24,"endLine":106,"endColumn":31},"tokenRange":{"beginToken":{"kind":97,"text":"notEmpty"},"endToken":{"kind":97,"text":"notEmpty"}},"identifier":"notEmpty"},"parameters":[{"!":"com.github.javaparser.ast.body.Parameter","range":{"beginLine":106,"beginColumn":33,"endLine":106,"endColumn":46},"tokenRange":{"beginToken":{"kind":97,"text":"Object"},"endToken":{"kind":97,"text":"array"}},"annotations":[],"isVarArgs":"false","modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":106,"beginColumn":42,"endLine":106,"endColumn":46},"tokenRange":{"beginToken":{"kind":97,"text":"array"},"endToken":{"kind":97,"text":"array"}},"identifier":"array"},"type":{"!":"com.github.javaparser.ast.type.ArrayType","range":{"beginLine":106,"beginColumn":33,"endLine":106,"endColumn":40},"tokenRange":{"beginToken":{"kind":97,"text":"Object"},"endToken":{"kind":105,"text":"]"}},"componentType":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":106,"beginColumn":33,"endLine":106,"endColumn":38},"tokenRange":{"beginToken":{"kind":97,"text":"Object"},"endToken":{"kind":97,"text":"Object"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":106,"beginColumn":33,"endLine":106,"endColumn":38},"tokenRange":{"beginToken":{"kind":97,"text":"Object"},"endToken":{"kind":97,"text":"Object"}},"identifier":"Object"},"annotations":[]},"origin":"TYPE","annotations":[]},"varArgsAnnotations":[]},{"!":"com.github.javaparser.ast.body.Parameter","range":{"beginLine":106,"beginColumn":49,"endLine":106,"endColumn":62},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"message"}},"annotations":[],"isVarArgs":"false","modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":106,"beginColumn":56,"endLine":106,"endColumn":62},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"identifier":"message"},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":106,"beginColumn":49,"endLine":106,"endColumn":54},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":106,"beginColumn":49,"endLine":106,"endColumn":54},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"identifier":"String"},"annotations":[]},"varArgsAnnotations":[]}],"thrownExceptions":[],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":97,"beginColumn":5,"endLine":105,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * Assert that an array has elements; that is, it must not be\n     * {@code null} and must have at least one element.\n     * <pre class=\"code\">Assert.notEmpty(array, \"The array must have elements\");</pre>\n     *\n     * @param array   the array to check\n     * @param message the exception message to use if the assertion fails\n     * @throws IllegalArgumentException if the object array is {@code null} or has no elements\n     */"},"endToken":{"kind":8,"text":"/**\n     * Assert that an array has elements; that is, it must not be\n     * {@code null} and must have at least one element.\n     * <pre class=\"code\">Assert.notEmpty(array, \"The array must have elements\");</pre>\n     *\n     * @param array   the array to check\n     * @param message the exception message to use if the assertion fails\n     * @throws IllegalArgumentException if the object array is {@code null} or has no elements\n     */"}},"content":"\n     * Assert that an array has elements; that is, it must not be\n     * {@code null} and must have at least one element.\n     * <pre class=\"code\">Assert.notEmpty(array, \"The array must have elements\");</pre>\n     *\n     * @param array   the array to check\n     * @param message the exception message to use if the assertion fails\n     * @throws IllegalArgumentException if the object array is {@code null} or has no elements\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":122,"beginColumn":5,"endLine":126,"endColumn":5},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":103,"text":"}"}},"body":{"!":"com.github.javaparser.ast.stmt.BlockStmt","range":{"beginLine":122,"beginColumn":66,"endLine":126,"endColumn":5},"tokenRange":{"beginToken":{"kind":102,"text":"{"},"endToken":{"kind":103,"text":"}"}},"statements":[{"!":"com.github.javaparser.ast.stmt.IfStmt","range":{"beginLine":123,"beginColumn":9,"endLine":125,"endColumn":9},"tokenRange":{"beginToken":{"kind":34,"text":"if"},"endToken":{"kind":103,"text":"}"}},"condition":{"!":"com.github.javaparser.ast.expr.UnaryExpr","range":{"beginLine":123,"beginColumn":13,"endLine":123,"endColumn":23},"tokenRange":{"beginToken":{"kind":114,"text":"!"},"endToken":{"kind":97,"text":"expression"}},"expression":{"!":"com.github.javaparser.ast.expr.NameExpr","range":{"beginLine":123,"beginColumn":14,"endLine":123,"endColumn":23},"tokenRange":{"beginToken":{"kind":97,"text":"expression"},"endToken":{"kind":97,"text":"expression"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":123,"beginColumn":14,"endLine":123,"endColumn":23},"tokenRange":{"beginToken":{"kind":97,"text":"expression"},"endToken":{"kind":97,"text":"expression"}},"identifier":"expression"}},"operator":"LOGICAL_COMPLEMENT"},"thenStmt":{"!":"com.github.javaparser.ast.stmt.BlockStmt","range":{"beginLine":123,"beginColumn":26,"endLine":125,"endColumn":9},"tokenRange":{"beginToken":{"kind":102,"text":"{"},"endToken":{"kind":103,"text":"}"}},"statements":[{"!":"com.github.javaparser.ast.stmt.ThrowStmt","range":{"beginLine":124,"beginColumn":13,"endLine":124,"endColumn":53},"tokenRange":{"beginToken":{"kind":60,"text":"throw"},"endToken":{"kind":106,"text":";"}},"expression":{"!":"com.github.javaparser.ast.expr.ObjectCreationExpr","range":{"beginLine":124,"beginColumn":19,"endLine":124,"endColumn":52},"tokenRange":{"beginToken":{"kind":42,"text":"new"},"endToken":{"kind":101,"text":")"}},"arguments":[{"!":"com.github.javaparser.ast.expr.NameExpr","range":{"beginLine":124,"beginColumn":45,"endLine":124,"endColumn":51},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":124,"beginColumn":45,"endLine":124,"endColumn":51},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"identifier":"message"}}],"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":124,"beginColumn":23,"endLine":124,"endColumn":43},"tokenRange":{"beginToken":{"kind":97,"text":"IllegalStateException"},"endToken":{"kind":97,"text":"IllegalStateException"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":124,"beginColumn":23,"endLine":124,"endColumn":43},"tokenRange":{"beginToken":{"kind":97,"text":"IllegalStateException"},"endToken":{"kind":97,"text":"IllegalStateException"}},"identifier":"IllegalStateException"},"annotations":[]}}}]}}]},"type":{"!":"com.github.javaparser.ast.type.VoidType","range":{"beginLine":122,"beginColumn":19,"endLine":122,"endColumn":22},"tokenRange":{"beginToken":{"kind":65,"text":"void"},"endToken":{"kind":65,"text":"void"}},"annotations":[]},"modifiers":[{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":122,"beginColumn":5,"endLine":122,"endColumn":10},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":49,"text":"public"}},"keyword":"PUBLIC"},{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":122,"beginColumn":12,"endLine":122,"endColumn":17},"tokenRange":{"beginToken":{"kind":54,"text":"static"},"endToken":{"kind":54,"text":"static"}},"keyword":"STATIC"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":122,"beginColumn":24,"endLine":122,"endColumn":28},"tokenRange":{"beginToken":{"kind":97,"text":"state"},"endToken":{"kind":97,"text":"state"}},"identifier":"state"},"parameters":[{"!":"com.github.javaparser.ast.body.Parameter","range":{"beginLine":122,"beginColumn":30,"endLine":122,"endColumn":47},"tokenRange":{"beginToken":{"kind":13,"text":"boolean"},"endToken":{"kind":97,"text":"expression"}},"annotations":[],"isVarArgs":"false","modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":122,"beginColumn":38,"endLine":122,"endColumn":47},"tokenRange":{"beginToken":{"kind":97,"text":"expression"},"endToken":{"kind":97,"text":"expression"}},"identifier":"expression"},"type":{"!":"com.github.javaparser.ast.type.PrimitiveType","range":{"beginLine":122,"beginColumn":30,"endLine":122,"endColumn":36},"tokenRange":{"beginToken":{"kind":13,"text":"boolean"},"endToken":{"kind":13,"text":"boolean"}},"type":"BOOLEAN","annotations":[]},"varArgsAnnotations":[]},{"!":"com.github.javaparser.ast.body.Parameter","range":{"beginLine":122,"beginColumn":50,"endLine":122,"endColumn":63},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"message"}},"annotations":[],"isVarArgs":"false","modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":122,"beginColumn":57,"endLine":122,"endColumn":63},"tokenRange":{"beginToken":{"kind":97,"text":"message"},"endToken":{"kind":97,"text":"message"}},"identifier":"message"},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":122,"beginColumn":50,"endLine":122,"endColumn":55},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":122,"beginColumn":50,"endLine":122,"endColumn":55},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"identifier":"String"},"annotations":[]},"varArgsAnnotations":[]}],"thrownExceptions":[],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":112,"beginColumn":5,"endLine":121,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * Assert a boolean expression, throwing {@code IllegalStateException}\n     * if the test result is {@code false}. Call isTrue if you wish to\n     * throw IllegalArgumentException on an assertion failure.\n     * <pre class=\"code\">Assert.state(id == null, \"The id property must not already be initialized\");</pre>\n     *\n     * @param expression a boolean expression\n     * @param message    the exception message to use if the assertion fails\n     * @throws IllegalStateException if expression is {@code false}\n     */"},"endToken":{"kind":8,"text":"/**\n     * Assert a boolean expression, throwing {@code IllegalStateException}\n     * if the test result is {@code false}. Call isTrue if you wish to\n     * throw IllegalArgumentException on an assertion failure.\n     * <pre class=\"code\">Assert.state(id == null, \"The id property must not already be initialized\");</pre>\n     *\n     * @param expression a boolean expression\n     * @param message    the exception message to use if the assertion fails\n     * @throws IllegalStateException if expression is {@code false}\n     */"}},"content":"\n     * Assert a boolean expression, throwing {@code IllegalStateException}\n     * if the test result is {@code false}. Call isTrue if you wish to\n     * throw IllegalArgumentException on an assertion failure.\n     * <pre class=\"code\">Assert.state(id == null, \"The id property must not already be initialized\");</pre>\n     *\n     * @param expression a boolean expression\n     * @param message    the exception message to use if the assertion fails\n     * @throws IllegalStateException if expression is {@code false}\n     "}}],"modifiers":[{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":40,"beginColumn":1,"endLine":40,"endColumn":6},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":49,"text":"public"}},"keyword":"PUBLIC"},{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":40,"beginColumn":8,"endLine":40,"endColumn":15},"tokenRange":{"beginToken":{"kind":11,"text":"abstract"},"endToken":{"kind":11,"text":"abstract"}},"keyword":"ABSTRACT"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":40,"beginColumn":23,"endLine":40,"endColumn":28},"tokenRange":{"beginToken":{"kind":97,"text":"Assert"},"endToken":{"kind":97,"text":"Assert"}},"identifier":"Assert"},"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":19,"beginColumn":1,"endLine":39,"endColumn":3},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n * Assertion utility class that assists in validating arguments.\n * Useful for identifying programmer errors early and clearly at runtime.\n * <p>For example, if the contract of a public method states it does not\n * allow {@code null} arguments, Assert can be used to validate that\n * contract. Doing this clearly indicates a contract violation when it\n * occurs and protects the class's invariants.\n * <p>Typically used to validate method arguments rather than configuration\n * properties, to check for cases that are usually programmer errors rather than\n * configuration errors. In contrast to config initialization code, there is\n * usually no point in falling back to defaults in such methods.\n * <p>This class is similar to JUnit's assertion library. If an argument value is\n * deemed invalid, an {@link IllegalArgumentException} is thrown (typically).\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @author Colin Sampaleanu\n * @author Rob Harrop\n *\n * Code copied from Spring source. Modifications made (mostly removal of methods) by Per Wendel.\n */"},"endToken":{"kind":8,"text":"/**\n * Assertion utility class that assists in validating arguments.\n * Useful for identifying programmer errors early and clearly at runtime.\n * <p>For example, if the contract of a public method states it does not\n * allow {@code null} arguments, Assert can be used to validate that\n * contract. Doing this clearly indicates a contract violation when it\n * occurs and protects the class's invariants.\n * <p>Typically used to validate method arguments rather than configuration\n * properties, to check for cases that are usually programmer errors rather than\n * configuration errors. In contrast to config initialization code, there is\n * usually no point in falling back to defaults in such methods.\n * <p>This class is similar to JUnit's assertion library. If an argument value is\n * deemed invalid, an {@link IllegalArgumentException} is thrown (typically).\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @author Colin Sampaleanu\n * @author Rob Harrop\n *\n * Code copied from Spring source. Modifications made (mostly removal of methods) by Per Wendel.\n */"}},"content":"\n * Assertion utility class that assists in validating arguments.\n * Useful for identifying programmer errors early and clearly at runtime.\n * <p>For example, if the contract of a public method states it does not\n * allow {@code null} arguments, Assert can be used to validate that\n * contract. Doing this clearly indicates a contract violation when it\n * occurs and protects the class's invariants.\n * <p>Typically used to validate method arguments rather than configuration\n * properties, to check for cases that are usually programmer errors rather than\n * configuration errors. In contrast to config initialization code, there is\n * usually no point in falling back to defaults in such methods.\n * <p>This class is similar to JUnit's assertion library. If an argument value is\n * deemed invalid, an {@link IllegalArgumentException} is thrown (typically).\n *\n * @author Keith Donald\n * @author Juergen Hoeller\n * @author Colin Sampaleanu\n * @author Rob Harrop\n *\n * Code copied from Spring source. Modifications made (mostly removal of methods) by Per Wendel.\n "}}],"comment":{"!":"com.github.javaparser.ast.comments.BlockComment","range":{"beginLine":1,"beginColumn":1,"endLine":15,"endColumn":3},"tokenRange":{"beginToken":{"kind":9,"text":"/*\n * Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */"},"endToken":{"kind":9,"text":"/*\n * Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */"}},"content":"\n * Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n "}}