{"!":"com.github.javaparser.ast.CompilationUnit","range":{"beginLine":1,"beginColumn":1,"endLine":53,"endColumn":2},"tokenRange":{"beginToken":{"kind":9,"text":"/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */"},"endToken":{"kind":0,"text":""}},"imports":[{"!":"com.github.javaparser.ast.ImportDeclaration","range":{"beginLine":19,"beginColumn":1,"endLine":19,"endColumn":27},"tokenRange":{"beginToken":{"kind":36,"text":"import"},"endToken":{"kind":106,"text":";"}},"isAsterisk":"false","isStatic":"false","name":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":19,"beginColumn":8,"endLine":19,"endColumn":26},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"IOException"}},"identifier":"IOException","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":19,"beginColumn":8,"endLine":19,"endColumn":14},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"io"}},"identifier":"io","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":19,"beginColumn":8,"endLine":19,"endColumn":11},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"java"}},"identifier":"java"}}}},{"!":"com.github.javaparser.ast.ImportDeclaration","range":{"beginLine":20,"beginColumn":1,"endLine":20,"endColumn":27},"tokenRange":{"beginToken":{"kind":36,"text":"import"},"endToken":{"kind":106,"text":";"}},"isAsterisk":"false","isStatic":"false","name":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":20,"beginColumn":8,"endLine":20,"endColumn":26},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"InputStream"}},"identifier":"InputStream","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":20,"beginColumn":8,"endLine":20,"endColumn":14},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"io"}},"identifier":"io","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":20,"beginColumn":8,"endLine":20,"endColumn":11},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"java"}},"identifier":"java"}}}}],"packageDeclaration":{"!":"com.github.javaparser.ast.PackageDeclaration","range":{"beginLine":17,"beginColumn":1,"endLine":17,"endColumn":23},"tokenRange":{"beginToken":{"kind":45,"text":"package"},"endToken":{"kind":106,"text":";"}},"annotations":[],"name":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":17,"beginColumn":9,"endLine":17,"endColumn":22},"tokenRange":{"beginToken":{"kind":97,"text":"spark"},"endToken":{"kind":97,"text":"resource"}},"identifier":"resource","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":17,"beginColumn":9,"endLine":17,"endColumn":13},"tokenRange":{"beginToken":{"kind":97,"text":"spark"},"endToken":{"kind":97,"text":"spark"}},"identifier":"spark"}}},"types":[{"!":"com.github.javaparser.ast.body.ClassOrInterfaceDeclaration","range":{"beginLine":38,"beginColumn":1,"endLine":53,"endColumn":1},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":103,"text":"}"}},"extendedTypes":[],"implementedTypes":[],"isInterface":"true","permittedTypes":[],"typeParameters":[],"members":[{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":51,"beginColumn":5,"endLine":51,"endColumn":52},"tokenRange":{"beginToken":{"kind":97,"text":"InputStream"},"endToken":{"kind":106,"text":";"}},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":51,"beginColumn":5,"endLine":51,"endColumn":15},"tokenRange":{"beginToken":{"kind":97,"text":"InputStream"},"endToken":{"kind":97,"text":"InputStream"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":51,"beginColumn":5,"endLine":51,"endColumn":15},"tokenRange":{"beginToken":{"kind":97,"text":"InputStream"},"endToken":{"kind":97,"text":"InputStream"}},"identifier":"InputStream"},"annotations":[]},"modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":51,"beginColumn":17,"endLine":51,"endColumn":30},"tokenRange":{"beginToken":{"kind":97,"text":"getInputStream"},"endToken":{"kind":97,"text":"getInputStream"}},"identifier":"getInputStream"},"parameters":[],"thrownExceptions":[{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":51,"beginColumn":41,"endLine":51,"endColumn":51},"tokenRange":{"beginToken":{"kind":97,"text":"IOException"},"endToken":{"kind":97,"text":"IOException"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":51,"beginColumn":41,"endLine":51,"endColumn":51},"tokenRange":{"beginToken":{"kind":97,"text":"IOException"},"endToken":{"kind":97,"text":"IOException"}},"identifier":"IOException"},"annotations":[]}],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":40,"beginColumn":5,"endLine":50,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * Return an {@link InputStream}.\n     * <p>It is expected that each call creates a <i>fresh</i> stream.\n     * <p>This requirement is particularly important when you consider an API such\n     * as JavaMail, which needs to be able to read the stream multiple times when\n     * creating mail attachments. For such a use case, it is <i>required</i>\n     * that each {@code getInputStream()} call returns a fresh stream.\n     *\n     * @return the input stream for the underlying resource (must not be {@code null})\n     * @throws IOException if the stream could not be opened\n     */"},"endToken":{"kind":8,"text":"/**\n     * Return an {@link InputStream}.\n     * <p>It is expected that each call creates a <i>fresh</i> stream.\n     * <p>This requirement is particularly important when you consider an API such\n     * as JavaMail, which needs to be able to read the stream multiple times when\n     * creating mail attachments. For such a use case, it is <i>required</i>\n     * that each {@code getInputStream()} call returns a fresh stream.\n     *\n     * @return the input stream for the underlying resource (must not be {@code null})\n     * @throws IOException if the stream could not be opened\n     */"}},"content":"\n     * Return an {@link InputStream}.\n     * <p>It is expected that each call creates a <i>fresh</i> stream.\n     * <p>This requirement is particularly important when you consider an API such\n     * as JavaMail, which needs to be able to read the stream multiple times when\n     * creating mail attachments. For such a use case, it is <i>required</i>\n     * that each {@code getInputStream()} call returns a fresh stream.\n     *\n     * @return the input stream for the underlying resource (must not be {@code null})\n     * @throws IOException if the stream could not be opened\n     "}}],"modifiers":[{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":38,"beginColumn":1,"endLine":38,"endColumn":6},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":49,"text":"public"}},"keyword":"PUBLIC"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":38,"beginColumn":18,"endLine":38,"endColumn":36},"tokenRange":{"beginToken":{"kind":97,"text":"InputStreamResource"},"endToken":{"kind":97,"text":"InputStreamResource"}},"identifier":"InputStreamResource"},"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":22,"beginColumn":1,"endLine":37,"endColumn":3},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n * Simple interface for objects that are sources for an {@link InputStream}.\n * <p>This is the base interface for Spring's more extensive {@link Resource} interface.\n * <p>For single-use streams, {@link InputStreamResource} can be used for any\n * given {@code InputStream}. Spring's ByteArrayResource or any\n * file-based {@code Resource} implementation can be used as a concrete\n * instance, allowing one to read the underlying content stream multiple times.\n * This makes this interface useful as an abstract content source for mail\n * attachments, for example.\n *\n * @author Juergen Hoeller\n * @see java.io.InputStream\n * @see Resource\n * @see InputStreamResource\n * Code copied from Spring source. Modifications made (mostly removal of methods) by Per Wendel.\n */"},"endToken":{"kind":8,"text":"/**\n * Simple interface for objects that are sources for an {@link InputStream}.\n * <p>This is the base interface for Spring's more extensive {@link Resource} interface.\n * <p>For single-use streams, {@link InputStreamResource} can be used for any\n * given {@code InputStream}. Spring's ByteArrayResource or any\n * file-based {@code Resource} implementation can be used as a concrete\n * instance, allowing one to read the underlying content stream multiple times.\n * This makes this interface useful as an abstract content source for mail\n * attachments, for example.\n *\n * @author Juergen Hoeller\n * @see java.io.InputStream\n * @see Resource\n * @see InputStreamResource\n * Code copied from Spring source. Modifications made (mostly removal of methods) by Per Wendel.\n */"}},"content":"\n * Simple interface for objects that are sources for an {@link InputStream}.\n * <p>This is the base interface for Spring's more extensive {@link Resource} interface.\n * <p>For single-use streams, {@link InputStreamResource} can be used for any\n * given {@code InputStream}. Spring's ByteArrayResource or any\n * file-based {@code Resource} implementation can be used as a concrete\n * instance, allowing one to read the underlying content stream multiple times.\n * This makes this interface useful as an abstract content source for mail\n * attachments, for example.\n *\n * @author Juergen Hoeller\n * @see java.io.InputStream\n * @see Resource\n * @see InputStreamResource\n * Code copied from Spring source. Modifications made (mostly removal of methods) by Per Wendel.\n "}}],"comment":{"!":"com.github.javaparser.ast.comments.BlockComment","range":{"beginLine":1,"beginColumn":1,"endLine":15,"endColumn":3},"tokenRange":{"beginToken":{"kind":9,"text":"/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */"},"endToken":{"kind":9,"text":"/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */"}},"content":"\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n "}}