{"Application/spark-master/src/test/java/spark/GenericIntegrationTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["67","80","82","95","96","97","98","111","112","126","127","140","141"],"fullExpression":"assertTrue(Integer.valueOf(response.body) > 0)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.URIUtil","methodName":"encodePath","lineNumber":["333"],"fullExpression":"URIUtil.encodePath(polyglot)","methodSignature":"encodePath(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"stop","lineNumber":["67"],"fullExpression":"server.stop()","methodSignature":"stop()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["507"],"fullExpression":"Assert.assertEquals(3, events.size(), 3)","methodSignature":"assertEquals(float, float, float)","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"start","lineNumber":["63"],"fullExpression":"server.start()","methodSignature":"start()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["41","55"],"fullExpression":"assertEquals(\"session cannot be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/StaticFilesMemberTest.java":[{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["63"],"fullExpression":"LOGGER.debug(\"tearDown(). Deleting tmp files\")","methodSignature":"debug(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["41","55"],"fullExpression":"assertEquals(\"session cannot be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/examples/templateview/FreeMarkerTemplateEngine.java":[{"declaringType":"freemarker.template.Configuration","methodName":"setClassForTemplateLoading","lineNumber":["38"],"fullExpression":"retVal.setClassForTemplateLoading(FreeMarkerTemplateEngine.class, \"freemarker\")","methodSignature":"setClassForTemplateLoading(java.lang.Class, java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/embeddedserver/jetty/SocketConnectorFactoryTest.java":[{"declaringType":"org.eclipse.jetty.util.ssl.SslContextFactory","methodName":"getKeyStoreResource","lineNumber":["133"],"fullExpression":"sslContextFactory.getKeyStoreResource()","methodSignature":"getKeyStoreResource()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["36"],"fullExpression":"assertTrue(\"Should be true because it flag has been set after runFromServlet\", isRunningFromServlet.get())","methodSignature":"assertTrue(java.lang.String, boolean)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.ssl.SslContextFactory","methodName":"getTrustStoreResource","lineNumber":["136"],"fullExpression":"sslContextFactory.getTrustStoreResource()","methodSignature":"getTrustStoreResource()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["123","140","169","179","188","189","190","199","200","201"],"fullExpression":"assertEquals(\"Port should be set to the Port that was specified\", 8080, port)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.SslConnectionFactory","methodName":"getSslContextFactory","lineNumber":["130"],"fullExpression":"sslConnectionFactory.getSslContextFactory()","methodSignature":"getSslContextFactory()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["63"],"fullExpression":"assertEquals(\"Internal session should be set to the http session provided during instantiation\", httpSession, internalSession)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.powermock.reflect.Whitebox","methodName":"getInternalState","lineNumber":["18","19","20","33","34","35"],"fullExpression":"Whitebox.getInternalState(threadPool, \"_minThreads\")","methodSignature":"getInternalState(java.lang.Object, java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.resource.Resource","methodName":"getFile","lineNumber":["133","136"],"fullExpression":"sslContextFactory.getKeyStoreResource().getFile()","methodSignature":"getFile()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["41","55"],"fullExpression":"assertEquals(\"session cannot be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["37","51"],"fullExpression":"fail(\"Session instantiation with a null HttpSession should throw an IllegalArgumentException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/CookiesIntegrationTest.java":[{"declaringType":"org.apache.http.client.methods.HttpRequestBase","methodName":"releaseConnection","lineNumber":["132"],"fullExpression":"request.releaseConnection()","methodSignature":"releaseConnection()","declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodName":"build","lineNumber":["52","86"],"fullExpression":"httpClientBuilder().build()","methodSignature":"build()","declarationInfo":null},{"declaringType":"org.apache.http.client.HttpClient","methodName":"execute","lineNumber":["120"],"fullExpression":"httpClient.execute(httpRequest)","methodSignature":"execute(org.apache.http.client.methods.HttpUriRequest)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["68","81","94","110","125","139"],"fullExpression":"assertEquals(201, response.status)","methodSignature":"assertEquals(long, long)","declarationInfo":null},{"declaringType":"org.apache.http.StatusLine","methodName":"getStatusCode","lineNumber":["78","123"],"fullExpression":"response.getStatusLine().getStatusCode()","methodSignature":"getStatusCode()","declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodName":"create","lineNumber":["64"],"fullExpression":"HttpClientBuilder.create()","methodSignature":"create()","declarationInfo":null},{"declaringType":"org.apache.http.HttpResponse","methodName":"getStatusLine","lineNumber":["78","123"],"fullExpression":"response.getStatusLine()","methodSignature":"getStatusLine()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["37","51"],"fullExpression":"fail(\"Session instantiation with a null HttpSession should throw an IllegalArgumentException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/CustomErrorPages.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"warn","lineNumber":["29"],"fullExpression":"LOG.warn(\"Registering external static files folder [{}] as [{}].\", folder, unixLikeFolder)","methodSignature":"warn(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/ServiceTest.java":[{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["26"],"fullExpression":"thrown.expect(FileNotFoundException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"none","lineNumber":["20"],"fullExpression":"ExpectedException.none()","methodSignature":"none()","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["27"],"fullExpression":"thrown.expectMessage(\"My File Path cannot be resolved to absolute file path \" + \"because it does not reside in the file system: http://example.com/\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["123","140","169","179","188","189","190","199","200","201"],"fullExpression":"assertEquals(\"Port should be set to the Port that was specified\", 8080, port)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["63"],"fullExpression":"assertEquals(\"Internal session should be set to the http session provided during instantiation\", httpSession, internalSession)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/http/matching/GeneralError.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["292"],"fullExpression":"LOG.error(\"The @Route value: \" + route + \" is not in the correct format\", e)","methodSignature":"error(java.lang.String, java.lang.Throwable)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/Service.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["58"],"fullExpression":"LoggerFactory.getLogger(\"spark.Spark\")","methodSignature":"getLogger(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["62","66"],"fullExpression":"LOGGER.info(\">>> STARTING EMBEDDED JETTY SERVER for jUnit testing of SparkFilter\")","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"warn","lineNumber":["346","366","531"],"fullExpression":"LOG.warn(\"Static file location has already been set\")","methodSignature":"warn(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["292"],"fullExpression":"LOG.error(\"The @Route value: \" + route + \" is not in the correct format\", e)","methodSignature":"error(java.lang.String, java.lang.Throwable)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/embeddedserver/jetty/JettyHandler.java":[{"declaringType":"org.eclipse.jetty.server.Request","methodName":"setHandled","lineNumber":["53","55"],"fullExpression":"baseRequest.setHandled(false)","methodSignature":"setHandled(boolean)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/MultipleFiltersTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["68","81","94","110","125","139"],"fullExpression":"assertEquals(201, response.status)","methodSignature":"assertEquals(long, long)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/examples/websocket/PingWebSocket.java":[{"declaringType":"org.eclipse.jetty.websocket.api.RemoteEndpoint","methodName":"sendString","lineNumber":["45"],"fullExpression":"session.getRemote().sendString(\"PONG\")","methodSignature":"sendString(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.api.Session","methodName":"getRemote","lineNumber":["45"],"fullExpression":"session.getRemote()","methodSignature":"getRemote()","declarationInfo":null}],"Application/spark-master/src/test/java/spark/globalstate/ServletFlagTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertFalse","lineNumber":["27"],"fullExpression":"assertFalse(\"Should be false because it is the default value\", isRunningFromServlet.get())","methodSignature":"assertFalse(java.lang.String, boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["36"],"fullExpression":"assertTrue(\"Should be true because it flag has been set after runFromServlet\", isRunningFromServlet.get())","methodSignature":"assertTrue(java.lang.String, boolean)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/GzipTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["41","55"],"fullExpression":"assertEquals(\"session cannot be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/examples/transformer/JsonTransformer.java":[{"declaringType":"com.google.gson.Gson","methodName":"toJson","lineNumber":["13"],"fullExpression":"gson.toJson(model)","methodSignature":"toJson(java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/route/Routes.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["292"],"fullExpression":"LOG.error(\"The @Route value: \" + route + \" is not in the correct format\", e)","methodSignature":"error(java.lang.String, java.lang.Throwable)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["283"],"fullExpression":"LOG.error(\"The @Route value: \" + route + \" has an invalid HTTP method part: \" + httpMethod + \".\")","methodSignature":"error(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/embeddedserver/jetty/websocket/WebSocketCreatorFactoryTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["67","80","82","95","96","97","98","111","112","126","127","140","141"],"fullExpression":"assertTrue(Integer.valueOf(response.body) > 0)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["41","55"],"fullExpression":"assertEquals(\"session cannot be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["37","51"],"fullExpression":"fail(\"Session instantiation with a null HttpSession should throw an IllegalArgumentException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/RouteImplTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["55","91"],"fullExpression":"assertNotNull(\"Should return a WebSocketUpgradeFilter because we configured it to have one\", webSocketUpgradeFilter)","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["63"],"fullExpression":"assertEquals(\"Internal session should be set to the http session provided during instantiation\", httpSession, internalSession)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"junit.framework.TestCase","methodName":"assertNull","lineNumber":["61"],"fullExpression":"assertNull(\"Should return null because the element from render is null\", value)","methodSignature":"assertNull(java.lang.String, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/RequestTest.java":[{"declaringType":"org.mockito.Mockito","methodName":"times","lineNumber":["184","195","207","218"],"fullExpression":"times(2)","methodSignature":"times(int)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["36"],"fullExpression":"assertTrue(\"Should be true because it flag has been set after runFromServlet\", isRunningFromServlet.get())","methodSignature":"assertTrue(java.lang.String, boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertArrayEquals","lineNumber":["479"],"fullExpression":"assertArrayEquals(\"Should return the query parameter names\", params.keySet().toArray(), result.toArray())","methodSignature":"assertArrayEquals(java.lang.String, java.lang.Object[], java.lang.Object[])","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["77","96","104","112","120","128","152"],"fullExpression":"when(httpSession.getAttribute(\"name\")).thenReturn(\"Jett\")","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["184","195","207","218"],"fullExpression":"verify(servletRequest, times(2))","methodSignature":"verify(T, org.mockito.verification.VerificationMode)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["77","96","104","112","120","128","152"],"fullExpression":"when(httpSession.getAttribute(\"name\"))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["63"],"fullExpression":"assertEquals(\"Internal session should be set to the http session provided during instantiation\", httpSession, internalSession)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"mock","lineNumber":["26"],"fullExpression":"mock(HttpSession.class)","methodSignature":"mock(java.lang.Class<T>)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/QueryParamsMapTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertNull","lineNumber":["94"],"fullExpression":"assertNull(ret)","methodSignature":"assertNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["68","81","94","110","125","139"],"fullExpression":"assertEquals(201, response.status)","methodSignature":"assertEquals(long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["41","55"],"fullExpression":"assertEquals(\"session cannot be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/Request.java":[{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["63"],"fullExpression":"LOGGER.debug(\"tearDown(). Deleting tmp files\")","methodSignature":"debug(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"warn","lineNumber":["125","145"],"fullExpression":"LOG.warn(\"Redirect failure\", ioException)","methodSignature":"warn(java.lang.String, java.lang.Throwable)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/examples/websocket/EchoWebSocket.java":[{"declaringType":"org.eclipse.jetty.websocket.api.RemoteEndpoint","methodName":"sendString","lineNumber":["45"],"fullExpression":"session.getRemote().sendString(\"PONG\")","methodSignature":"sendString(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.api.Session","methodName":"getRemote","lineNumber":["45"],"fullExpression":"session.getRemote()","methodSignature":"getRemote()","declarationInfo":null}],"Application/spark-master/src/test/java/spark/ServicePortIntegrationTest.java":[{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["62","66"],"fullExpression":"LOGGER.info(\">>> STARTING EMBEDDED JETTY SERVER for jUnit testing of SparkFilter\")","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/servlet/SparkFilter.java":[{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["63"],"fullExpression":"LOGGER.debug(\"tearDown(). Deleting tmp files\")","methodSignature":"debug(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"isDebugEnabled","lineNumber":["151"],"fullExpression":"LOG.isDebugEnabled()","methodSignature":"isDebugEnabled()","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/Response.java":[{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["137"],"fullExpression":"LOG.debug(\"Redirecting ({} to {}\", httpStatusCode, location)","methodSignature":"debug(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"isDebugEnabled","lineNumber":["151"],"fullExpression":"LOG.isDebugEnabled()","methodSignature":"isDebugEnabled()","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["120"],"fullExpression":"LOG.debug(\"Redirecting ({} {} to {}\", \"Found\", HttpServletResponse.SC_FOUND, location)","methodSignature":"debug(java.lang.String, java.lang.Object...)","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"warn","lineNumber":["125","145"],"fullExpression":"LOG.warn(\"Redirect failure\", ioException)","methodSignature":"warn(java.lang.String, java.lang.Throwable)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/ResponseTest.java":[{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["88","138","146","162"],"fullExpression":"verify(httpSession)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"times","lineNumber":["184","195","207","218"],"fullExpression":"times(2)","methodSignature":"times(int)","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"forClass","lineNumber":["27"],"fullExpression":"ArgumentCaptor.forClass(Cookie.class)","methodSignature":"forClass(java.lang.Class<T>)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["123","140","169","179","188","189","190","199","200","201"],"fullExpression":"assertEquals(\"Port should be set to the Port that was specified\", 8080, port)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["184","195","207","218"],"fullExpression":"verify(servletRequest, times(2))","methodSignature":"verify(T, org.mockito.verification.VerificationMode)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["63"],"fullExpression":"assertEquals(\"Internal session should be set to the http session provided during instantiation\", httpSession, internalSession)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertSame","lineNumber":["33","85"],"fullExpression":"assertSame(\"Should be the same the HttpServletResponse object for httpServletResponse and returnResponse\", httpServletResponse, returnResponse)","methodSignature":"assertSame(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"capture","lineNumber":["152","169","185","201","217","233","249","265"],"fullExpression":"cookieArgumentCaptor.capture()","methodSignature":"capture()","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"mock","lineNumber":["26"],"fullExpression":"mock(HttpSession.class)","methodSignature":"mock(java.lang.Class<T>)","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"getValue","lineNumber":["153","170","186","202","218","234","250","267","268"],"fullExpression":"cookieArgumentCaptor.getValue()","methodSignature":"getValue()","declarationInfo":null}],"Application/spark-master/src/test/java/spark/BodyAvailabilityTest.java":[{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["63"],"fullExpression":"LOGGER.debug(\"tearDown(). Deleting tmp files\")","methodSignature":"debug(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["41","55"],"fullExpression":"assertEquals(\"session cannot be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/util/ResourceUtilsTest.java":[{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["26"],"fullExpression":"thrown.expect(FileNotFoundException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"none","lineNumber":["20"],"fullExpression":"ExpectedException.none()","methodSignature":"none()","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["27"],"fullExpression":"thrown.expectMessage(\"My File Path cannot be resolved to absolute file path \" + \"because it does not reside in the file system: http://example.com/\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["63"],"fullExpression":"assertEquals(\"Internal session should be set to the http session provided during instantiation\", httpSession, internalSession)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/util/SparkTestUtil.java":[{"declaringType":"org.apache.http.client.methods.HttpRequestBase","methodName":"setURI","lineNumber":["321"],"fullExpression":"setURI(URI.create(uri))","methodSignature":"setURI(java.net.URI)","declarationInfo":null},{"declaringType":"org.apache.http.NameValuePair","methodName":"getName","lineNumber":["133"],"fullExpression":"header.getName()","methodSignature":"getName()","declarationInfo":null},{"declaringType":"org.apache.http.message.AbstractHttpMessage","methodName":"setHeader","lineNumber":["147","154","162","171","177"],"fullExpression":"httpGet.setHeader(\"Accept\", acceptType)","methodSignature":"setHeader(java.lang.String, java.lang.String)","declarationInfo":null},{"declaringType":"org.apache.http.HttpResponse","methodName":"getEntity","lineNumber":["124"],"fullExpression":"httpResponse.getEntity()","methodSignature":"getEntity()","declarationInfo":null},{"declaringType":"org.apache.http.NameValuePair","methodName":"getValue","lineNumber":["133"],"fullExpression":"header.getValue()","methodSignature":"getValue()","declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodName":"setConnectionManager","lineNumber":["64"],"fullExpression":"HttpClientBuilder.create().setConnectionManager(connManager)","methodSignature":"setConnectionManager(org.apache.http.conn.HttpClientConnectionManager)","declarationInfo":null},{"declaringType":"org.apache.http.client.methods.HttpEntityEnclosingRequestBase","methodName":"setEntity","lineNumber":["156","164","179"],"fullExpression":"httpPost.setEntity(new StringEntity(body))","methodSignature":"setEntity(org.apache.http.HttpEntity)","declarationInfo":null},{"declaringType":"org.apache.http.impl.client.DefaultRedirectStrategy","methodName":"isRedirected","lineNumber":["73"],"fullExpression":"super.isRedirected(request, response, context)","methodSignature":"isRedirected(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)","declarationInfo":null},{"declaringType":"org.apache.http.StatusLine","methodName":"getStatusCode","lineNumber":["78","123"],"fullExpression":"response.getStatusLine().getStatusCode()","methodSignature":"getStatusCode()","declarationInfo":null},{"declaringType":"org.apache.http.HttpMessage","methodName":"getAllHeaders","lineNumber":["131"],"fullExpression":"httpResponse.getAllHeaders()","methodSignature":"getAllHeaders()","declarationInfo":null},{"declaringType":"org.apache.http.HttpResponse","methodName":"getStatusLine","lineNumber":["78","123"],"fullExpression":"response.getStatusLine()","methodSignature":"getStatusLine()","declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodName":"setRedirectStrategy","lineNumber":["86"],"fullExpression":"httpClientBuilder().setRedirectStrategy(redirectStrategy)","methodSignature":"setRedirectStrategy(org.apache.http.client.RedirectStrategy)","declarationInfo":null},{"declaringType":"org.apache.http.config.RegistryBuilder","methodName":"build","lineNumber":["58"],"fullExpression":"RegistryBuilder.<ConnectionSocketFactory>create().register(\"http\", PlainConnectionSocketFactory.INSTANCE).register(\"https\", sslConnectionSocketFactory).build()","methodSignature":"build()","declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodName":"build","lineNumber":["52","86"],"fullExpression":"httpClientBuilder().build()","methodSignature":"build()","declarationInfo":null},{"declaringType":"org.apache.http.HttpMessage","methodName":"addHeader","lineNumber":["217"],"fullExpression":"req.addHeader(header.getKey(), header.getValue())","methodSignature":"addHeader(java.lang.String, java.lang.String)","declarationInfo":null},{"declaringType":"org.apache.http.config.RegistryBuilder","methodName":"register","lineNumber":["58","58"],"fullExpression":"RegistryBuilder.<ConnectionSocketFactory>create().register(\"http\", PlainConnectionSocketFactory.INSTANCE).register(\"https\", sslConnectionSocketFactory)","methodSignature":"register(java.lang.String, I)","declarationInfo":null},{"declaringType":"org.apache.http.util.EntityUtils","methodName":"toString","lineNumber":["126"],"fullExpression":"EntityUtils.toString(entity)","methodSignature":"toString(org.apache.http.HttpEntity)","declarationInfo":null},{"declaringType":"org.apache.http.config.RegistryBuilder","methodName":"create","lineNumber":["58"],"fullExpression":"RegistryBuilder.<ConnectionSocketFactory>create()","methodSignature":"create()","declarationInfo":null},{"declaringType":"org.apache.http.client.HttpClient","methodName":"execute","lineNumber":["120"],"fullExpression":"httpClient.execute(httpRequest)","methodSignature":"execute(org.apache.http.client.methods.HttpUriRequest)","declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodName":"create","lineNumber":["64"],"fullExpression":"HttpClientBuilder.create()","methodSignature":"create()","declarationInfo":null}],"Application/spark-master/src/test/java/spark/embeddedserver/jetty/websocket/WebSocketServletContextHandlerFactoryTest.java":[{"declaringType":"org.eclipse.jetty.server.handler.ContextHandler","methodName":"getServletContext","lineNumber":["50","86"],"fullExpression":"servletContextHandler.getServletContext()","methodSignature":"getServletContext()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.NativeWebSocketConfiguration","methodName":"getFactory","lineNumber":["96"],"fullExpression":"webSocketConfiguration.getFactory()","methodSignature":"getFactory()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.http.pathmap.MappedResource","methodName":"getPathSpec","lineNumber":["61","101"],"fullExpression":"mappedResource.getPathSpec()","methodSignature":"getPathSpec()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.http.pathmap.PathSpec","methodName":"getDeclaration","lineNumber":["64","104"],"fullExpression":"pathSpec.getDeclaration()","methodSignature":"getDeclaration()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["63"],"fullExpression":"assertEquals(\"Internal session should be set to the http session provided during instantiation\", httpSession, internalSession)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.powermock.api.mockito.PowerMockito","methodName":"whenNew","lineNumber":["119"],"fullExpression":"PowerMockito.whenNew(ServletContextHandler.class)","methodSignature":"whenNew(java.lang.Class<T>)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.WebSocketServerFactory","methodName":"getPolicy","lineNumber":["98"],"fullExpression":"webSocketServerFactory.getPolicy()","methodSignature":"getPolicy()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.NativeWebSocketConfiguration","methodName":"getMatch","lineNumber":["60","100"],"fullExpression":"webSocketConfiguration.getMatch(\"/websocket\")","methodSignature":"getMatch(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["55","91"],"fullExpression":"assertNotNull(\"Should return a WebSocketUpgradeFilter because we configured it to have one\", webSocketUpgradeFilter)","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.api.WebSocketPolicy","methodName":"getIdleTimeout","lineNumber":["98"],"fullExpression":"webSocketServerFactory.getPolicy().getIdleTimeout()","methodSignature":"getIdleTimeout()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["123","140","169","179","188","189","190","199","200","201"],"fullExpression":"assertEquals(\"Port should be set to the Port that was specified\", 8080, port)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNull","lineNumber":["37","127"],"fullExpression":"assertNull(\"Should return null because no WebSocket Handlers were passed\", servletContextHandler)","methodSignature":"assertNull(java.lang.String, java.lang.Object)","declarationInfo":null},{"declaringType":"org.powermock.api.mockito.expectation.WithAnyArguments","methodName":"withAnyArguments","lineNumber":["119"],"fullExpression":"PowerMockito.whenNew(ServletContextHandler.class).withAnyArguments()","methodSignature":"withAnyArguments()","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenThrow","lineNumber":["119"],"fullExpression":"PowerMockito.whenNew(ServletContextHandler.class).withAnyArguments().thenThrow(new Exception(\"\"))","methodSignature":"thenThrow(java.lang.Throwable...)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/SessionTest.java":[{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["88","138","146","162"],"fullExpression":"verify(httpSession)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["77","96","104","112","120","128","152"],"fullExpression":"when(httpSession.getAttribute(\"name\")).thenReturn(\"Jett\")","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["77","96","104","112","120","128","152"],"fullExpression":"when(httpSession.getAttribute(\"name\"))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["63"],"fullExpression":"assertEquals(\"Internal session should be set to the http session provided during instantiation\", httpSession, internalSession)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["41","55"],"fullExpression":"assertEquals(\"session cannot be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"mock","lineNumber":["26"],"fullExpression":"mock(HttpSession.class)","methodSignature":"mock(java.lang.Class<T>)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["37","51"],"fullExpression":"fail(\"Session instantiation with a null HttpSession should throw an IllegalArgumentException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/staticfiles/StaticFilesTestExternal.java":[{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["63"],"fullExpression":"LOGGER.debug(\"tearDown(). Deleting tmp files\")","methodSignature":"debug(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/examples/filter/FilterExampleAttributes.java":[{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["62","66"],"fullExpression":"LOGGER.info(\">>> STARTING EMBEDDED JETTY SERVER for jUnit testing of SparkFilter\")","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/embeddedserver/jetty/JettyServerTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["123","140","169","179","188","189","190","199","200","201"],"fullExpression":"assertEquals(\"Port should be set to the Port that was specified\", 8080, port)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"getThreadPool","lineNumber":["16","31"],"fullExpression":"server.getThreadPool()","methodSignature":"getThreadPool()","declarationInfo":null},{"declaringType":"org.powermock.reflect.Whitebox","methodName":"getInternalState","lineNumber":["18","19","20","33","34","35"],"fullExpression":"Whitebox.getInternalState(threadPool, \"_minThreads\")","methodSignature":"getInternalState(java.lang.Object, java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["41","55"],"fullExpression":"assertEquals(\"session cannot be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["37","51"],"fullExpression":"fail(\"Session instantiation with a null HttpSession should throw an IllegalArgumentException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/staticfiles/StaticFilesFolder.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"warn","lineNumber":["29"],"fullExpression":"LOG.warn(\"Registering external static files folder [{}] as [{}].\", folder, unixLikeFolder)","methodSignature":"warn(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/staticfiles/StaticFilesTest.java":[{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["63"],"fullExpression":"LOGGER.debug(\"tearDown(). Deleting tmp files\")","methodSignature":"debug(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/utils/SparkUtilsTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertThat","lineNumber":["20"],"fullExpression":"assertThat(\"Should return route as a list of individual elements that path is made of\", actual, is(expected))","methodSignature":"assertThat(java.lang.String, T, org.hamcrest.Matcher<? super T>)","declarationInfo":null},{"declaringType":"org.hamcrest.CoreMatchers","methodName":"is","lineNumber":["22"],"fullExpression":"is(expected)","methodSignature":"is(T)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/ResponseBodyTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["41","55"],"fullExpression":"assertEquals(\"session cannot be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/serialization/InputStreamSerializerTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["36"],"fullExpression":"assertTrue(\"Should be true because it flag has been set after runFromServlet\", isRunningFromServlet.get())","methodSignature":"assertTrue(java.lang.String, boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertArrayEquals","lineNumber":["20"],"fullExpression":"Assert.assertArrayEquals(bytes, output.toByteArray())","methodSignature":"assertArrayEquals(byte[], byte[])","declarationInfo":null}],"Application/spark-master/src/test/java/spark/StaticFilesFromArchiveTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["41","55"],"fullExpression":"assertEquals(\"session cannot be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/BooksIntegrationTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["65","66","77","79","92","93","108","109","123","124","137","138"],"fullExpression":"assertNotNull(response)","methodSignature":"assertNotNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["67","80","82","95","96","97","98","111","112","126","127","140","141"],"fullExpression":"assertTrue(Integer.valueOf(response.body) > 0)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["68","81","94","110","125","139"],"fullExpression":"assertEquals(201, response.status)","methodSignature":"assertEquals(long, long)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/embeddedserver/jetty/SocketConnectorFactory.java":[{"declaringType":"org.eclipse.jetty.server.AbstractConnector","methodName":"setIdleTimeout","lineNumber":["45"],"fullExpression":"connector.setIdleTimeout(1000 * 60 * 60)","methodSignature":"setIdleTimeout(long)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.ssl.SslContextFactory.Server","methodName":"setNeedClientAuth","lineNumber":["93"],"fullExpression":"sslContextFactory.setNeedClientAuth(true)","methodSignature":"setNeedClientAuth(boolean)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.AbstractNetworkConnector","methodName":"setPort","lineNumber":["47"],"fullExpression":"connector.setPort(PORT)","methodSignature":"setPort(int)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.HttpConfiguration","methodName":"setSecureScheme","lineNumber":["113"],"fullExpression":"httpConfig.setSecureScheme(\"https\")","methodSignature":"setSecureScheme(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.HttpConfiguration","methodName":"addCustomizer","lineNumber":["115"],"fullExpression":"httpConfig.addCustomizer(new ForwardedRequestCustomizer())","methodSignature":"addCustomizer(org.eclipse.jetty.server.HttpConfiguration.Customizer)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.ssl.SslContextFactory.Server","methodName":"setWantClientAuth","lineNumber":["94"],"fullExpression":"sslContextFactory.setWantClientAuth(true)","methodSignature":"setWantClientAuth(boolean)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.AbstractNetworkConnector","methodName":"setHost","lineNumber":["107"],"fullExpression":"connector.setHost(host)","methodSignature":"setHost(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/staticfiles/DisableMimeGuessingTest.java":[{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["63"],"fullExpression":"LOGGER.debug(\"tearDown(). Deleting tmp files\")","methodSignature":"debug(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/embeddedserver/jetty/EmbeddedJettyServer.java":[{"declaringType":"org.eclipse.jetty.util.thread.ThreadPool","methodName":"getThreads","lineNumber":["188"],"fullExpression":"server.getThreadPool().getThreads()","methodSignature":"getThreads()","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["62","66"],"fullExpression":"LOGGER.info(\">>> STARTING EMBEDDED JETTY SERVER for jUnit testing of SparkFilter\")","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.HandlerCollection","methodName":"setHandlers","lineNumber":["143"],"fullExpression":"handlers.setHandlers(handlersInList.toArray(new Handler[handlersInList.size()]))","methodSignature":"setHandlers(org.eclipse.jetty.server.Handler[])","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"stop","lineNumber":["67"],"fullExpression":"server.stop()","methodSignature":"stop()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"setConnectors","lineNumber":["48"],"fullExpression":"server.setConnectors(new Connector[] { connector })","methodSignature":"setConnectors(org.eclipse.jetty.server.Connector[])","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["292"],"fullExpression":"LOG.error(\"The @Route value: \" + route + \" is not in the correct format\", e)","methodSignature":"error(java.lang.String, java.lang.Throwable)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"getThreadPool","lineNumber":["16","31"],"fullExpression":"server.getThreadPool()","methodSignature":"getThreadPool()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.AbstractConnector","methodName":"getServer","lineNumber":["119"],"fullExpression":"connector.getServer()","methodSignature":"getServer()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"start","lineNumber":["63"],"fullExpression":"server.start()","methodSignature":"start()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.thread.ThreadPool","methodName":"getIdleThreads","lineNumber":["188"],"fullExpression":"server.getThreadPool().getIdleThreads()","methodSignature":"getIdleThreads()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"getConnectors","lineNumber":["118"],"fullExpression":"server.getConnectors()","methodSignature":"getConnectors()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"join","lineNumber":["68"],"fullExpression":"server.join()","methodSignature":"join()","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["151"],"fullExpression":"logger.info(\">> Listening on {}:{}\", host, port)","methodSignature":"info(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["98"],"fullExpression":"logger.error(\"Could not get first available port (port set to 0), using default: {}\", SPARK_DEFAULT_PORT)","methodSignature":"error(java.lang.String, java.lang.Object)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.HandlerWrapper","methodName":"setHandler","lineNumber":["55"],"fullExpression":"server.setHandler(bb)","methodSignature":"setHandler(org.eclipse.jetty.server.Handler)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["147","171"],"fullExpression":"logger.info(\"== {} has ignited ...\", NAME)","methodSignature":"info(java.lang.String, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/staticfiles/StaticFilesConfiguration.java":[{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["62","66"],"fullExpression":"LOGGER.info(\">>> STARTING EMBEDDED JETTY SERVER for jUnit testing of SparkFilter\")","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["292"],"fullExpression":"LOG.error(\"The @Route value: \" + route + \" is not in the correct format\", e)","methodSignature":"error(java.lang.String, java.lang.Throwable)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["283"],"fullExpression":"LOG.error(\"The @Route value: \" + route + \" has an invalid HTTP method part: \" + httpMethod + \".\")","methodSignature":"error(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/embeddedserver/jetty/EmbeddedJettyFactoryTest.java":[{"declaringType":"org.mockito.Mockito","methodName":"times","lineNumber":["184","195","207","218"],"fullExpression":"times(2)","methodSignature":"times(int)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.HandlerWrapper","methodName":"getHandler","lineNumber":["43","99"],"fullExpression":"server.getHandler()","methodSignature":"getHandler()","declarationInfo":null}],"Application/spark-master/src/test/java/spark/InitExceptionHandlerTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["41","55"],"fullExpression":"assertEquals(\"session cannot be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/servlet/ServletTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["67","80","82","95","96","97","98","111","112","126","127","140","141"],"fullExpression":"assertTrue(Integer.valueOf(response.body) > 0)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.AbstractConnector","methodName":"setIdleTimeout","lineNumber":["45"],"fullExpression":"connector.setIdleTimeout(1000 * 60 * 60)","methodSignature":"setIdleTimeout(long)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["62","66"],"fullExpression":"LOGGER.info(\">>> STARTING EMBEDDED JETTY SERVER for jUnit testing of SparkFilter\")","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"stop","lineNumber":["67"],"fullExpression":"server.stop()","methodSignature":"stop()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"setConnectors","lineNumber":["48"],"fullExpression":"server.setConnectors(new Connector[] { connector })","methodSignature":"setConnectors(org.eclipse.jetty.server.Connector[])","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"start","lineNumber":["63"],"fullExpression":"server.start()","methodSignature":"start()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.webapp.WebAppContext","methodName":"setWar","lineNumber":["53"],"fullExpression":"bb.setWar(\"src/test/webapp\")","methodSignature":"setWar(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.webapp.WebAppContext","methodName":"setServer","lineNumber":["51"],"fullExpression":"bb.setServer(server)","methodSignature":"setServer(org.eclipse.jetty.server.Server)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.AbstractNetworkConnector","methodName":"setPort","lineNumber":["47"],"fullExpression":"connector.setPort(PORT)","methodSignature":"setPort(int)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"join","lineNumber":["68"],"fullExpression":"server.join()","methodSignature":"join()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.ServerConnector","methodName":"setSoLingerTime","lineNumber":["46"],"fullExpression":"connector.setSoLingerTime(-1)","methodSignature":"setSoLingerTime(int)","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.HandlerWrapper","methodName":"setHandler","lineNumber":["55"],"fullExpression":"server.setHandler(bb)","methodSignature":"setHandler(org.eclipse.jetty.server.Handler)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.ContextHandler","methodName":"setContextPath","lineNumber":["52"],"fullExpression":"bb.setContextPath(SOMEPATH)","methodSignature":"setContextPath(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/embeddedserver/jetty/websocket/WebSocketServletContextHandlerFactory.java":[{"declaringType":"org.eclipse.jetty.websocket.servlet.WebSocketServletFactory","methodName":"getPolicy","lineNumber":["52"],"fullExpression":"webSocketUpgradeFilter.getFactory().getPolicy()","methodSignature":"getPolicy()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter","methodName":"getFactory","lineNumber":["52"],"fullExpression":"webSocketUpgradeFilter.getFactory()","methodSignature":"getFactory()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.ContextHandler","methodName":"getServletContext","lineNumber":["50","86"],"fullExpression":"servletContextHandler.getServletContext()","methodSignature":"getServletContext()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.api.WebSocketPolicy","methodName":"setIdleTimeout","lineNumber":["52"],"fullExpression":"webSocketUpgradeFilter.getFactory().getPolicy().setIdleTimeout(webSocketIdleTimeoutMillis.get())","methodSignature":"setIdleTimeout(long)","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.ContextHandler.Context","methodName":"getAttribute","lineNumber":["57"],"fullExpression":"webSocketServletContextHandler.getServletContext().getAttribute(NativeWebSocketConfiguration.class.getName())","methodSignature":"getAttribute(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["292"],"fullExpression":"LOG.error(\"The @Route value: \" + route + \" is not in the correct format\", e)","methodSignature":"error(java.lang.String, java.lang.Throwable)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.NativeWebSocketConfiguration","methodName":"addMapping","lineNumber":["61"],"fullExpression":"webSocketConfiguration.addMapping(new ServletPathSpec(path), webSocketCreator)","methodSignature":"addMapping(org.eclipse.jetty.http.pathmap.PathSpec, org.eclipse.jetty.websocket.servlet.WebSocketCreator)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter","methodName":"configureContext","lineNumber":["50"],"fullExpression":"WebSocketUpgradeFilter.configureContext(webSocketServletContextHandler)","methodSignature":"configureContext(org.eclipse.jetty.servlet.ServletContextHandler)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/http/matching/MatcherFilter.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["167"],"fullExpression":"LOG.info(\"The requested route [{}] has not been mapped in Spark for {}: [{}]\", uri, ACCEPT_TYPE_REQUEST_MIME_HEADER, acceptType)","methodSignature":"info(java.lang.String, java.lang.Object...)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/examples/filter/DummyFilter.java":[{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["62","66"],"fullExpression":"LOGGER.info(\">>> STARTING EMBEDDED JETTY SERVER for jUnit testing of SparkFilter\")","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/embeddedserver/jetty/websocket/WebSocketTestClient.java":[{"declaringType":"org.eclipse.jetty.websocket.api.Session","methodName":"close","lineNumber":["33"],"fullExpression":"session.close(StatusCode.NORMAL, \"Bye!\")","methodSignature":"close(int, java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.api.RemoteEndpoint","methodName":"sendString","lineNumber":["45"],"fullExpression":"session.getRemote().sendString(\"PONG\")","methodSignature":"sendString(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.api.Session","methodName":"getRemote","lineNumber":["45"],"fullExpression":"session.getRemote()","methodSignature":"getRemote()","declarationInfo":null}],"Application/spark-master/src/test/java/spark/Base64Test.java":[{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["67","80","82","95","96","97","98","111","112","126","127","140","141"],"fullExpression":"assertTrue(Integer.valueOf(response.body) > 0)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertFalse","lineNumber":["16"],"fullExpression":"Assert.assertFalse(in.equals(encode))","methodSignature":"assertFalse(boolean)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/MultipleServicesTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["67","80","82","95","96","97","98","111","112","126","127","140","141"],"fullExpression":"assertTrue(Integer.valueOf(response.body) > 0)","methodSignature":"assertTrue(boolean)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/GenericSecureIntegrationTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["67","80","82","95","96","97","98","111","112","126","127","140","141"],"fullExpression":"assertTrue(Integer.valueOf(response.body) > 0)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/resource/ClassPathResourceHandler.java":[{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["63"],"fullExpression":"LOGGER.debug(\"tearDown(). Deleting tmp files\")","methodSignature":"debug(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"isDebugEnabled","lineNumber":["151"],"fullExpression":"LOG.isDebugEnabled()","methodSignature":"isDebugEnabled()","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/embeddedserver/EmbeddedServersTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["67","80","82","95","96","97","98","111","112","126","127","140","141"],"fullExpression":"assertTrue(Integer.valueOf(response.body) > 0)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"setRequestLog","lineNumber":["35"],"fullExpression":"server.setRequestLog(new NCSARequestLog(requestLogFile.getAbsolutePath()))","methodSignature":"setRequestLog(org.eclipse.jetty.server.RequestLog)","declarationInfo":null},{"declaringType":"org.junit.rules.TemporaryFolder","methodName":"newFolder","lineNumber":["33","56"],"fullExpression":"temporaryFolder.newFolder()","methodSignature":"newFolder()","declarationInfo":null}],"Application/spark-master/src/main/java/spark/resource/ExternalResourceHandler.java":[{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["63"],"fullExpression":"LOGGER.debug(\"tearDown(). Deleting tmp files\")","methodSignature":"debug(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"isDebugEnabled","lineNumber":["151"],"fullExpression":"LOG.isDebugEnabled()","methodSignature":"isDebugEnabled()","declarationInfo":null},{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null}]}