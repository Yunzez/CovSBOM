{"Application/spark-master/src/test/java/spark/GenericIntegrationTest.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["51"],"fullExpression":"LoggerFactory.getLogger(GenericIntegrationTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["218"],"fullExpression":"Assert.assertTrue(response.status == 401)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.URIUtil","methodName":"encodePath","lineNumber":["333"],"fullExpression":"URIUtil.encodePath(polyglot)","methodSignature":"encodePath(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["410"],"fullExpression":"Assert.assertTrue(response.status == 401)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["416"],"fullExpression":"Assert.assertTrue(response.status == 404)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"start","lineNumber":["499"],"fullExpression":"client.start()","methodSignature":"start()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"stop","lineNumber":["503"],"fullExpression":"client.stop()","methodSignature":"stop()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["507"],"fullExpression":"Assert.assertEquals(3, events.size(), 3)","methodSignature":"assertEquals(float, float, float)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["508"],"fullExpression":"Assert.assertEquals(\"onConnect\", events.get(0))","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["509"],"fullExpression":"Assert.assertEquals(\"onMessage: Hi Spark!\", events.get(1))","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["510"],"fullExpression":"Assert.assertEquals(\"onClose: 1000 Bye!\", events.get(2))","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["516"],"fullExpression":"Assert.assertTrue(response.status == 200)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["524"],"fullExpression":"Assert.assertTrue(response.status == 200)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["532"],"fullExpression":"Assert.assertTrue(response.status == 200)","methodSignature":"assertTrue(boolean)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/StaticFilesMemberTest.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["43"],"fullExpression":"LoggerFactory.getLogger(StaticFilesMemberTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["60"],"fullExpression":"LOGGER.debug(\"tearDown().deleting: \" + tmpExternalFile)","methodSignature":"debug(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["107"],"fullExpression":"Assert.assertEquals(expectedContentType, \"application/javascript\")","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["110"],"fullExpression":"Assert.assertEquals(\"export default function () { console.log(\\\"Hello, I'm a .mjs file\\\"); }\\n\", body)","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/examples/templateview/FreeMarkerTemplateEngine.java":[{"declaringType":"freemarker.template.Configuration","methodName":"setClassForTemplateLoading","lineNumber":["38"],"fullExpression":"retVal.setClassForTemplateLoading(FreeMarkerTemplateEngine.class, \"freemarker\")","methodSignature":"setClassForTemplateLoading(java.lang.Class, java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/embeddedserver/jetty/SocketConnectorFactoryTest.java":[{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["24"],"fullExpression":"fail(\"SocketConnector creation should have thrown an IllegalArgumentException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["26"],"fullExpression":"assertEquals(\"'server' must not be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["38"],"fullExpression":"fail(\"SocketConnector creation should have thrown an IllegalArgumentException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["40"],"fullExpression":"assertEquals(\"'host' must not be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.powermock.reflect.Whitebox","methodName":"getInternalState","lineNumber":["53"],"fullExpression":"Whitebox.getInternalState(serverConnector, \"_host\")","methodSignature":"getInternalState(java.lang.Object, java.lang.String)","declarationInfo":null},{"declaringType":"org.powermock.reflect.Whitebox","methodName":"getInternalState","lineNumber":["54"],"fullExpression":"Whitebox.getInternalState(serverConnector, \"_port\")","methodSignature":"getInternalState(java.lang.Object, java.lang.String)","declarationInfo":null},{"declaringType":"org.powermock.reflect.Whitebox","methodName":"getInternalState","lineNumber":["55"],"fullExpression":"Whitebox.getInternalState(serverConnector, \"_server\")","methodSignature":"getInternalState(java.lang.Object, java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["57"],"fullExpression":"assertEquals(\"Server Connector Host should be set to the specified server\", host, internalHost)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["58"],"fullExpression":"assertEquals(\"Server Connector Port should be set to the specified port\", port, internalPort)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["59"],"fullExpression":"assertEquals(\"Server Connector Server should be set to the specified server\", internalServerConnector, server)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["67"],"fullExpression":"fail(\"SocketConnector creation should have thrown an IllegalArgumentException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["69"],"fullExpression":"assertEquals(\"'server' must not be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["80"],"fullExpression":"fail(\"SocketConnector creation should have thrown an IllegalArgumentException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["82"],"fullExpression":"assertEquals(\"'host' must not be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["93"],"fullExpression":"fail(\"SocketConnector creation should have thrown an IllegalArgumentException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["95"],"fullExpression":"assertEquals(\"'sslStores' must not be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.powermock.reflect.Whitebox","methodName":"getInternalState","lineNumber":["118"],"fullExpression":"Whitebox.getInternalState(serverConnector, \"_host\")","methodSignature":"getInternalState(java.lang.Object, java.lang.String)","declarationInfo":null},{"declaringType":"org.powermock.reflect.Whitebox","methodName":"getInternalState","lineNumber":["119"],"fullExpression":"Whitebox.getInternalState(serverConnector, \"_port\")","methodSignature":"getInternalState(java.lang.Object, java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["121"],"fullExpression":"assertEquals(\"Server Connector Host should be set to the specified server\", host, internalHost)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["122"],"fullExpression":"assertEquals(\"Server Connector Port should be set to the specified port\", port, internalPort)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.powermock.reflect.Whitebox","methodName":"getInternalState","lineNumber":["124"],"fullExpression":"Whitebox.getInternalState(serverConnector, \"_factories\")","methodSignature":"getInternalState(java.lang.Object, java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["126"],"fullExpression":"assertTrue(\"Should return true because factory for SSL should have been set\", factories.containsKey(\"ssl\") && factories.get(\"ssl\") != null)","methodSignature":"assertTrue(java.lang.String, boolean)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.SslConnectionFactory","methodName":"getSslContextFactory","lineNumber":["130"],"fullExpression":"sslConnectionFactory.getSslContextFactory()","methodSignature":"getSslContextFactory()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["132"],"fullExpression":"assertEquals(\"Should return the Keystore file specified\", keystoreFile, sslContextFactory.getKeyStoreResource().getFile().getName())","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.resource.Resource","methodName":"getFile","lineNumber":["133"],"fullExpression":"sslContextFactory.getKeyStoreResource().getFile()","methodSignature":"getFile()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.ssl.SslContextFactory","methodName":"getKeyStoreResource","lineNumber":["133"],"fullExpression":"sslContextFactory.getKeyStoreResource()","methodSignature":"getKeyStoreResource()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["135"],"fullExpression":"assertEquals(\"Should return the Truststore file specified\", truststoreFile, sslContextFactory.getTrustStoreResource().getFile().getName())","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.resource.Resource","methodName":"getFile","lineNumber":["136"],"fullExpression":"sslContextFactory.getTrustStoreResource().getFile()","methodSignature":"getFile()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.ssl.SslContextFactory","methodName":"getTrustStoreResource","lineNumber":["136"],"fullExpression":"sslContextFactory.getTrustStoreResource()","methodSignature":"getTrustStoreResource()","declarationInfo":null}],"Application/spark-master/src/test/java/spark/CookiesIntegrationTest.java":[{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodName":"build","lineNumber":["23"],"fullExpression":"HttpClientBuilder.create().build()","methodSignature":"build()","declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodName":"create","lineNumber":["23"],"fullExpression":"HttpClientBuilder.create()","methodSignature":"create()","declarationInfo":null},{"declaringType":"org.apache.http.client.HttpClient","methodName":"execute","lineNumber":["127"],"fullExpression":"httpClient.execute(request)","methodSignature":"execute(org.apache.http.client.methods.HttpUriRequest)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["128"],"fullExpression":"assertEquals(200, response.getStatusLine().getStatusCode())","methodSignature":"assertEquals(long, long)","declarationInfo":null},{"declaringType":"org.apache.http.StatusLine","methodName":"getStatusCode","lineNumber":["128"],"fullExpression":"response.getStatusLine().getStatusCode()","methodSignature":"getStatusCode()","declarationInfo":null},{"declaringType":"org.apache.http.HttpResponse","methodName":"getStatusLine","lineNumber":["128"],"fullExpression":"response.getStatusLine()","methodSignature":"getStatusLine()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["130"],"fullExpression":"fail(ex.toString())","methodSignature":"fail(java.lang.String)","declarationInfo":null},{"declaringType":"org.apache.http.client.methods.HttpRequestBase","methodName":"releaseConnection","lineNumber":["132"],"fullExpression":"request.releaseConnection()","methodSignature":"releaseConnection()","declarationInfo":null}],"Application/spark-master/src/main/java/spark/CustomErrorPages.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["32"],"fullExpression":"LoggerFactory.getLogger(CustomErrorPages.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"warn","lineNumber":["66"],"fullExpression":"LOG.warn(\"Custom error page handler for status code {} has thrown an exception: {}. Using default page instead.\", status, e.getMessage())","methodSignature":"warn(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/ServiceTest.java":[{"declaringType":"org.junit.rules.ExpectedException","methodName":"none","lineNumber":["31"],"fullExpression":"ExpectedException.none()","methodSignature":"none()","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["55"],"fullExpression":"thrown.expect(IllegalStateException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["56"],"fullExpression":"thrown.expectMessage(\"This must be done before route mapping has begun\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["89"],"fullExpression":"assertEquals(\"IP address should be set to the IP address that was specified\", IP_ADDRESS, ipAddress)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["94"],"fullExpression":"thrown.expect(IllegalStateException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["95"],"fullExpression":"thrown.expectMessage(\"This must be done before route mapping has begun\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["106"],"fullExpression":"assertEquals(\"IP address should be set to the IP address that was specified\", IP_ADDRESS, ipAddress)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["111"],"fullExpression":"thrown.expect(IllegalStateException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["112"],"fullExpression":"thrown.expectMessage(\"This must be done before route mapping has begun\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["123"],"fullExpression":"assertEquals(\"Port should be set to the Port that was specified\", 8080, port)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["128"],"fullExpression":"thrown.expect(IllegalStateException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["129"],"fullExpression":"thrown.expectMessage(\"This must be done before route mapping has begun\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["140"],"fullExpression":"assertEquals(\"Port should be set to the Port that was specified\", 8080, port)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["145"],"fullExpression":"thrown.expect(IllegalStateException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["146"],"fullExpression":"thrown.expectMessage(\"This must be done before route mapping has begun\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["154"],"fullExpression":"thrown.expect(IllegalStateException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["155"],"fullExpression":"thrown.expectMessage(\"This must be done after route mapping has begun\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["169"],"fullExpression":"assertEquals(\"Port retrieved should be the port setted\", expectedPort, actualPort)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["179"],"fullExpression":"assertEquals(\"Port retrieved should be the port setted\", expectedPort, actualPort)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["188"],"fullExpression":"assertEquals(\"Should return maxThreads specified\", 100, maxThreads)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["189"],"fullExpression":"assertEquals(\"Should return minThreads specified\", -1, minThreads)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["190"],"fullExpression":"assertEquals(\"Should return threadIdleTimeoutMillis specified\", -1, threadIdleTimeoutMillis)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["199"],"fullExpression":"assertEquals(\"Should return maxThreads specified\", 100, maxThreads)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["200"],"fullExpression":"assertEquals(\"Should return minThreads specified\", 50, minThreads)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["201"],"fullExpression":"assertEquals(\"Should return threadIdleTimeoutMillis specified\", 75, threadIdleTimeoutMillis)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["206"],"fullExpression":"thrown.expect(IllegalStateException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["207"],"fullExpression":"thrown.expectMessage(\"This must be done before route mapping has begun\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["226"],"fullExpression":"thrown.expect(IllegalStateException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["227"],"fullExpression":"thrown.expectMessage(\"This must be done before route mapping has begun\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["235"],"fullExpression":"thrown.expect(IllegalArgumentException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["236"],"fullExpression":"thrown.expectMessage(\"Must provide a keystore file to run secured\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["243"],"fullExpression":"thrown.expect(IllegalStateException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["244"],"fullExpression":"thrown.expectMessage(\"This must be done before route mapping has begun\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["252"],"fullExpression":"thrown.expect(IllegalStateException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["253"],"fullExpression":"thrown.expectMessage(\"This must be done before route mapping has begun\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["261"],"fullExpression":"thrown.expect(NullPointerException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["262"],"fullExpression":"thrown.expectMessage(\"WebSocket path cannot be null\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["268"],"fullExpression":"thrown.expect(NullPointerException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["269"],"fullExpression":"thrown.expectMessage(\"WebSocket handler class cannot be null\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/http/matching/GeneralError.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["32"],"fullExpression":"org.slf4j.LoggerFactory.getLogger(GeneralError.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["55"],"fullExpression":"LOG.error(\"\", e)","methodSignature":"error(java.lang.String, java.lang.Throwable)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/Service.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["58"],"fullExpression":"LoggerFactory.getLogger(\"spark.Spark\")","methodSignature":"getLogger(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["94"],"fullExpression":"LOG.error(\"ignite failed\", e)","methodSignature":"error(java.lang.String, java.lang.Throwable)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"warn","lineNumber":["346"],"fullExpression":"LOG.warn(\"Static file location has already been set\")","methodSignature":"warn(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"warn","lineNumber":["366"],"fullExpression":"LOG.warn(\"External static file location has already been set\")","methodSignature":"warn(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["498"],"fullExpression":"LOG.info(\"Interrupted by another thread\")","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"warn","lineNumber":["531"],"fullExpression":"LOG.warn(\"Interrupted by another thread\")","methodSignature":"warn(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["647"],"fullExpression":"LOG.error(\"server interrupted\", e)","methodSignature":"error(java.lang.String, java.lang.Throwable)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/embeddedserver/jetty/JettyHandler.java":[{"declaringType":"org.eclipse.jetty.server.Request","methodName":"setHandled","lineNumber":["53"],"fullExpression":"baseRequest.setHandled(false)","methodSignature":"setHandled(boolean)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Request","methodName":"setHandled","lineNumber":["55"],"fullExpression":"baseRequest.setHandled(true)","methodSignature":"setHandled(boolean)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/MultipleFiltersTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["32"],"fullExpression":"Assert.assertEquals(counter, 2)","methodSignature":"assertEquals(long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["36"],"fullExpression":"Assert.assertEquals((int) request.attribute(\"counter\"), 1)","methodSignature":"assertEquals(long, long)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/examples/websocket/PingWebSocket.java":[{"declaringType":"org.eclipse.jetty.websocket.api.RemoteEndpoint","methodName":"sendString","lineNumber":["45"],"fullExpression":"session.getRemote().sendString(\"PONG\")","methodSignature":"sendString(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.api.Session","methodName":"getRemote","lineNumber":["45"],"fullExpression":"session.getRemote()","methodSignature":"getRemote()","declarationInfo":null}],"Application/spark-master/src/test/java/spark/globalstate/ServletFlagTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertFalse","lineNumber":["27"],"fullExpression":"assertFalse(\"Should be false because it is the default value\", isRunningFromServlet.get())","methodSignature":"assertFalse(java.lang.String, boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["36"],"fullExpression":"assertTrue(\"Should be true because it flag has been set after runFromServlet\", isRunningFromServlet.get())","methodSignature":"assertTrue(java.lang.String, boolean)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/GzipTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["58"],"fullExpression":"Assert.assertEquals(\"Content of css file\", decompressed)","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/examples/transformer/JsonTransformer.java":[{"declaringType":"com.google.gson.Gson","methodName":"toJson","lineNumber":["13"],"fullExpression":"gson.toJson(model)","methodSignature":"toJson(java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/route/Routes.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["39"],"fullExpression":"org.slf4j.LoggerFactory.getLogger(Routes.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["283"],"fullExpression":"LOG.error(\"The @Route value: \" + route + \" has an invalid HTTP method part: \" + httpMethod + \".\")","methodSignature":"error(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["292"],"fullExpression":"LOG.error(\"The @Route value: \" + route + \" is not in the correct format\", e)","methodSignature":"error(java.lang.String, java.lang.Throwable)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/embeddedserver/jetty/websocket/WebSocketCreatorFactoryTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["20"],"fullExpression":"assertTrue(annotated instanceof SparkWebSocketCreator)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["21"],"fullExpression":"assertTrue(SparkWebSocketCreator.class.cast(annotated).getHandler() instanceof AnnotatedHandler)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["25"],"fullExpression":"assertTrue(listener instanceof SparkWebSocketCreator)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["26"],"fullExpression":"assertTrue(SparkWebSocketCreator.class.cast(listener).getHandler() instanceof ListenerHandler)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["33"],"fullExpression":"fail(\"Handler creation should have thrown an IllegalArgumentException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["35"],"fullExpression":"assertEquals(\"WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["45"],"fullExpression":"fail(\"Handler creation should have thrown a RunTimeException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["47"],"fullExpression":"assertEquals(\"Could not instantiate websocket handler\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/RouteImplTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["53"],"fullExpression":"assertNotNull(\"Should return an Object because we configured it to have one\", value)","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["54"],"fullExpression":"assertEquals(\"Should return a string object specified\", finalObjValue, value.toString())","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"junit.framework.TestCase","methodName":"assertNull","lineNumber":["61"],"fullExpression":"assertNull(\"Should return null because the element from render is null\", value)","methodSignature":"assertNull(java.lang.String, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/RequestTest.java":[{"declaringType":"org.mockito.Mockito","methodName":"mock","lineNumber":["60"],"fullExpression":"mock(HttpServletRequest.class)","methodSignature":"mock(java.lang.Class<T>)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"mock","lineNumber":["61"],"fullExpression":"mock(HttpSession.class)","methodSignature":"mock(java.lang.Class<T>)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["70"],"fullExpression":"when(servletRequest.getParameter(\"name\")).thenReturn(\"Federico\")","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["70"],"fullExpression":"when(servletRequest.getParameter(\"name\"))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["73"],"fullExpression":"assertEquals(\"Invalid name in query string\", \"Federico\", name)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["79"],"fullExpression":"when(servletRequest.getParameter(\"name\")).thenReturn(\"Federico\")","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["79"],"fullExpression":"when(servletRequest.getParameter(\"name\"))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["82"],"fullExpression":"assertEquals(\"Invalid name in query string\", \"Federico\", name)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["88"],"fullExpression":"when(servletRequest.getParameter(\"name\")).thenReturn(null)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["88"],"fullExpression":"when(servletRequest.getParameter(\"name\"))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["91"],"fullExpression":"assertEquals(\"Invalid name in default value\", \"David\", name)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["99"],"fullExpression":"when(servletRequest.getParameterMap()).thenReturn(params)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["99"],"fullExpression":"when(servletRequest.getParameterMap())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["102"],"fullExpression":"assertEquals(\"Invalid name in query string\", \"Federico\", name)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["108"],"fullExpression":"when(servletRequest.getServletPath()).thenReturn(THE_SERVLET_PATH)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["108"],"fullExpression":"when(servletRequest.getServletPath())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["117"],"fullExpression":"when(servletRequest.getContextPath()).thenReturn(THE_CONTEXT_PATH)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["117"],"fullExpression":"when(servletRequest.getContextPath())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["149"],"fullExpression":"when(servletRequest.getSession()).thenReturn(httpSession)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["149"],"fullExpression":"when(servletRequest.getSession())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["158"],"fullExpression":"when(servletRequest.getSession(true)).thenReturn(httpSession)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["158"],"fullExpression":"when(servletRequest.getSession(true))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["169"],"fullExpression":"when(servletRequest.getSession(true)).thenReturn(httpSession)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["169"],"fullExpression":"when(servletRequest.getSession(true))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["178"],"fullExpression":"when(servletRequest.getSession()).thenReturn(httpSession)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["178"],"fullExpression":"when(servletRequest.getSession())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["184"],"fullExpression":"verify(servletRequest, times(2))","methodSignature":"verify(T, org.mockito.verification.VerificationMode)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"times","lineNumber":["184"],"fullExpression":"times(2)","methodSignature":"times(int)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["189"],"fullExpression":"when(servletRequest.getSession(true)).thenReturn(httpSession)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["189"],"fullExpression":"when(servletRequest.getSession(true))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["195"],"fullExpression":"verify(servletRequest, times(2))","methodSignature":"verify(T, org.mockito.verification.VerificationMode)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"times","lineNumber":["195"],"fullExpression":"times(2)","methodSignature":"times(int)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["200"],"fullExpression":"when(servletRequest.getSession()).thenReturn(httpSession)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["200"],"fullExpression":"when(servletRequest.getSession())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["201"],"fullExpression":"when(servletRequest.getSession(false)).thenReturn(null)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["201"],"fullExpression":"when(servletRequest.getSession(false))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["207"],"fullExpression":"verify(servletRequest, times(1))","methodSignature":"verify(T, org.mockito.verification.VerificationMode)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"times","lineNumber":["207"],"fullExpression":"times(1)","methodSignature":"times(int)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["212"],"fullExpression":"when(servletRequest.getSession(true)).thenReturn(httpSession)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["212"],"fullExpression":"when(servletRequest.getSession(true))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["218"],"fullExpression":"verify(servletRequest, times(1))","methodSignature":"verify(T, org.mockito.verification.VerificationMode)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"times","lineNumber":["218"],"fullExpression":"times(1)","methodSignature":"times(int)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["235"],"fullExpression":"when(servletRequest.getCookies()).thenReturn(cookieArray)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["235"],"fullExpression":"when(servletRequest.getCookies())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["237"],"fullExpression":"assertTrue(\"The count of cookies returned should be the same as those in the request\", request.cookies().size() == 2)","methodSignature":"assertTrue(java.lang.String, boolean)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["247"],"fullExpression":"when(servletRequest.getCookies()).thenReturn(null)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["247"],"fullExpression":"when(servletRequest.getCookies())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["252"],"fullExpression":"assertTrue(\"The Map of cookies should be empty because cookies are not present in the request\", request.cookies().size() == 0)","methodSignature":"assertTrue(java.lang.String, boolean)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["267"],"fullExpression":"when(servletRequest.getCookies()).thenReturn(cookieArray)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["267"],"fullExpression":"when(servletRequest.getCookies())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["282"],"fullExpression":"when(servletRequest.getCookies()).thenReturn(null)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["282"],"fullExpression":"when(servletRequest.getCookies())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["294"],"fullExpression":"when(servletRequest.getMethod()).thenReturn(requestMethod)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["294"],"fullExpression":"when(servletRequest.getMethod())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["306"],"fullExpression":"when(servletRequest.getScheme()).thenReturn(scheme)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["306"],"fullExpression":"when(servletRequest.getScheme())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["318"],"fullExpression":"when(servletRequest.getHeader(\"host\")).thenReturn(host)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["318"],"fullExpression":"when(servletRequest.getHeader(\"host\"))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["330"],"fullExpression":"when(servletRequest.getHeader(\"user-agent\")).thenReturn(userAgent)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["330"],"fullExpression":"when(servletRequest.getHeader(\"user-agent\"))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["342"],"fullExpression":"when(servletRequest.getServerPort()).thenReturn(80)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["342"],"fullExpression":"when(servletRequest.getServerPort())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["354"],"fullExpression":"when(servletRequest.getPathInfo()).thenReturn(pathInfo)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["354"],"fullExpression":"when(servletRequest.getPathInfo())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["366"],"fullExpression":"when(servletRequest.getServletPath()).thenReturn(servletPath)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["366"],"fullExpression":"when(servletRequest.getServletPath())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["378"],"fullExpression":"when(servletRequest.getContextPath()).thenReturn(contextPath)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["378"],"fullExpression":"when(servletRequest.getContextPath())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["390"],"fullExpression":"when(servletRequest.getRequestURL()).thenReturn(new StringBuffer(url))","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["390"],"fullExpression":"when(servletRequest.getRequestURL())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["402"],"fullExpression":"when(servletRequest.getContentType()).thenReturn(contentType)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["402"],"fullExpression":"when(servletRequest.getContentType())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["414"],"fullExpression":"when(servletRequest.getRemoteAddr()).thenReturn(ip)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["414"],"fullExpression":"when(servletRequest.getRemoteAddr())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["426"],"fullExpression":"when(servletRequest.getContentLength()).thenReturn(contentLength)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["426"],"fullExpression":"when(servletRequest.getContentLength())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["439"],"fullExpression":"when(servletRequest.getHeader(headerKey)).thenReturn(host)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["439"],"fullExpression":"when(servletRequest.getHeader(headerKey))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["451"],"fullExpression":"when(servletRequest.getParameterValues(\"id\")).thenReturn(paramValues)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["451"],"fullExpression":"when(servletRequest.getParameterValues(\"id\"))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["461"],"fullExpression":"when(servletRequest.getParameterValues(\"id\")).thenReturn(null)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["461"],"fullExpression":"when(servletRequest.getParameterValues(\"id\"))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["475"],"fullExpression":"when(servletRequest.getParameterMap()).thenReturn(params)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["475"],"fullExpression":"when(servletRequest.getParameterMap())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertArrayEquals","lineNumber":["479"],"fullExpression":"assertArrayEquals(\"Should return the query parameter names\", params.keySet().toArray(), result.toArray())","methodSignature":"assertArrayEquals(java.lang.String, java.lang.Object[], java.lang.Object[])","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["488"],"fullExpression":"when(servletRequest.getRequestURI()).thenReturn(requestURI)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["488"],"fullExpression":"when(servletRequest.getRequestURI())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["500"],"fullExpression":"when(servletRequest.getProtocol()).thenReturn(protocol)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["500"],"fullExpression":"when(servletRequest.getProtocol())","methodSignature":"when(T)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/QueryParamsMapTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["69"],"fullExpression":"assertEquals(\"user\", parsed[0])","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["70"],"fullExpression":"assertEquals(\"[name][more]\", parsed[1])","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["79"],"fullExpression":"assertEquals(\"name\", parsed[0])","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["80"],"fullExpression":"assertEquals(\"[more]\", parsed[1])","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["84"],"fullExpression":"assertEquals(\"more\", parsed[0])","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["85"],"fullExpression":"assertEquals(\"\", parsed[1])","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNull","lineNumber":["94"],"fullExpression":"assertNull(ret)","methodSignature":"assertNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["118"],"fullExpression":"assertEquals(2, map.size())","methodSignature":"assertEquals(long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["119"],"fullExpression":"assertEquals(\"fede\", map.get(\"name\")[0])","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["120"],"fullExpression":"assertEquals(\"dayan\", map.get(\"last\")[0])","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/Request.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["48"],"fullExpression":"org.slf4j.LoggerFactory.getLogger(Request.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"warn","lineNumber":["275"],"fullExpression":"LOG.warn(\"Exception when reading body\", e)","methodSignature":"warn(java.lang.String, java.lang.Throwable)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["529"],"fullExpression":"LOG.debug(\"matchedPart: \" + matchedPart + \" = \" + decodedReq)","methodSignature":"debug(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/examples/websocket/EchoWebSocket.java":[{"declaringType":"org.eclipse.jetty.websocket.api.RemoteEndpoint","methodName":"sendString","lineNumber":["44"],"fullExpression":"session.getRemote().sendString(message)","methodSignature":"sendString(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.api.Session","methodName":"getRemote","lineNumber":["44"],"fullExpression":"session.getRemote()","methodSignature":"getRemote()","declarationInfo":null}],"Application/spark-master/src/test/java/spark/ServicePortIntegrationTest.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["19"],"fullExpression":"LoggerFactory.getLogger(ServicePortIntegrationTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["35"],"fullExpression":"LOGGER.info(\"got port \")","methodSignature":"info(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/servlet/SparkFilter.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["49"],"fullExpression":"LoggerFactory.getLogger(SparkFilter.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"isDebugEnabled","lineNumber":["151"],"fullExpression":"LOG.isDebugEnabled()","methodSignature":"isDebugEnabled()","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["152"],"fullExpression":"LOG.debug(relativePath)","methodSignature":"debug(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/Response.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["38"],"fullExpression":"LoggerFactory.getLogger(Response.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"isDebugEnabled","lineNumber":["119"],"fullExpression":"LOG.isDebugEnabled()","methodSignature":"isDebugEnabled()","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["120"],"fullExpression":"LOG.debug(\"Redirecting ({} {} to {}\", \"Found\", HttpServletResponse.SC_FOUND, location)","methodSignature":"debug(java.lang.String, java.lang.Object...)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"warn","lineNumber":["125"],"fullExpression":"LOG.warn(\"Redirect failure\", ioException)","methodSignature":"warn(java.lang.String, java.lang.Throwable)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"isDebugEnabled","lineNumber":["136"],"fullExpression":"LOG.isDebugEnabled()","methodSignature":"isDebugEnabled()","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["137"],"fullExpression":"LOG.debug(\"Redirecting ({} to {}\", httpStatusCode, location)","methodSignature":"debug(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"warn","lineNumber":["145"],"fullExpression":"LOG.warn(\"Exception when trying to redirect permanently\", e)","methodSignature":"warn(java.lang.String, java.lang.Throwable)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/ResponseTest.java":[{"declaringType":"org.mockito.Mockito","methodName":"mock","lineNumber":["25"],"fullExpression":"mock(HttpServletResponse.class)","methodSignature":"mock(java.lang.Class<T>)","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"forClass","lineNumber":["27"],"fullExpression":"ArgumentCaptor.forClass(Cookie.class)","methodSignature":"forClass(java.lang.Class<T>)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertSame","lineNumber":["33"],"fullExpression":"assertSame(\"Should be the same the HttpServletResponse object for httpServletResponse and returnResponse\", httpServletResponse, returnResponse)","methodSignature":"assertSame(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["41"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["47"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["55"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["61"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["70"],"fullExpression":"assertEquals(\"Should return body specified\", finalBody, returnBody)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["79"],"fullExpression":"assertEquals(\"Should return body specified\", finalBody, returnBody)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertSame","lineNumber":["85"],"fullExpression":"assertSame(\"Should be the same the HttpServletResponse object for httpServletResponse and returnResponse\", httpServletResponse, returnResponse)","methodSignature":"assertSame(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["94"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["100"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["107"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["114"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["121"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["131"],"fullExpression":"assertEquals(\"Should return cookie domain specified\", domain, cookie.getDomain())","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["132"],"fullExpression":"assertEquals(\"Should return cookie path specified\", path, cookie.getPath())","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["133"],"fullExpression":"assertEquals(\"Should return cookie value specified\", value, cookie.getValue())","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["134"],"fullExpression":"assertEquals(\"Should return cookie max age specified\", maxAge, cookie.getMaxAge())","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["135"],"fullExpression":"assertEquals(\"Should return cookie secure specified\", secured, cookie.getSecure())","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["136"],"fullExpression":"assertEquals(\"Should return cookie http only specified\", httpOnly, cookie.isHttpOnly())","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["152"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"capture","lineNumber":["152"],"fullExpression":"cookieArgumentCaptor.capture()","methodSignature":"capture()","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"getValue","lineNumber":["153"],"fullExpression":"cookieArgumentCaptor.getValue()","methodSignature":"getValue()","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["169"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"capture","lineNumber":["169"],"fullExpression":"cookieArgumentCaptor.capture()","methodSignature":"capture()","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"getValue","lineNumber":["170"],"fullExpression":"cookieArgumentCaptor.getValue()","methodSignature":"getValue()","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["185"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"capture","lineNumber":["185"],"fullExpression":"cookieArgumentCaptor.capture()","methodSignature":"capture()","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"getValue","lineNumber":["186"],"fullExpression":"cookieArgumentCaptor.getValue()","methodSignature":"getValue()","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["201"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"capture","lineNumber":["201"],"fullExpression":"cookieArgumentCaptor.capture()","methodSignature":"capture()","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"getValue","lineNumber":["202"],"fullExpression":"cookieArgumentCaptor.getValue()","methodSignature":"getValue()","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["217"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"capture","lineNumber":["217"],"fullExpression":"cookieArgumentCaptor.capture()","methodSignature":"capture()","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"getValue","lineNumber":["218"],"fullExpression":"cookieArgumentCaptor.getValue()","methodSignature":"getValue()","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["233"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"capture","lineNumber":["233"],"fullExpression":"cookieArgumentCaptor.capture()","methodSignature":"capture()","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"getValue","lineNumber":["234"],"fullExpression":"cookieArgumentCaptor.getValue()","methodSignature":"getValue()","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["249"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"capture","lineNumber":["249"],"fullExpression":"cookieArgumentCaptor.capture()","methodSignature":"capture()","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"getValue","lineNumber":["250"],"fullExpression":"cookieArgumentCaptor.getValue()","methodSignature":"getValue()","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["265"],"fullExpression":"verify(httpServletResponse, times(2))","methodSignature":"verify(T, org.mockito.verification.VerificationMode)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"times","lineNumber":["265"],"fullExpression":"times(2)","methodSignature":"times(int)","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"capture","lineNumber":["265"],"fullExpression":"cookieArgumentCaptor.capture()","methodSignature":"capture()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["267"],"fullExpression":"assertEquals(\"Should return empty value for the given cookie name\", \"\", cookieArgumentCaptor.getValue().getValue())","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"getValue","lineNumber":["267"],"fullExpression":"cookieArgumentCaptor.getValue()","methodSignature":"getValue()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["268"],"fullExpression":"assertEquals(\"Should return an 0 for maximum cookie age\", 0, cookieArgumentCaptor.getValue().getMaxAge())","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.mockito.ArgumentCaptor","methodName":"getValue","lineNumber":["268"],"fullExpression":"cookieArgumentCaptor.getValue()","methodSignature":"getValue()","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["276"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["287"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["288"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["289"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["290"],"fullExpression":"verify(httpServletResponse)","methodSignature":"verify(T)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/BodyAvailabilityTest.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["18"],"fullExpression":"LoggerFactory.getLogger(BodyAvailabilityTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["41"],"fullExpression":"LOGGER.debug(\"setup()\")","methodSignature":"debug(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["75"],"fullExpression":"Assert.assertEquals(BODY_CONTENT, beforeBody)","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["76"],"fullExpression":"Assert.assertEquals(BODY_CONTENT, routeBody)","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["77"],"fullExpression":"Assert.assertEquals(BODY_CONTENT, afterBody)","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/util/ResourceUtilsTest.java":[{"declaringType":"org.junit.rules.ExpectedException","methodName":"none","lineNumber":["20"],"fullExpression":"ExpectedException.none()","methodSignature":"none()","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expect","lineNumber":["26"],"fullExpression":"thrown.expect(FileNotFoundException.class)","methodSignature":"expect(java.lang.Class<? extends java.lang.Throwable>)","declarationInfo":null},{"declaringType":"org.junit.rules.ExpectedException","methodName":"expectMessage","lineNumber":["27"],"fullExpression":"thrown.expectMessage(\"My File Path cannot be resolved to absolute file path \" + \"because it does not reside in the file system: http://example.com/\")","methodSignature":"expectMessage(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["44"],"fullExpression":"assertEquals(\"Should be equals because URL protocol is file\", file, new File(ResourceUtils.toURI(url).getSchemeSpecificPart()))","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/util/SparkTestUtil.java":[{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodName":"build","lineNumber":["52"],"fullExpression":"httpClientBuilder().build()","methodSignature":"build()","declarationInfo":null},{"declaringType":"org.apache.http.config.RegistryBuilder","methodName":"build","lineNumber":["58"],"fullExpression":"RegistryBuilder.<ConnectionSocketFactory>create().register(\"http\", PlainConnectionSocketFactory.INSTANCE).register(\"https\", sslConnectionSocketFactory).build()","methodSignature":"build()","declarationInfo":null},{"declaringType":"org.apache.http.config.RegistryBuilder","methodName":"register","lineNumber":["58"],"fullExpression":"RegistryBuilder.<ConnectionSocketFactory>create().register(\"http\", PlainConnectionSocketFactory.INSTANCE).register(\"https\", sslConnectionSocketFactory)","methodSignature":"register(java.lang.String, I)","declarationInfo":null},{"declaringType":"org.apache.http.config.RegistryBuilder","methodName":"register","lineNumber":["58"],"fullExpression":"RegistryBuilder.<ConnectionSocketFactory>create().register(\"http\", PlainConnectionSocketFactory.INSTANCE)","methodSignature":"register(java.lang.String, I)","declarationInfo":null},{"declaringType":"org.apache.http.config.RegistryBuilder","methodName":"create","lineNumber":["58"],"fullExpression":"RegistryBuilder.<ConnectionSocketFactory>create()","methodSignature":"create()","declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodName":"setConnectionManager","lineNumber":["64"],"fullExpression":"HttpClientBuilder.create().setConnectionManager(connManager)","methodSignature":"setConnectionManager(org.apache.http.conn.HttpClientConnectionManager)","declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodName":"create","lineNumber":["64"],"fullExpression":"HttpClientBuilder.create()","methodSignature":"create()","declarationInfo":null},{"declaringType":"org.apache.http.impl.client.DefaultRedirectStrategy","methodName":"isRedirected","lineNumber":["73"],"fullExpression":"super.isRedirected(request, response, context)","methodSignature":"isRedirected(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)","declarationInfo":null},{"declaringType":"org.apache.http.StatusLine","methodName":"getStatusCode","lineNumber":["78"],"fullExpression":"response.getStatusLine().getStatusCode()","methodSignature":"getStatusCode()","declarationInfo":null},{"declaringType":"org.apache.http.HttpResponse","methodName":"getStatusLine","lineNumber":["78"],"fullExpression":"response.getStatusLine()","methodSignature":"getStatusLine()","declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodName":"build","lineNumber":["86"],"fullExpression":"httpClientBuilder().setRedirectStrategy(redirectStrategy).build()","methodSignature":"build()","declarationInfo":null},{"declaringType":"org.apache.http.impl.client.HttpClientBuilder","methodName":"setRedirectStrategy","lineNumber":["86"],"fullExpression":"httpClientBuilder().setRedirectStrategy(redirectStrategy)","methodSignature":"setRedirectStrategy(org.apache.http.client.RedirectStrategy)","declarationInfo":null},{"declaringType":"org.apache.http.client.HttpClient","methodName":"execute","lineNumber":["120"],"fullExpression":"httpClient.execute(httpRequest)","methodSignature":"execute(org.apache.http.client.methods.HttpUriRequest)","declarationInfo":null},{"declaringType":"org.apache.http.StatusLine","methodName":"getStatusCode","lineNumber":["123"],"fullExpression":"httpResponse.getStatusLine().getStatusCode()","methodSignature":"getStatusCode()","declarationInfo":null},{"declaringType":"org.apache.http.HttpResponse","methodName":"getStatusLine","lineNumber":["123"],"fullExpression":"httpResponse.getStatusLine()","methodSignature":"getStatusLine()","declarationInfo":null},{"declaringType":"org.apache.http.HttpResponse","methodName":"getEntity","lineNumber":["124"],"fullExpression":"httpResponse.getEntity()","methodSignature":"getEntity()","declarationInfo":null},{"declaringType":"org.apache.http.util.EntityUtils","methodName":"toString","lineNumber":["126"],"fullExpression":"EntityUtils.toString(entity)","methodSignature":"toString(org.apache.http.HttpEntity)","declarationInfo":null},{"declaringType":"org.apache.http.HttpMessage","methodName":"getAllHeaders","lineNumber":["131"],"fullExpression":"httpResponse.getAllHeaders()","methodSignature":"getAllHeaders()","declarationInfo":null},{"declaringType":"org.apache.http.NameValuePair","methodName":"getName","lineNumber":["133"],"fullExpression":"header.getName()","methodSignature":"getName()","declarationInfo":null},{"declaringType":"org.apache.http.NameValuePair","methodName":"getValue","lineNumber":["133"],"fullExpression":"header.getValue()","methodSignature":"getValue()","declarationInfo":null},{"declaringType":"org.apache.http.message.AbstractHttpMessage","methodName":"setHeader","lineNumber":["147"],"fullExpression":"httpGet.setHeader(\"Accept\", acceptType)","methodSignature":"setHeader(java.lang.String, java.lang.String)","declarationInfo":null},{"declaringType":"org.apache.http.message.AbstractHttpMessage","methodName":"setHeader","lineNumber":["154"],"fullExpression":"httpPost.setHeader(\"Accept\", acceptType)","methodSignature":"setHeader(java.lang.String, java.lang.String)","declarationInfo":null},{"declaringType":"org.apache.http.client.methods.HttpEntityEnclosingRequestBase","methodName":"setEntity","lineNumber":["156"],"fullExpression":"httpPost.setEntity(new StringEntity(body))","methodSignature":"setEntity(org.apache.http.HttpEntity)","declarationInfo":null},{"declaringType":"org.apache.http.message.AbstractHttpMessage","methodName":"setHeader","lineNumber":["162"],"fullExpression":"httpPatch.setHeader(\"Accept\", acceptType)","methodSignature":"setHeader(java.lang.String, java.lang.String)","declarationInfo":null},{"declaringType":"org.apache.http.client.methods.HttpEntityEnclosingRequestBase","methodName":"setEntity","lineNumber":["164"],"fullExpression":"httpPatch.setEntity(new StringEntity(body))","methodSignature":"setEntity(org.apache.http.HttpEntity)","declarationInfo":null},{"declaringType":"org.apache.http.message.AbstractHttpMessage","methodName":"setHeader","lineNumber":["171"],"fullExpression":"httpDelete.setHeader(\"Accept\", acceptType)","methodSignature":"setHeader(java.lang.String, java.lang.String)","declarationInfo":null},{"declaringType":"org.apache.http.message.AbstractHttpMessage","methodName":"setHeader","lineNumber":["177"],"fullExpression":"httpPut.setHeader(\"Accept\", acceptType)","methodSignature":"setHeader(java.lang.String, java.lang.String)","declarationInfo":null},{"declaringType":"org.apache.http.client.methods.HttpEntityEnclosingRequestBase","methodName":"setEntity","lineNumber":["179"],"fullExpression":"httpPut.setEntity(new StringEntity(body))","methodSignature":"setEntity(org.apache.http.HttpEntity)","declarationInfo":null},{"declaringType":"org.apache.http.HttpMessage","methodName":"addHeader","lineNumber":["217"],"fullExpression":"req.addHeader(header.getKey(), header.getValue())","methodSignature":"addHeader(java.lang.String, java.lang.String)","declarationInfo":null},{"declaringType":"org.apache.http.client.methods.HttpRequestBase","methodName":"setURI","lineNumber":["321"],"fullExpression":"setURI(URI.create(uri))","methodSignature":"setURI(java.net.URI)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/embeddedserver/jetty/websocket/WebSocketServletContextHandlerFactoryTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertNull","lineNumber":["37"],"fullExpression":"assertNull(\"Should return null because no WebSocket Handlers were passed\", servletContextHandler)","methodSignature":"assertNull(java.lang.String, java.lang.Object)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.ContextHandler","methodName":"getServletContext","lineNumber":["50"],"fullExpression":"servletContextHandler.getServletContext()","methodSignature":"getServletContext()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["55"],"fullExpression":"assertNotNull(\"Should return a WebSocketUpgradeFilter because we configured it to have one\", webSocketUpgradeFilter)","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.NativeWebSocketConfiguration","methodName":"getMatch","lineNumber":["60"],"fullExpression":"webSocketConfiguration.getMatch(\"/websocket\")","methodSignature":"getMatch(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.http.pathmap.MappedResource","methodName":"getPathSpec","lineNumber":["61"],"fullExpression":"mappedResource.getPathSpec()","methodSignature":"getPathSpec()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["63"],"fullExpression":"assertEquals(\"Should return the WebSocket path specified when context handler was created\", webSocketPath, pathSpec.getDeclaration())","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.http.pathmap.PathSpec","methodName":"getDeclaration","lineNumber":["64"],"fullExpression":"pathSpec.getDeclaration()","methodSignature":"getDeclaration()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.ContextHandler","methodName":"getServletContext","lineNumber":["86"],"fullExpression":"servletContextHandler.getServletContext()","methodSignature":"getServletContext()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["91"],"fullExpression":"assertNotNull(\"Should return a WebSocketUpgradeFilter because we configured it to have one\", webSocketUpgradeFilter)","methodSignature":"assertNotNull(java.lang.String, java.lang.Object)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.NativeWebSocketConfiguration","methodName":"getFactory","lineNumber":["96"],"fullExpression":"webSocketConfiguration.getFactory()","methodSignature":"getFactory()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["97"],"fullExpression":"assertEquals(\"Timeout value should be the same as the timeout specified when context handler was created\", timeout.longValue(), webSocketServerFactory.getPolicy().getIdleTimeout())","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.api.WebSocketPolicy","methodName":"getIdleTimeout","lineNumber":["98"],"fullExpression":"webSocketServerFactory.getPolicy().getIdleTimeout()","methodSignature":"getIdleTimeout()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.WebSocketServerFactory","methodName":"getPolicy","lineNumber":["98"],"fullExpression":"webSocketServerFactory.getPolicy()","methodSignature":"getPolicy()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.NativeWebSocketConfiguration","methodName":"getMatch","lineNumber":["100"],"fullExpression":"webSocketConfiguration.getMatch(\"/websocket\")","methodSignature":"getMatch(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.http.pathmap.MappedResource","methodName":"getPathSpec","lineNumber":["101"],"fullExpression":"mappedResource.getPathSpec()","methodSignature":"getPathSpec()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["103"],"fullExpression":"assertEquals(\"Should return the WebSocket path specified when context handler was created\", webSocketPath, pathSpec.getDeclaration())","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.http.pathmap.PathSpec","methodName":"getDeclaration","lineNumber":["104"],"fullExpression":"pathSpec.getDeclaration()","methodSignature":"getDeclaration()","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenThrow","lineNumber":["119"],"fullExpression":"PowerMockito.whenNew(ServletContextHandler.class).withAnyArguments().thenThrow(new Exception(\"\"))","methodSignature":"thenThrow(java.lang.Throwable...)","declarationInfo":null},{"declaringType":"org.powermock.api.mockito.expectation.WithAnyArguments","methodName":"withAnyArguments","lineNumber":["119"],"fullExpression":"PowerMockito.whenNew(ServletContextHandler.class).withAnyArguments()","methodSignature":"withAnyArguments()","declarationInfo":null},{"declaringType":"org.powermock.api.mockito.PowerMockito","methodName":"whenNew","lineNumber":["119"],"fullExpression":"PowerMockito.whenNew(ServletContextHandler.class)","methodSignature":"whenNew(java.lang.Class<T>)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNull","lineNumber":["127"],"fullExpression":"assertNull(\"Should return null because Websocket context handler was not created\", servletContextHandler)","methodSignature":"assertNull(java.lang.String, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/SessionTest.java":[{"declaringType":"org.mockito.Mockito","methodName":"mock","lineNumber":["26"],"fullExpression":"mock(HttpSession.class)","methodSignature":"mock(java.lang.Class<T>)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["37"],"fullExpression":"fail(\"Session instantiation with a null HttpSession should throw an IllegalArgumentException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["41"],"fullExpression":"assertEquals(\"session cannot be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["51"],"fullExpression":"fail(\"Session instantiation with a null Request should throw an IllegalArgumentException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["55"],"fullExpression":"assertEquals(\"request cannot be null\", ex.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["63"],"fullExpression":"assertEquals(\"Internal session should be set to the http session provided during instantiation\", httpSession, internalSession)","methodSignature":"assertEquals(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["77"],"fullExpression":"when(httpSession.getAttribute(\"name\")).thenReturn(\"Jett\")","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["77"],"fullExpression":"when(httpSession.getAttribute(\"name\"))","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["88"],"fullExpression":"verify(httpSession)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["96"],"fullExpression":"when(httpSession.getAttributeNames()).thenReturn(Collections.enumeration(attributes))","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["96"],"fullExpression":"when(httpSession.getAttributeNames())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["104"],"fullExpression":"when(httpSession.getCreationTime()).thenReturn(10000000l)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["104"],"fullExpression":"when(httpSession.getCreationTime())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["112"],"fullExpression":"when(httpSession.getId()).thenReturn(\"id\")","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["112"],"fullExpression":"when(httpSession.getId())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["120"],"fullExpression":"when(httpSession.getLastAccessedTime()).thenReturn(20000000l)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["120"],"fullExpression":"when(httpSession.getLastAccessedTime())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["128"],"fullExpression":"when(httpSession.getMaxInactiveInterval()).thenReturn(100)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["128"],"fullExpression":"when(httpSession.getMaxInactiveInterval())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["138"],"fullExpression":"verify(httpSession)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["146"],"fullExpression":"verify(httpSession)","methodSignature":"verify(T)","declarationInfo":null},{"declaringType":"org.mockito.stubbing.OngoingStubbing","methodName":"thenReturn","lineNumber":["152"],"fullExpression":"when(httpSession.isNew()).thenReturn(true)","methodSignature":"thenReturn(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"when","lineNumber":["152"],"fullExpression":"when(httpSession.isNew())","methodSignature":"when(T)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"verify","lineNumber":["162"],"fullExpression":"verify(httpSession)","methodSignature":"verify(T)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/staticfiles/StaticFilesTestExternal.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["44"],"fullExpression":"LoggerFactory.getLogger(StaticFilesTestExternal.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["63"],"fullExpression":"LOGGER.debug(\"tearDown(). Deleting tmp files\")","methodSignature":"debug(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/examples/filter/FilterExampleAttributes.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["32"],"fullExpression":"LoggerFactory.getLogger(FilterExampleAttributes.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["42"],"fullExpression":"LOGGER.info(\"attr: \" + attr)","methodSignature":"info(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/embeddedserver/jetty/JettyServerTest.java":[{"declaringType":"org.eclipse.jetty.server.Server","methodName":"getThreadPool","lineNumber":["16"],"fullExpression":"server.getThreadPool()","methodSignature":"getThreadPool()","declarationInfo":null},{"declaringType":"org.powermock.reflect.Whitebox","methodName":"getInternalState","lineNumber":["18"],"fullExpression":"Whitebox.getInternalState(threadPool, \"_minThreads\")","methodSignature":"getInternalState(java.lang.Object, java.lang.String)","declarationInfo":null},{"declaringType":"org.powermock.reflect.Whitebox","methodName":"getInternalState","lineNumber":["19"],"fullExpression":"Whitebox.getInternalState(threadPool, \"_maxThreads\")","methodSignature":"getInternalState(java.lang.Object, java.lang.String)","declarationInfo":null},{"declaringType":"org.powermock.reflect.Whitebox","methodName":"getInternalState","lineNumber":["20"],"fullExpression":"Whitebox.getInternalState(threadPool, \"_idleTimeout\")","methodSignature":"getInternalState(java.lang.Object, java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["22"],"fullExpression":"assertEquals(\"Server thread pool default minThreads should be 8\", 8, minThreads)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["23"],"fullExpression":"assertEquals(\"Server thread pool default maxThreads should be 200\", 200, maxThreads)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["24"],"fullExpression":"assertEquals(\"Server thread pool default idleTimeout should be 60000\", 60000, idleTimeout)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"getThreadPool","lineNumber":["31"],"fullExpression":"server.getThreadPool()","methodSignature":"getThreadPool()","declarationInfo":null},{"declaringType":"org.powermock.reflect.Whitebox","methodName":"getInternalState","lineNumber":["33"],"fullExpression":"Whitebox.getInternalState(threadPool, \"_minThreads\")","methodSignature":"getInternalState(java.lang.Object, java.lang.String)","declarationInfo":null},{"declaringType":"org.powermock.reflect.Whitebox","methodName":"getInternalState","lineNumber":["34"],"fullExpression":"Whitebox.getInternalState(threadPool, \"_maxThreads\")","methodSignature":"getInternalState(java.lang.Object, java.lang.String)","declarationInfo":null},{"declaringType":"org.powermock.reflect.Whitebox","methodName":"getInternalState","lineNumber":["35"],"fullExpression":"Whitebox.getInternalState(threadPool, \"_idleTimeout\")","methodSignature":"getInternalState(java.lang.Object, java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["37"],"fullExpression":"assertEquals(\"Server thread pool default minThreads should be 8\", 8, minThreads)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["38"],"fullExpression":"assertEquals(\"Server thread pool default maxThreads should be the same as specified\", 9, maxThreads)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["39"],"fullExpression":"assertEquals(\"Server thread pool default idleTimeout should be 60000\", 60000, idleTimeout)","methodSignature":"assertEquals(java.lang.String, long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"fail","lineNumber":["47"],"fullExpression":"fail(\"expected IllegalArgumentException\")","methodSignature":"fail(java.lang.String)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["50"],"fullExpression":"assertEquals(\"max threads (2) less than min threads (8)\", expected.getMessage())","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/staticfiles/StaticFilesFolder.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["14"],"fullExpression":"LoggerFactory.getLogger(StaticFilesFolder.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"warn","lineNumber":["29"],"fullExpression":"LOG.warn(\"Registering external static files folder [{}] as [{}].\", folder, unixLikeFolder)","methodSignature":"warn(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/staticfiles/StaticFilesTest.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["44"],"fullExpression":"LoggerFactory.getLogger(StaticFilesTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["61"],"fullExpression":"LOGGER.debug(\"tearDown().deleting: \" + tmpExternalFile)","methodSignature":"debug(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/utils/SparkUtilsTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertThat","lineNumber":["20"],"fullExpression":"assertThat(\"Should return route as a list of individual elements that path is made of\", actual, is(expected))","methodSignature":"assertThat(java.lang.String, T, org.hamcrest.Matcher<? super T>)","declarationInfo":null},{"declaringType":"org.hamcrest.CoreMatchers","methodName":"is","lineNumber":["22"],"fullExpression":"is(expected)","methodSignature":"is(T)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/ResponseBodyTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["61"],"fullExpression":"assertEquals(HELLO_WORLD, body)","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["71"],"fullExpression":"assertEquals(XIDXUS, body)","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["81"],"fullExpression":"assertEquals(GALLUS_SCANDALUM, body)","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["91"],"fullExpression":"assertEquals($11AB, body)","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/serialization/InputStreamSerializerTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertArrayEquals","lineNumber":["20"],"fullExpression":"Assert.assertArrayEquals(bytes, output.toByteArray())","methodSignature":"assertArrayEquals(byte[], byte[])","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["30"],"fullExpression":"Assert.assertTrue(\"Expected stream to be closed\", input.closed)","methodSignature":"assertTrue(java.lang.String, boolean)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/StaticFilesFromArchiveTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["86"],"fullExpression":"assertEquals(expectedContentType, \"text/css\")","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["89"],"fullExpression":"assertEquals(\"Content of css file\", body)","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/BooksIntegrationTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["65"],"fullExpression":"assertNotNull(response)","methodSignature":"assertNotNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["66"],"fullExpression":"assertNotNull(response.body)","methodSignature":"assertNotNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["67"],"fullExpression":"assertTrue(Integer.valueOf(response.body) > 0)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["68"],"fullExpression":"assertEquals(201, response.status)","methodSignature":"assertEquals(long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["77"],"fullExpression":"assertNotNull(response)","methodSignature":"assertNotNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["79"],"fullExpression":"assertNotNull(body)","methodSignature":"assertNotNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["80"],"fullExpression":"assertTrue(Integer.valueOf(body) > 0)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["81"],"fullExpression":"assertEquals(200, response.status)","methodSignature":"assertEquals(long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["82"],"fullExpression":"assertTrue(response.body.contains(bookId))","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["92"],"fullExpression":"assertNotNull(response)","methodSignature":"assertNotNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["93"],"fullExpression":"assertNotNull(response.body)","methodSignature":"assertNotNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["94"],"fullExpression":"assertEquals(200, response.status)","methodSignature":"assertEquals(long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["95"],"fullExpression":"assertTrue(result.contains(AUTHOR))","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["96"],"fullExpression":"assertTrue(result.contains(TITLE))","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["97"],"fullExpression":"assertTrue(beforeFilterIsSet(response))","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["98"],"fullExpression":"assertTrue(afterFilterIsSet(response))","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["108"],"fullExpression":"assertNotNull(response)","methodSignature":"assertNotNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["109"],"fullExpression":"assertNotNull(response.body)","methodSignature":"assertNotNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["110"],"fullExpression":"assertEquals(200, response.status)","methodSignature":"assertEquals(long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["111"],"fullExpression":"assertTrue(result.contains(bookId))","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["112"],"fullExpression":"assertTrue(result.contains(\"updated\"))","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["123"],"fullExpression":"assertNotNull(response)","methodSignature":"assertNotNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["124"],"fullExpression":"assertNotNull(response.body)","methodSignature":"assertNotNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["125"],"fullExpression":"assertEquals(200, response.status)","methodSignature":"assertEquals(long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["126"],"fullExpression":"assertTrue(result.contains(AUTHOR))","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["127"],"fullExpression":"assertTrue(result.contains(NEW_TITLE))","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["137"],"fullExpression":"assertNotNull(response)","methodSignature":"assertNotNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertNotNull","lineNumber":["138"],"fullExpression":"assertNotNull(response.body)","methodSignature":"assertNotNull(java.lang.Object)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["139"],"fullExpression":"assertEquals(200, response.status)","methodSignature":"assertEquals(long, long)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["140"],"fullExpression":"assertTrue(result.contains(bookId))","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["141"],"fullExpression":"assertTrue(result.contains(\"deleted\"))","methodSignature":"assertTrue(boolean)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/embeddedserver/jetty/SocketConnectorFactory.java":[{"declaringType":"org.eclipse.jetty.util.ssl.SslContextFactory.Server","methodName":"setNeedClientAuth","lineNumber":["93"],"fullExpression":"sslContextFactory.setNeedClientAuth(true)","methodSignature":"setNeedClientAuth(boolean)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.ssl.SslContextFactory.Server","methodName":"setWantClientAuth","lineNumber":["94"],"fullExpression":"sslContextFactory.setWantClientAuth(true)","methodSignature":"setWantClientAuth(boolean)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.AbstractConnector","methodName":"setIdleTimeout","lineNumber":["106"],"fullExpression":"connector.setIdleTimeout(TimeUnit.HOURS.toMillis(1))","methodSignature":"setIdleTimeout(long)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.AbstractNetworkConnector","methodName":"setHost","lineNumber":["107"],"fullExpression":"connector.setHost(host)","methodSignature":"setHost(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.AbstractNetworkConnector","methodName":"setPort","lineNumber":["108"],"fullExpression":"connector.setPort(port)","methodSignature":"setPort(int)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.HttpConfiguration","methodName":"setSecureScheme","lineNumber":["113"],"fullExpression":"httpConfig.setSecureScheme(\"https\")","methodSignature":"setSecureScheme(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.HttpConfiguration","methodName":"addCustomizer","lineNumber":["115"],"fullExpression":"httpConfig.addCustomizer(new ForwardedRequestCustomizer())","methodSignature":"addCustomizer(org.eclipse.jetty.server.HttpConfiguration.Customizer)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/staticfiles/DisableMimeGuessingTest.java":[{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["56"],"fullExpression":"LOGGER.debug(\"tearDown().deleting: \" + tmpExternalFile)","methodSignature":"debug(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/embeddedserver/jetty/EmbeddedJettyServer.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["55"],"fullExpression":"LoggerFactory.getLogger(this.getClass())","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["98"],"fullExpression":"logger.error(\"Could not get first available port (port set to 0), using default: {}\", SPARK_DEFAULT_PORT)","methodSignature":"error(java.lang.String, java.lang.Object)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"getConnectors","lineNumber":["118"],"fullExpression":"server.getConnectors()","methodSignature":"getConnectors()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.AbstractConnector","methodName":"getServer","lineNumber":["119"],"fullExpression":"connector.getServer()","methodSignature":"getServer()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"setConnectors","lineNumber":["121"],"fullExpression":"server.setConnectors(previousConnectors)","methodSignature":"setConnectors(org.eclipse.jetty.server.Connector[])","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"setConnectors","lineNumber":["124"],"fullExpression":"server.setConnectors(new Connector[] { connector })","methodSignature":"setConnectors(org.eclipse.jetty.server.Connector[])","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.HandlerWrapper","methodName":"setHandler","lineNumber":["132"],"fullExpression":"server.setHandler(handler)","methodSignature":"setHandler(org.eclipse.jetty.server.Handler)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.HandlerCollection","methodName":"setHandlers","lineNumber":["143"],"fullExpression":"handlers.setHandlers(handlersInList.toArray(new Handler[handlersInList.size()]))","methodSignature":"setHandlers(org.eclipse.jetty.server.Handler[])","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.HandlerWrapper","methodName":"setHandler","lineNumber":["144"],"fullExpression":"server.setHandler(handlers)","methodSignature":"setHandler(org.eclipse.jetty.server.Handler)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["147"],"fullExpression":"logger.info(\"== {} has ignited ...\", NAME)","methodSignature":"info(java.lang.String, java.lang.Object)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["149"],"fullExpression":"logger.info(\">> Listening on Custom Server ports!\")","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["151"],"fullExpression":"logger.info(\">> Listening on {}:{}\", host, port)","methodSignature":"info(java.lang.String, java.lang.Object, java.lang.Object)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"start","lineNumber":["154"],"fullExpression":"server.start()","methodSignature":"start()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"join","lineNumber":["163"],"fullExpression":"server.join()","methodSignature":"join()","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["171"],"fullExpression":"logger.info(\">>> {} shutting down ...\", NAME)","methodSignature":"info(java.lang.String, java.lang.Object)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"stop","lineNumber":["174"],"fullExpression":"server.stop()","methodSignature":"stop()","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["177"],"fullExpression":"logger.error(\"stop failed\", e)","methodSignature":"error(java.lang.String, java.lang.Throwable)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["180"],"fullExpression":"logger.info(\"done\")","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.thread.ThreadPool","methodName":"getThreads","lineNumber":["188"],"fullExpression":"server.getThreadPool().getThreads()","methodSignature":"getThreads()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"getThreadPool","lineNumber":["188"],"fullExpression":"server.getThreadPool()","methodSignature":"getThreadPool()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.thread.ThreadPool","methodName":"getIdleThreads","lineNumber":["188"],"fullExpression":"server.getThreadPool().getIdleThreads()","methodSignature":"getIdleThreads()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"getThreadPool","lineNumber":["188"],"fullExpression":"server.getThreadPool()","methodSignature":"getThreadPool()","declarationInfo":null}],"Application/spark-master/src/main/java/spark/staticfiles/StaticFilesConfiguration.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["48"],"fullExpression":"LoggerFactory.getLogger(StaticFilesConfiguration.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["150"],"fullExpression":"LOG.info(\"StaticResourceHandler configured with folder = \" + folder)","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["167"],"fullExpression":"LOG.error(\"External Static resource location must be a folder\")","methodSignature":"error(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["175"],"fullExpression":"LOG.info(\"External StaticResourceHandler configured with folder = \" + folder)","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["177"],"fullExpression":"LOG.error(\"Error when creating external StaticResourceHandler\", e)","methodSignature":"error(java.lang.String, java.lang.Throwable)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/embeddedserver/jetty/EmbeddedJettyFactoryTest.java":[{"declaringType":"org.mockito.Mockito","methodName":"times","lineNumber":["41"],"fullExpression":"times(1)","methodSignature":"times(int)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.HandlerWrapper","methodName":"getHandler","lineNumber":["43"],"fullExpression":"server.getHandler()","methodSignature":"getHandler()","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"times","lineNumber":["62"],"fullExpression":"times(1)","methodSignature":"times(int)","declarationInfo":null},{"declaringType":"org.mockito.Mockito","methodName":"times","lineNumber":["81"],"fullExpression":"times(1)","methodSignature":"times(int)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.HandlerWrapper","methodName":"getHandler","lineNumber":["99"],"fullExpression":"server.getHandler()","methodSignature":"getHandler()","declarationInfo":null}],"Application/spark-master/src/test/java/spark/InitExceptionHandlerTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertEquals","lineNumber":["27"],"fullExpression":"Assert.assertEquals(\"Custom init error\", errorMessage)","methodSignature":"assertEquals(java.lang.Object, java.lang.Object)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/servlet/ServletTest.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["24"],"fullExpression":"LoggerFactory.getLogger(ServletTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.AbstractConnector","methodName":"setIdleTimeout","lineNumber":["45"],"fullExpression":"connector.setIdleTimeout(1000 * 60 * 60)","methodSignature":"setIdleTimeout(long)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.ServerConnector","methodName":"setSoLingerTime","lineNumber":["46"],"fullExpression":"connector.setSoLingerTime(-1)","methodSignature":"setSoLingerTime(int)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.AbstractNetworkConnector","methodName":"setPort","lineNumber":["47"],"fullExpression":"connector.setPort(PORT)","methodSignature":"setPort(int)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"setConnectors","lineNumber":["48"],"fullExpression":"server.setConnectors(new Connector[] { connector })","methodSignature":"setConnectors(org.eclipse.jetty.server.Connector[])","declarationInfo":null},{"declaringType":"org.eclipse.jetty.webapp.WebAppContext","methodName":"setServer","lineNumber":["51"],"fullExpression":"bb.setServer(server)","methodSignature":"setServer(org.eclipse.jetty.server.Server)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.ContextHandler","methodName":"setContextPath","lineNumber":["52"],"fullExpression":"bb.setContextPath(SOMEPATH)","methodSignature":"setContextPath(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.webapp.WebAppContext","methodName":"setWar","lineNumber":["53"],"fullExpression":"bb.setWar(\"src/test/webapp\")","methodSignature":"setWar(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.HandlerWrapper","methodName":"setHandler","lineNumber":["55"],"fullExpression":"server.setHandler(bb)","methodSignature":"setHandler(org.eclipse.jetty.server.Handler)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["62"],"fullExpression":"LOGGER.info(\">>> STARTING EMBEDDED JETTY SERVER for jUnit testing of SparkFilter\")","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"start","lineNumber":["63"],"fullExpression":"server.start()","methodSignature":"start()","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["66"],"fullExpression":"LOGGER.info(\">>> STOPPING EMBEDDED JETTY SERVER\")","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.util.component.AbstractLifeCycle","methodName":"stop","lineNumber":["67"],"fullExpression":"server.stop()","methodSignature":"stop()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"join","lineNumber":["68"],"fullExpression":"server.join()","methodSignature":"join()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["123"],"fullExpression":"Assert.assertTrue(urlResponse.status == 401)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["129"],"fullExpression":"Assert.assertTrue(urlResponse.status == 404)","methodSignature":"assertTrue(boolean)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/embeddedserver/jetty/websocket/WebSocketServletContextHandlerFactory.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["35"],"fullExpression":"LoggerFactory.getLogger(WebSocketServletContextHandlerFactory.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter","methodName":"configureContext","lineNumber":["50"],"fullExpression":"WebSocketUpgradeFilter.configureContext(webSocketServletContextHandler)","methodSignature":"configureContext(org.eclipse.jetty.servlet.ServletContextHandler)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.api.WebSocketPolicy","methodName":"setIdleTimeout","lineNumber":["52"],"fullExpression":"webSocketUpgradeFilter.getFactory().getPolicy().setIdleTimeout(webSocketIdleTimeoutMillis.get())","methodSignature":"setIdleTimeout(long)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.servlet.WebSocketServletFactory","methodName":"getPolicy","lineNumber":["52"],"fullExpression":"webSocketUpgradeFilter.getFactory().getPolicy()","methodSignature":"getPolicy()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter","methodName":"getFactory","lineNumber":["52"],"fullExpression":"webSocketUpgradeFilter.getFactory()","methodSignature":"getFactory()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.ContextHandler.Context","methodName":"getAttribute","lineNumber":["57"],"fullExpression":"webSocketServletContextHandler.getServletContext().getAttribute(NativeWebSocketConfiguration.class.getName())","methodSignature":"getAttribute(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.handler.ContextHandler","methodName":"getServletContext","lineNumber":["57"],"fullExpression":"webSocketServletContextHandler.getServletContext()","methodSignature":"getServletContext()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.server.NativeWebSocketConfiguration","methodName":"addMapping","lineNumber":["61"],"fullExpression":"webSocketConfiguration.addMapping(new ServletPathSpec(path), webSocketCreator)","methodSignature":"addMapping(org.eclipse.jetty.http.pathmap.PathSpec, org.eclipse.jetty.websocket.servlet.WebSocketCreator)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"error","lineNumber":["64"],"fullExpression":"logger.error(\"creation of websocket context handler failed.\", ex)","methodSignature":"error(java.lang.String, java.lang.Throwable)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/http/matching/MatcherFilter.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["47"],"fullExpression":"org.slf4j.LoggerFactory.getLogger(MatcherFilter.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["167"],"fullExpression":"LOG.info(\"The requested route [{}] has not been mapped in Spark for {}: [{}]\", uri, ACCEPT_TYPE_REQUEST_MIME_HEADER, acceptType)","methodSignature":"info(java.lang.String, java.lang.Object...)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/examples/filter/DummyFilter.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["28"],"fullExpression":"LoggerFactory.getLogger(DummyFilter.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["32"],"fullExpression":"LOGGER.info(\"Before\")","methodSignature":"info(java.lang.String)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"info","lineNumber":["36"],"fullExpression":"LOGGER.info(\"After\")","methodSignature":"info(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/embeddedserver/jetty/websocket/WebSocketTestClient.java":[{"declaringType":"org.eclipse.jetty.websocket.api.RemoteEndpoint","methodName":"sendString","lineNumber":["32"],"fullExpression":"session.getRemote().sendString(\"Hi Spark!\")","methodSignature":"sendString(java.lang.String)","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.api.Session","methodName":"getRemote","lineNumber":["32"],"fullExpression":"session.getRemote()","methodSignature":"getRemote()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.websocket.api.Session","methodName":"close","lineNumber":["33"],"fullExpression":"session.close(StatusCode.NORMAL, \"Bye!\")","methodSignature":"close(int, java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/Base64Test.java":[{"declaringType":"org.junit.Assert","methodName":"assertFalse","lineNumber":["16"],"fullExpression":"Assert.assertFalse(in.equals(encode))","methodSignature":"assertFalse(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["27"],"fullExpression":"Assert.assertTrue(in.equals(decode))","methodSignature":"assertTrue(boolean)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/MultipleServicesTest.java":[{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["115"],"fullExpression":"Assert.assertTrue(isUriOnList)","methodSignature":"assertTrue(boolean)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/GenericSecureIntegrationTest.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["27"],"fullExpression":"LoggerFactory.getLogger(GenericSecureIntegrationTest.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["142"],"fullExpression":"Assert.assertTrue(urlResponse.status == 401)","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["148"],"fullExpression":"Assert.assertTrue(urlResponse.status == 404)","methodSignature":"assertTrue(boolean)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/resource/ClassPathResourceHandler.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["33"],"fullExpression":"LoggerFactory.getLogger(ClassPathResourceHandler.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"isDebugEnabled","lineNumber":["92"],"fullExpression":"LOG.isDebugEnabled()","methodSignature":"isDebugEnabled()","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["93"],"fullExpression":"LOG.debug(e.getClass().getSimpleName() + \" when trying to get resource. \" + e.getMessage())","methodSignature":"debug(java.lang.String)","declarationInfo":null}],"Application/spark-master/src/test/java/spark/embeddedserver/EmbeddedServersTest.java":[{"declaringType":"org.junit.rules.TemporaryFolder","methodName":"newFolder","lineNumber":["33"],"fullExpression":"temporaryFolder.newFolder()","methodSignature":"newFolder()","declarationInfo":null},{"declaringType":"org.eclipse.jetty.server.Server","methodName":"setRequestLog","lineNumber":["35"],"fullExpression":"server.setRequestLog(new NCSARequestLog(requestLogFile.getAbsolutePath()))","methodSignature":"setRequestLog(org.eclipse.jetty.server.RequestLog)","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["49"],"fullExpression":"assertTrue(requestLogFile.exists())","methodSignature":"assertTrue(boolean)","declarationInfo":null},{"declaringType":"org.junit.rules.TemporaryFolder","methodName":"newFolder","lineNumber":["56"],"fullExpression":"temporaryFolder.newFolder()","methodSignature":"newFolder()","declarationInfo":null},{"declaringType":"org.junit.Assert","methodName":"assertTrue","lineNumber":["75"],"fullExpression":"assertTrue(requestLogFile.exists())","methodSignature":"assertTrue(boolean)","declarationInfo":null}],"Application/spark-master/src/main/java/spark/resource/ExternalResourceHandler.java":[{"declaringType":"org.slf4j.LoggerFactory","methodName":"getLogger","lineNumber":["33"],"fullExpression":"LoggerFactory.getLogger(ExternalResourceHandler.class)","methodSignature":"getLogger(java.lang.Class<?>)","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"isDebugEnabled","lineNumber":["91"],"fullExpression":"LOG.isDebugEnabled()","methodSignature":"isDebugEnabled()","declarationInfo":null},{"declaringType":"org.slf4j.Logger","methodName":"debug","lineNumber":["92"],"fullExpression":"LOG.debug(e.getClass().getSimpleName() + \" when trying to get resource. \" + e.getMessage())","methodSignature":"debug(java.lang.String)","declarationInfo":null}]}