{"!":"com.github.javaparser.ast.CompilationUnit","range":{"beginLine":1,"beginColumn":1,"endLine":136,"endColumn":2},"tokenRange":{"beginToken":{"kind":9,"text":"/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */"},"endToken":{"kind":0,"text":""}},"imports":[{"!":"com.github.javaparser.ast.ImportDeclaration","range":{"beginLine":19,"beginColumn":1,"endLine":19,"endColumn":20},"tokenRange":{"beginToken":{"kind":36,"text":"import"},"endToken":{"kind":106,"text":";"}},"isAsterisk":"false","isStatic":"false","name":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":19,"beginColumn":8,"endLine":19,"endColumn":19},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"File"}},"identifier":"File","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":19,"beginColumn":8,"endLine":19,"endColumn":14},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"io"}},"identifier":"io","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":19,"beginColumn":8,"endLine":19,"endColumn":11},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"java"}},"identifier":"java"}}}},{"!":"com.github.javaparser.ast.ImportDeclaration","range":{"beginLine":20,"beginColumn":1,"endLine":20,"endColumn":27},"tokenRange":{"beginToken":{"kind":36,"text":"import"},"endToken":{"kind":106,"text":";"}},"isAsterisk":"false","isStatic":"false","name":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":20,"beginColumn":8,"endLine":20,"endColumn":26},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"IOException"}},"identifier":"IOException","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":20,"beginColumn":8,"endLine":20,"endColumn":14},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"io"}},"identifier":"io","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":20,"beginColumn":8,"endLine":20,"endColumn":11},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"java"}},"identifier":"java"}}}},{"!":"com.github.javaparser.ast.ImportDeclaration","range":{"beginLine":21,"beginColumn":1,"endLine":21,"endColumn":20},"tokenRange":{"beginToken":{"kind":36,"text":"import"},"endToken":{"kind":106,"text":";"}},"isAsterisk":"false","isStatic":"false","name":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":21,"beginColumn":8,"endLine":21,"endColumn":19},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"URI"}},"identifier":"URI","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":21,"beginColumn":8,"endLine":21,"endColumn":15},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"net"}},"identifier":"net","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":21,"beginColumn":8,"endLine":21,"endColumn":11},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"java"}},"identifier":"java"}}}},{"!":"com.github.javaparser.ast.ImportDeclaration","range":{"beginLine":22,"beginColumn":1,"endLine":22,"endColumn":20},"tokenRange":{"beginToken":{"kind":36,"text":"import"},"endToken":{"kind":106,"text":";"}},"isAsterisk":"false","isStatic":"false","name":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":22,"beginColumn":8,"endLine":22,"endColumn":19},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"URL"}},"identifier":"URL","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":22,"beginColumn":8,"endLine":22,"endColumn":15},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"net"}},"identifier":"net","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":22,"beginColumn":8,"endLine":22,"endColumn":11},"tokenRange":{"beginToken":{"kind":97,"text":"java"},"endToken":{"kind":97,"text":"java"}},"identifier":"java"}}}}],"packageDeclaration":{"!":"com.github.javaparser.ast.PackageDeclaration","range":{"beginLine":17,"beginColumn":1,"endLine":17,"endColumn":23},"tokenRange":{"beginToken":{"kind":45,"text":"package"},"endToken":{"kind":106,"text":";"}},"annotations":[],"name":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":17,"beginColumn":9,"endLine":17,"endColumn":22},"tokenRange":{"beginToken":{"kind":97,"text":"spark"},"endToken":{"kind":97,"text":"resource"}},"identifier":"resource","qualifier":{"!":"com.github.javaparser.ast.expr.Name","range":{"beginLine":17,"beginColumn":9,"endLine":17,"endColumn":13},"tokenRange":{"beginToken":{"kind":97,"text":"spark"},"endToken":{"kind":97,"text":"spark"}},"identifier":"spark"}}},"types":[{"!":"com.github.javaparser.ast.body.ClassOrInterfaceDeclaration","range":{"beginLine":40,"beginColumn":1,"endLine":136,"endColumn":1},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":103,"text":"}"}},"extendedTypes":[{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":40,"beginColumn":35,"endLine":40,"endColumn":53},"tokenRange":{"beginToken":{"kind":97,"text":"InputStreamResource"},"endToken":{"kind":97,"text":"InputStreamResource"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":40,"beginColumn":35,"endLine":40,"endColumn":53},"tokenRange":{"beginToken":{"kind":97,"text":"InputStreamResource"},"endToken":{"kind":97,"text":"InputStreamResource"}},"identifier":"InputStreamResource"},"annotations":[]}],"implementedTypes":[],"isInterface":"true","permittedTypes":[],"typeParameters":[],"members":[{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":50,"beginColumn":5,"endLine":50,"endColumn":21},"tokenRange":{"beginToken":{"kind":13,"text":"boolean"},"endToken":{"kind":106,"text":";"}},"type":{"!":"com.github.javaparser.ast.type.PrimitiveType","range":{"beginLine":50,"beginColumn":5,"endLine":50,"endColumn":11},"tokenRange":{"beginToken":{"kind":13,"text":"boolean"},"endToken":{"kind":13,"text":"boolean"}},"type":"BOOLEAN","annotations":[]},"modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":50,"beginColumn":13,"endLine":50,"endColumn":18},"tokenRange":{"beginToken":{"kind":97,"text":"exists"},"endToken":{"kind":97,"text":"exists"}},"identifier":"exists"},"parameters":[],"thrownExceptions":[],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":42,"beginColumn":5,"endLine":49,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * Return whether this resource actually exists in physical form.\n     * <p>This method performs a definitive existence check, whereas the\n     * existence of a {@code Resource} handle only guarantees a\n     * valid descriptor handle.\n     *\n     * @return if exists\n     */"},"endToken":{"kind":8,"text":"/**\n     * Return whether this resource actually exists in physical form.\n     * <p>This method performs a definitive existence check, whereas the\n     * existence of a {@code Resource} handle only guarantees a\n     * valid descriptor handle.\n     *\n     * @return if exists\n     */"}},"content":"\n     * Return whether this resource actually exists in physical form.\n     * <p>This method performs a definitive existence check, whereas the\n     * existence of a {@code Resource} handle only guarantees a\n     * valid descriptor handle.\n     *\n     * @return if exists\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":63,"beginColumn":5,"endLine":63,"endColumn":25},"tokenRange":{"beginToken":{"kind":13,"text":"boolean"},"endToken":{"kind":106,"text":";"}},"type":{"!":"com.github.javaparser.ast.type.PrimitiveType","range":{"beginLine":63,"beginColumn":5,"endLine":63,"endColumn":11},"tokenRange":{"beginToken":{"kind":13,"text":"boolean"},"endToken":{"kind":13,"text":"boolean"}},"type":"BOOLEAN","annotations":[]},"modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":63,"beginColumn":13,"endLine":63,"endColumn":22},"tokenRange":{"beginToken":{"kind":97,"text":"isReadable"},"endToken":{"kind":97,"text":"isReadable"}},"identifier":"isReadable"},"parameters":[],"thrownExceptions":[],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":52,"beginColumn":5,"endLine":62,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * Return whether the contents of this resource can be read,\n     * e.g. via {@link #getInputStream()} or {@link #getFile()}.\n     * <p>Will be {@code true} for typical resource descriptors;\n     * note that actual content reading may still fail when attempted.\n     * However, a value of {@code false} is a definitive indication\n     * that the resource content cannot be read.\n     *\n     * @return if readable\n     * @see #getInputStream()\n     */"},"endToken":{"kind":8,"text":"/**\n     * Return whether the contents of this resource can be read,\n     * e.g. via {@link #getInputStream()} or {@link #getFile()}.\n     * <p>Will be {@code true} for typical resource descriptors;\n     * note that actual content reading may still fail when attempted.\n     * However, a value of {@code false} is a definitive indication\n     * that the resource content cannot be read.\n     *\n     * @return if readable\n     * @see #getInputStream()\n     */"}},"content":"\n     * Return whether the contents of this resource can be read,\n     * e.g. via {@link #getInputStream()} or {@link #getFile()}.\n     * <p>Will be {@code true} for typical resource descriptors;\n     * note that actual content reading may still fail when attempted.\n     * However, a value of {@code false} is a definitive indication\n     * that the resource content cannot be read.\n     *\n     * @return if readable\n     * @see #getInputStream()\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":73,"beginColumn":5,"endLine":73,"endColumn":21},"tokenRange":{"beginToken":{"kind":13,"text":"boolean"},"endToken":{"kind":106,"text":";"}},"type":{"!":"com.github.javaparser.ast.type.PrimitiveType","range":{"beginLine":73,"beginColumn":5,"endLine":73,"endColumn":11},"tokenRange":{"beginToken":{"kind":13,"text":"boolean"},"endToken":{"kind":13,"text":"boolean"}},"type":"BOOLEAN","annotations":[]},"modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":73,"beginColumn":13,"endLine":73,"endColumn":18},"tokenRange":{"beginToken":{"kind":97,"text":"isOpen"},"endToken":{"kind":97,"text":"isOpen"}},"identifier":"isOpen"},"parameters":[],"thrownExceptions":[],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":65,"beginColumn":5,"endLine":72,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * Return whether this resource represents a handle with an open\n     * stream. If true, the InputStream cannot be read multiple times,\n     * and must be read and closed to avoid resource leaks.\n     * <p>Will be {@code false} for typical resource descriptors.\n     *\n     * @return if open\n     */"},"endToken":{"kind":8,"text":"/**\n     * Return whether this resource represents a handle with an open\n     * stream. If true, the InputStream cannot be read multiple times,\n     * and must be read and closed to avoid resource leaks.\n     * <p>Will be {@code false} for typical resource descriptors.\n     *\n     * @return if open\n     */"}},"content":"\n     * Return whether this resource represents a handle with an open\n     * stream. If true, the InputStream cannot be read multiple times,\n     * and must be read and closed to avoid resource leaks.\n     * <p>Will be {@code false} for typical resource descriptors.\n     *\n     * @return if open\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":80,"beginColumn":5,"endLine":80,"endColumn":36},"tokenRange":{"beginToken":{"kind":97,"text":"URL"},"endToken":{"kind":106,"text":";"}},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":80,"beginColumn":5,"endLine":80,"endColumn":7},"tokenRange":{"beginToken":{"kind":97,"text":"URL"},"endToken":{"kind":97,"text":"URL"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":80,"beginColumn":5,"endLine":80,"endColumn":7},"tokenRange":{"beginToken":{"kind":97,"text":"URL"},"endToken":{"kind":97,"text":"URL"}},"identifier":"URL"},"annotations":[]},"modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":80,"beginColumn":9,"endLine":80,"endColumn":14},"tokenRange":{"beginToken":{"kind":97,"text":"getURL"},"endToken":{"kind":97,"text":"getURL"}},"identifier":"getURL"},"parameters":[],"thrownExceptions":[{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":80,"beginColumn":25,"endLine":80,"endColumn":35},"tokenRange":{"beginToken":{"kind":97,"text":"IOException"},"endToken":{"kind":97,"text":"IOException"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":80,"beginColumn":25,"endLine":80,"endColumn":35},"tokenRange":{"beginToken":{"kind":97,"text":"IOException"},"endToken":{"kind":97,"text":"IOException"}},"identifier":"IOException"},"annotations":[]}],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":75,"beginColumn":5,"endLine":79,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * @return a URL handle for this resource.\n     * @throws IOException if the resource cannot be resolved as URL,\n     *                     i.e. if the resource is not available as descriptor\n     */"},"endToken":{"kind":8,"text":"/**\n     * @return a URL handle for this resource.\n     * @throws IOException if the resource cannot be resolved as URL,\n     *                     i.e. if the resource is not available as descriptor\n     */"}},"content":"\n     * @return a URL handle for this resource.\n     * @throws IOException if the resource cannot be resolved as URL,\n     *                     i.e. if the resource is not available as descriptor\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":87,"beginColumn":5,"endLine":87,"endColumn":36},"tokenRange":{"beginToken":{"kind":97,"text":"URI"},"endToken":{"kind":106,"text":";"}},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":87,"beginColumn":5,"endLine":87,"endColumn":7},"tokenRange":{"beginToken":{"kind":97,"text":"URI"},"endToken":{"kind":97,"text":"URI"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":87,"beginColumn":5,"endLine":87,"endColumn":7},"tokenRange":{"beginToken":{"kind":97,"text":"URI"},"endToken":{"kind":97,"text":"URI"}},"identifier":"URI"},"annotations":[]},"modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":87,"beginColumn":9,"endLine":87,"endColumn":14},"tokenRange":{"beginToken":{"kind":97,"text":"getURI"},"endToken":{"kind":97,"text":"getURI"}},"identifier":"getURI"},"parameters":[],"thrownExceptions":[{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":87,"beginColumn":25,"endLine":87,"endColumn":35},"tokenRange":{"beginToken":{"kind":97,"text":"IOException"},"endToken":{"kind":97,"text":"IOException"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":87,"beginColumn":25,"endLine":87,"endColumn":35},"tokenRange":{"beginToken":{"kind":97,"text":"IOException"},"endToken":{"kind":97,"text":"IOException"}},"identifier":"IOException"},"annotations":[]}],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":82,"beginColumn":5,"endLine":86,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * @return a URI handle for this resource.\n     * @throws IOException if the resource cannot be resolved as URI,\n     *                     i.e. if the resource is not available as descriptor\n     */"},"endToken":{"kind":8,"text":"/**\n     * @return a URI handle for this resource.\n     * @throws IOException if the resource cannot be resolved as URI,\n     *                     i.e. if the resource is not available as descriptor\n     */"}},"content":"\n     * @return a URI handle for this resource.\n     * @throws IOException if the resource cannot be resolved as URI,\n     *                     i.e. if the resource is not available as descriptor\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":94,"beginColumn":5,"endLine":94,"endColumn":38},"tokenRange":{"beginToken":{"kind":97,"text":"File"},"endToken":{"kind":106,"text":";"}},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":94,"beginColumn":5,"endLine":94,"endColumn":8},"tokenRange":{"beginToken":{"kind":97,"text":"File"},"endToken":{"kind":97,"text":"File"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":94,"beginColumn":5,"endLine":94,"endColumn":8},"tokenRange":{"beginToken":{"kind":97,"text":"File"},"endToken":{"kind":97,"text":"File"}},"identifier":"File"},"annotations":[]},"modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":94,"beginColumn":10,"endLine":94,"endColumn":16},"tokenRange":{"beginToken":{"kind":97,"text":"getFile"},"endToken":{"kind":97,"text":"getFile"}},"identifier":"getFile"},"parameters":[],"thrownExceptions":[{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":94,"beginColumn":27,"endLine":94,"endColumn":37},"tokenRange":{"beginToken":{"kind":97,"text":"IOException"},"endToken":{"kind":97,"text":"IOException"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":94,"beginColumn":27,"endLine":94,"endColumn":37},"tokenRange":{"beginToken":{"kind":97,"text":"IOException"},"endToken":{"kind":97,"text":"IOException"}},"identifier":"IOException"},"annotations":[]}],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":89,"beginColumn":5,"endLine":93,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * @return a File handle for this resource.\n     * @throws IOException if the resource cannot be resolved as absolute\n     *                     file path, i.e. if the resource is not available in a file system\n     */"},"endToken":{"kind":8,"text":"/**\n     * @return a File handle for this resource.\n     * @throws IOException if the resource cannot be resolved as absolute\n     *                     file path, i.e. if the resource is not available in a file system\n     */"}},"content":"\n     * @return a File handle for this resource.\n     * @throws IOException if the resource cannot be resolved as absolute\n     *                     file path, i.e. if the resource is not available in a file system\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":101,"beginColumn":5,"endLine":101,"endColumn":44},"tokenRange":{"beginToken":{"kind":40,"text":"long"},"endToken":{"kind":106,"text":";"}},"type":{"!":"com.github.javaparser.ast.type.PrimitiveType","range":{"beginLine":101,"beginColumn":5,"endLine":101,"endColumn":8},"tokenRange":{"beginToken":{"kind":40,"text":"long"},"endToken":{"kind":40,"text":"long"}},"type":"LONG","annotations":[]},"modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":101,"beginColumn":10,"endLine":101,"endColumn":22},"tokenRange":{"beginToken":{"kind":97,"text":"contentLength"},"endToken":{"kind":97,"text":"contentLength"}},"identifier":"contentLength"},"parameters":[],"thrownExceptions":[{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":101,"beginColumn":33,"endLine":101,"endColumn":43},"tokenRange":{"beginToken":{"kind":97,"text":"IOException"},"endToken":{"kind":97,"text":"IOException"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":101,"beginColumn":33,"endLine":101,"endColumn":43},"tokenRange":{"beginToken":{"kind":97,"text":"IOException"},"endToken":{"kind":97,"text":"IOException"}},"identifier":"IOException"},"annotations":[]}],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":96,"beginColumn":5,"endLine":100,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * @return the content length for this resource.\n     * @throws IOException if the resource cannot be resolved\n     *                     (in the file system or as some other known physical resource type)\n     */"},"endToken":{"kind":8,"text":"/**\n     * @return the content length for this resource.\n     * @throws IOException if the resource cannot be resolved\n     *                     (in the file system or as some other known physical resource type)\n     */"}},"content":"\n     * @return the content length for this resource.\n     * @throws IOException if the resource cannot be resolved\n     *                     (in the file system or as some other known physical resource type)\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":108,"beginColumn":5,"endLine":108,"endColumn":43},"tokenRange":{"beginToken":{"kind":40,"text":"long"},"endToken":{"kind":106,"text":";"}},"type":{"!":"com.github.javaparser.ast.type.PrimitiveType","range":{"beginLine":108,"beginColumn":5,"endLine":108,"endColumn":8},"tokenRange":{"beginToken":{"kind":40,"text":"long"},"endToken":{"kind":40,"text":"long"}},"type":"LONG","annotations":[]},"modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":108,"beginColumn":10,"endLine":108,"endColumn":21},"tokenRange":{"beginToken":{"kind":97,"text":"lastModified"},"endToken":{"kind":97,"text":"lastModified"}},"identifier":"lastModified"},"parameters":[],"thrownExceptions":[{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":108,"beginColumn":32,"endLine":108,"endColumn":42},"tokenRange":{"beginToken":{"kind":97,"text":"IOException"},"endToken":{"kind":97,"text":"IOException"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":108,"beginColumn":32,"endLine":108,"endColumn":42},"tokenRange":{"beginToken":{"kind":97,"text":"IOException"},"endToken":{"kind":97,"text":"IOException"}},"identifier":"IOException"},"annotations":[]}],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":103,"beginColumn":5,"endLine":107,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * @return the last-modified timestamp for this resource.\n     * @throws IOException if the resource cannot be resolved\n     *                     (in the file system or as some other known physical resource type)\n     */"},"endToken":{"kind":8,"text":"/**\n     * @return the last-modified timestamp for this resource.\n     * @throws IOException if the resource cannot be resolved\n     *                     (in the file system or as some other known physical resource type)\n     */"}},"content":"\n     * @return the last-modified timestamp for this resource.\n     * @throws IOException if the resource cannot be resolved\n     *                     (in the file system or as some other known physical resource type)\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":115,"beginColumn":5,"endLine":115,"endColumn":68},"tokenRange":{"beginToken":{"kind":97,"text":"Resource"},"endToken":{"kind":106,"text":";"}},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":115,"beginColumn":5,"endLine":115,"endColumn":12},"tokenRange":{"beginToken":{"kind":97,"text":"Resource"},"endToken":{"kind":97,"text":"Resource"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":115,"beginColumn":5,"endLine":115,"endColumn":12},"tokenRange":{"beginToken":{"kind":97,"text":"Resource"},"endToken":{"kind":97,"text":"Resource"}},"identifier":"Resource"},"annotations":[]},"modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":115,"beginColumn":14,"endLine":115,"endColumn":27},"tokenRange":{"beginToken":{"kind":97,"text":"createRelative"},"endToken":{"kind":97,"text":"createRelative"}},"identifier":"createRelative"},"parameters":[{"!":"com.github.javaparser.ast.body.Parameter","range":{"beginLine":115,"beginColumn":29,"endLine":115,"endColumn":47},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"relativePath"}},"annotations":[],"isVarArgs":"false","modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":115,"beginColumn":36,"endLine":115,"endColumn":47},"tokenRange":{"beginToken":{"kind":97,"text":"relativePath"},"endToken":{"kind":97,"text":"relativePath"}},"identifier":"relativePath"},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":115,"beginColumn":29,"endLine":115,"endColumn":34},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":115,"beginColumn":29,"endLine":115,"endColumn":34},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"identifier":"String"},"annotations":[]},"varArgsAnnotations":[]}],"thrownExceptions":[{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":115,"beginColumn":57,"endLine":115,"endColumn":67},"tokenRange":{"beginToken":{"kind":97,"text":"IOException"},"endToken":{"kind":97,"text":"IOException"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":115,"beginColumn":57,"endLine":115,"endColumn":67},"tokenRange":{"beginToken":{"kind":97,"text":"IOException"},"endToken":{"kind":97,"text":"IOException"}},"identifier":"IOException"},"annotations":[]}],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":110,"beginColumn":5,"endLine":114,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * @param relativePath the relative path (relative to this resource)\n     * @return the resource handle for the relative resource\n     * @throws IOException if the relative resource cannot be determined\n     */"},"endToken":{"kind":8,"text":"/**\n     * @param relativePath the relative path (relative to this resource)\n     * @return the resource handle for the relative resource\n     * @throws IOException if the relative resource cannot be determined\n     */"}},"content":"\n     * @param relativePath the relative path (relative to this resource)\n     * @return the resource handle for the relative resource\n     * @throws IOException if the relative resource cannot be determined\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":125,"beginColumn":5,"endLine":125,"endColumn":25},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":106,"text":";"}},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":125,"beginColumn":5,"endLine":125,"endColumn":10},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":125,"beginColumn":5,"endLine":125,"endColumn":10},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"identifier":"String"},"annotations":[]},"modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":125,"beginColumn":12,"endLine":125,"endColumn":22},"tokenRange":{"beginToken":{"kind":97,"text":"getFilename"},"endToken":{"kind":97,"text":"getFilename"}},"identifier":"getFilename"},"parameters":[],"thrownExceptions":[],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":117,"beginColumn":5,"endLine":124,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * Determine a filename for this resource, i.e. typically the last\n     * part of the path: for example, \"myfile.txt\".\n     * <p>Returns {@code null} if this type of resource does not\n     * have a filename.\n     *\n     * @return the file name.\n     */"},"endToken":{"kind":8,"text":"/**\n     * Determine a filename for this resource, i.e. typically the last\n     * part of the path: for example, \"myfile.txt\".\n     * <p>Returns {@code null} if this type of resource does not\n     * have a filename.\n     *\n     * @return the file name.\n     */"}},"content":"\n     * Determine a filename for this resource, i.e. typically the last\n     * part of the path: for example, \"myfile.txt\".\n     * <p>Returns {@code null} if this type of resource does not\n     * have a filename.\n     *\n     * @return the file name.\n     "}},{"!":"com.github.javaparser.ast.body.MethodDeclaration","range":{"beginLine":134,"beginColumn":5,"endLine":134,"endColumn":28},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":106,"text":";"}},"type":{"!":"com.github.javaparser.ast.type.ClassOrInterfaceType","range":{"beginLine":134,"beginColumn":5,"endLine":134,"endColumn":10},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":134,"beginColumn":5,"endLine":134,"endColumn":10},"tokenRange":{"beginToken":{"kind":97,"text":"String"},"endToken":{"kind":97,"text":"String"}},"identifier":"String"},"annotations":[]},"modifiers":[],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":134,"beginColumn":12,"endLine":134,"endColumn":25},"tokenRange":{"beginToken":{"kind":97,"text":"getDescription"},"endToken":{"kind":97,"text":"getDescription"}},"identifier":"getDescription"},"parameters":[],"thrownExceptions":[],"typeParameters":[],"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":127,"beginColumn":5,"endLine":133,"endColumn":7},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n     * @return a description for this resource,\n     * to be used for error output when working with the resource.\n     * <p>Implementations are also encouraged to return this value\n     * from their {@code toString} method.\n     * @see Object#toString()\n     */"},"endToken":{"kind":8,"text":"/**\n     * @return a description for this resource,\n     * to be used for error output when working with the resource.\n     * <p>Implementations are also encouraged to return this value\n     * from their {@code toString} method.\n     * @see Object#toString()\n     */"}},"content":"\n     * @return a description for this resource,\n     * to be used for error output when working with the resource.\n     * <p>Implementations are also encouraged to return this value\n     * from their {@code toString} method.\n     * @see Object#toString()\n     "}}],"modifiers":[{"!":"com.github.javaparser.ast.Modifier","range":{"beginLine":40,"beginColumn":1,"endLine":40,"endColumn":6},"tokenRange":{"beginToken":{"kind":49,"text":"public"},"endToken":{"kind":49,"text":"public"}},"keyword":"PUBLIC"}],"name":{"!":"com.github.javaparser.ast.expr.SimpleName","range":{"beginLine":40,"beginColumn":18,"endLine":40,"endColumn":25},"tokenRange":{"beginToken":{"kind":97,"text":"Resource"},"endToken":{"kind":97,"text":"Resource"}},"identifier":"Resource"},"annotations":[],"comment":{"!":"com.github.javaparser.ast.comments.JavadocComment","range":{"beginLine":24,"beginColumn":1,"endLine":39,"endColumn":3},"tokenRange":{"beginToken":{"kind":8,"text":"/**\n * Interface for a resource descriptor that abstracts from the actual\n * type of underlying resource, such as a file or class path resource.\n * <p>An InputStream can be opened for every resource if it exists in\n * physical form, but a URL or File handle can just be returned for\n * certain resources. The actual behavior is implementation-specific.\n *\n * @author Juergen Hoeller\n * @see #getInputStream()\n * @see #getURL()\n * @see #getURI()\n * @see #getFile()\n * @see ClassPathResource\n * @see InputStreamResource\n * Code copied from Spring source. Modifications made (mostly removal of methods) by Per Wendel.\n */"},"endToken":{"kind":8,"text":"/**\n * Interface for a resource descriptor that abstracts from the actual\n * type of underlying resource, such as a file or class path resource.\n * <p>An InputStream can be opened for every resource if it exists in\n * physical form, but a URL or File handle can just be returned for\n * certain resources. The actual behavior is implementation-specific.\n *\n * @author Juergen Hoeller\n * @see #getInputStream()\n * @see #getURL()\n * @see #getURI()\n * @see #getFile()\n * @see ClassPathResource\n * @see InputStreamResource\n * Code copied from Spring source. Modifications made (mostly removal of methods) by Per Wendel.\n */"}},"content":"\n * Interface for a resource descriptor that abstracts from the actual\n * type of underlying resource, such as a file or class path resource.\n * <p>An InputStream can be opened for every resource if it exists in\n * physical form, but a URL or File handle can just be returned for\n * certain resources. The actual behavior is implementation-specific.\n *\n * @author Juergen Hoeller\n * @see #getInputStream()\n * @see #getURL()\n * @see #getURI()\n * @see #getFile()\n * @see ClassPathResource\n * @see InputStreamResource\n * Code copied from Spring source. Modifications made (mostly removal of methods) by Per Wendel.\n "}}],"comment":{"!":"com.github.javaparser.ast.comments.BlockComment","range":{"beginLine":1,"beginColumn":1,"endLine":15,"endColumn":3},"tokenRange":{"beginToken":{"kind":9,"text":"/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */"},"endToken":{"kind":9,"text":"/*\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */"}},"content":"\n * Copyright 2002-2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n "}}